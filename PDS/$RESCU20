---------------------------------------------------------------------
Rescue System Execs - V2.0
---------------------------------------------------------------------
03/28/2001
John C. Miller
http://www.jmit.com/
john@jmit.com
---------------------------------------------------------------------
NOTE: See the $$$QUIK member to get started with minimum verbiage.

The Long Version:
This set of Rexx execs is used to build a single-volume (3390-3), self
contained OS/390 rescue system.  These exec are a replacement for the
older rescue assembler macros for building a rescue system based on
OS/390 version 1.3.  These exec are much better in my opinion. The
execs are smarter, and dynamically build lots of parmlib members,
PROCs, etc.  This version was developed based on OS/390 version 2.10,
and supports OMVS.  I've included TCP/IP libraries in this build.

Read the $$$ members - They contain useful information, especially if
you are having problems.  See the $$$MAINT member for maintenance issues
related to HFS and PDS-E support.  See the $$$RACF member for info on
RACF authority that you'll need to run the jobs that build the RESCUE
system.

You don't have to be an OS/390 guru to successfully use this set of
tools to build an OS/390 rescue system.  You do however need to have a
fairly solid grounding in OS/390 (MVS) in order to know what the various
jobs and piece parts do, and how to get past inevitable glitches.
Liberal use of the IBM manuals will be of help.  (See the web site below
for some handy IBM web manuals)

DISCLAIMER: You alone are responsible for any success that you have with
this software tool, as well as any damage done to your system, losses
incurred, etc.

I would greatly appreciate any bug reports, and will answer questions
via email, time permitting.

Good Luck, and remember to RTFM (Read The Fine Manuals)

---------------------------------------------------------------------
            VERY, VERY, EXTRAORDINARILY IMPORTANT NOTES:
      READ THESE NOW, OR BE TRULY AND PROFOUNDLY SORRY LATER:
---------------------------------------------------------------------
* Look at the generated jobs *before* running them, especially JOBA,
  the first job.  It is *incredibly* easy to wipe out an existing
  PRODUCTION disk volume with JOBA if you are not careful.  JOBA
  automatically varies a volume offline, and runs ICKDSF to
  initialize it.  You will need to reply to an MVS console prompt
  when JOBA runs. BEFORE replying to this message to continue, DOUBLE
  CHECK the unit address in the message, and be sure it's the disk
  pack that you want to wipe clean and use to build your rescue
  system.  Most of the remaining jobs are not as dangerous, but you
  should still review the JCL, and understand what each job is doing.
  (This is good for the soul anyway!)

* I'm making the significant assumption that you know what you're doing.

  IN SHORT: If you don't know what a job is going to do, you have
  absolutely no business running it !!!

---------------------------------------------------------------------
                       IMPORTANT NOTES:
            READ THESE NOW TO AVOID FRUSTRATION LATER
---------------------------------------------------------------------
* The good news, now that I've scared you into being careful, is that
  these execs can take some of the drudgery, tedium, and trial and error
  out of the process of building an OS/390 system from scratch.

* OS/390 is not a turnkey system, and these rescue execs are NOT, repeat
  NOT completely automatic.  They are simply a tool that can be used to
  greatly assist in building a single volume rescue system.  However:
  the parameters as delivered are what I used to build a fully
  functioning OS/390 rescue system, and so they may be pretty close to
  what you need, or at least a good start!

* So take some time to carefully review the @PARMS and @DATASET members.
  Don't rush through this part.  Expect to do some tweaking, and expect
  to have to do several system builds before you get a system that IPLs
  and works as expected.

  Once you get the @PARMS and @DATASET members set up the way you
  like, it's very easy to generate a fresh set of jobs, and then run
  the jobs to build a new system.  You'll may even learn something
  about OS/390 by studying the generated jobs.

* RACF Authorities:  See the $$$RACF member of this PDS for RACF
  privileges that are required.

* COMMAND and WAIT programs:  These programs enable the disk unit to be
  varied online and offline by a batch job. If you want this capability
  but don't have these programs on your system already, you can use the
  source in the RESCUE PDS to assemble them.  Assemble these modules to
  a linklisted APF authorized library.

  The COMMAND program is one that I pulled of a CBT tape.  I added code
  to do a RACHECK against the COMMAND profile in the APPL class looking
  for at least READ access.  This prevents undesirable miscreants and
  other unauthorized individuals from issuing MVS commands using this
  program.

  If you don't want to use the COMMAND and WAIT programs, code a null
  value for COMMANDPGM and WAITPGM in the @PARMS member, or just take
  these parms out altogether.  The JCL generated will no longer use
  these programs.

---------------------------------------------------------------------
                  Modifying the RESCUE execs:
---------------------------------------------------------------------
If you want to tweak, hack, or otherwise modify these execs, by all
means be my guest - but you're on your own.  I've tried to comment
the code sufficiently to give a saavy rexx coder the basic idea of
what's going on. I try to avoid truly ugly, oblique, obscure, or
overly terse ways of doing things in rexx when there's a simpler
way, but I don't shy away from "off the wall" techniques when they
work best (or when I can't figure out a simpler way of doing a
task!)

I've made the execs essentially modular, in that the main exec
RESCUE calls external subroutines that are named starting with '#'.
Each subroutine generally builds one job, or does one task.  To add
some new functionality of your own design, make a copy of one of the
subroutines like #initvol, for example, and make it do what you
want.

---------------------------------------------------------------------
Here's how to use these execs to build a one-pack rescue system:
---------------------------------------------------------------------
1)  Edit the ##PDS member, and change the 'pds=' parameter to the
    name of the RESCUE PDS which contains this $$$DOC member as well
    as the other RESCUE system parts.  I named the PDS
    'SYS2.RESCUE.EXEC', but name it whatever works for you.  Just
    remember to put that name in the ##PDS member.

2)  Edit the @DATASET member to include all the datasets needed to
    build a single volume OS/390 system.  The @DATASET members is
    delivered with the list of datasets that I used to create a
    OS/390 2.10 rescue system.  Your mileage may vary, and you
    will need to be sure that all needed datasets are included.

3)  Edit the @PARMS member with the values that you want.  The @PARMS
    member is delivered with an example set of parms that were
    actually used to successfully build a rescue system. You will want
    to change some of the parameters.

4a) Use the $BUILD job to run the rescue build execs under batch TSO.
    Fix the jobcard and PDS name (SYSPROC DD stmt) first.

4b) If desired you can place the PDS containing the rescue execs in your
    SYSPROC concatenation, and from TSO READY enter: %RESCUE. You may
    have to log off to let some of the jobs run, however, so this method
    may be a pain at times.

    Regardless of which option you choose, the necessary jobs and
    members will now be built, and named sequentially JOBA..JOBn, where
    n is howver many jobs end up getting generated.

  *******************************************************************
  *******************************************************************
  *** NOTE: Up until this point, nothing has been been changed on ***
  **  either the driving system or the new rescue system.  The     **
  **  steps below this box will start tweaking and building.       **
  **  If all goes as expected, the only changes made to the        **
  **  driving system are:                                          **
  **  a. The driving system mastercat will have an alias defined   **
  **     pointing to the rescue system mastercat.                  **
  **  b. RACF Profile TSORESC in TSOPROC class will be defined.    **
  **  c. RACF ID $RESCUE and group $STC will be defined.           **
  **                                                               **
  **     THAT SHOULD BE IT.  ANYTHING ELSE WAS NOT INTENDED,       **
  **     AND SHOULD BE DONE AT YOUR OWN RISK!!!                    **
  **     (Did I mention that you should review each job            **
  ***    before it is run?  Well, please do.)                     ***
  *******************************************************************
  *******************************************************************

5)  Run all the jobs (JOBA - JOBx).  Again -- reviewing and
    understanding the jobs *before* you run them would be, as they
    say, "a good thing."

    Investigate any job steps that complete with return code 8 or
    greater.

  *******************************************************************
  *******************************************************************
  ***  If everything was defined right, you should now have an    ***
  **   IPL'able OS/390 rescue system.  The steps below are some    **
  **   areas to check before trying to IPL.  You don't have to     **
  **   do these things now, but you'll probably save yourself      **
  ***  some IPLs if you do check them first.                      ***
  *******************************************************************
  *******************************************************************

6)  You will need to fix the ATCCON and ATCSTR members of VTAMLST, and
    also be sure that the necessary VTAMLST members are available on
    your rescue system.  Use COPY statements in the @DATASET member to
    specify members to copy.  You may want to code a special set of
    trimmed down VTAM parms in a private PDS, and copy them into VTAMLST
    and VTAMLIB using COPY statements.

7)  Review PARMLIB.  SYS1.RESCUE.PARMLIB is first in the PARMLIB concat,
    followed by whatever other PARMLIBS are coded in @DATASET with the
    'PARMLIB' attribute: ,,(PARMLIB).  Parmlib members are built for you
    and copied to SYS1.RESCUE.PARMLIB as follows:

    PROGA0   - APF authorized libraries (Coded in @DATASET with APF)
    PROGL0   - Linklist libraries (Coded in @DATASET with LNK)
    MSTJCL01 - Master JCL.  Includes all PROCLIBS coded in @DATASET with
               the "JES2" attribute.
    JES2PARM - JES2 parms. Member ZJES2PARM is combined with dynamically
               built SPOOLDEF and CKPTDEF statements, and then copied to
               the JES2PARM member in SYS1.RESCUE.PARMLIB.  Review
               ZJES2PRM for any changes you want to make *before*
               building the rescue jobs.  The SPOOLDEF and CKPTDEF are
               already coded for you, but you may want to change some of
               the other parameters, or replace the entire ZJES2PRM
               member with your own JES2 parms.  If you do this, be sure
               to remove the SPOOLDEF and CKPTDEF statements from the
               source that you place in ZJES2PARM, since these two
               statements are coded for you automatically.
    IGDSMS00 - SMS parms built from ZIGDSMS and ACDS/COMMDS statements
               built dynamically.

    NOTE: You'll need to be sure that one of the PARMLIB's that you're
    copying to the RESCUE system has the remainder of the members needed
    as coded in SYS1.RESCUE.PARMLIB(IEASYS00)'. Your production PARMLIB
    dataset will probably work fine.

8)  Review PROCLIB.  SYS1.RESCUE.PROCLIB is first in the PROCLIB
    concat, followed by whatever other PROCLIBs are coded in
    @DATASET with the "JES2" attribute: ,,(JES2).  Started procedures
    (PROCS) are built for you and copied to SYS1.RESCUE.PROCLIB as
    follows:
    TSO      - TSO started PROC.
    VTAM     - VTAM started PROC.  Includes libraries in the VTAMLST and
               VTAMLIB concatenation that you coded in @DATASET with the
               'VTAMLST' and 'VTAMLIB' attribute respectively.
    JES2     - JES2 Startup PROC.  Includes libraries in the PROC00
               concatenation that you coded in @DATASET with the 'JES2'
               attribute.
    TSORESC  - TSO LOGON PROC.  Includes libraries defined in @DATASET
               with attributes:  ISPPLIB, ISPMLIB, ISPSLIB, ISPTLIB,
               ISPLLIB, SYSPROC, SYSUADS.

9)  Review IPLPARM.  SYS1.IPLPARM on the RESCUE volume has member LOAD00
    built from the parameters you specified.  PARMLIB statements are
    included for libraries in the @DATASET member coded with the
    'PARMLIB' attribute.

10) IPL the new rescue volume, and see what happens.  Hopefully
    you'll be close to having a working system.  If it works the
    first time--you rock!

