./ ADD NAME=$$$$$DOC 0100-02365-02365-0941-00181-00181-00000-JMILLER
1 -----------------------------------------------------------------
             OS/390 Rescue System Generation Macros
             Version 1.1
             09/25/97
  -----------------------------------------------------------------


  John Miller
  California State University, Office of the Chancellor
  jcmiller@calstate.edu

  PLEASE: Send me email on the inevitable bugs that you may find.




1 -----------------------------------------------------------------
                     I N T R O D U C T I O N
  -----------------------------------------------------------------
  This set of assembler macros is used to generate the JCL needed to
  create a one volume self contained IPL'able OS/390 system.  Such a
  system is invaluable for recovering from situations where the
  production system cannot IPL.

  Please note:  This documentation assumes that you have a decent
  knowlege of MVS or OS/390; not a real hot-shot, but that you
  basically know your way around.  This facility is NOT a "Push
  the button and out comes an IPL'able pack," but require that you check
  and customize some things, and maybe take a few tries getting the
  final product to IPL correctly.  It does however eliminate the vast
  majority out of the guess-work and trial and error of building a one
  pack system from scratch.

  Documentation:

  This member contains much of what you need to know about creating
  a one pack OS/390 system.  Be sure to read the macro source for more
  information on use of the various macros.

  Here's how to use this facility:

  1 - Check and/or Modify the XX prefixed members within the RESCUE PDS.
      These are PARMLIB members that will be copied over to the rescue
      system's SYS1.PARMLIB, VTAM parameters, and other stuff.
      (See summary of members below)

  2 - Build and submit the stage 1 JCL.  See sample member "STAGE1."
    - @JOBCARD macro coded;
    - @DATASET macros coded as required;
    - @COPY macros coded as required;
    - @TSTVOL macro coded last.
      (See @TSTVOL member for documentation on parms).

  3 - Submit the JCL created by step 1.  Release each job in order,
      and when the jobs have all finished with all steps return code 0,
      you should have an IPL'able system.  (Or close to it).

  4 - IPL and test the rescue system.  Vary all disk volumes offline
      except for RESCUE just to be extra sure that you aren't
      inadvertently pointing to some production piece of the OS on some
      other volume.


1 -----------------------------------------------------------------
           S U M M A R Y    O F   M E M B E R S
  -----------------------------------------------------------------
  COMMAND  - Assembler source to the COMMAND command, which is
  optionally used for issuing VARY commands, etc.  Uses RACF RACHECK
  validation to prevent unauthorized issuance of MVS commands.
  -----------------------------------------------------------------
  STAGE1   - Sample stage 1 JCL and macros.   good starting point.
  -----------------------------------------------------------------
  STAGE2   - Example stage 2 output.  DON'T run this sample member;
  you will want to generate your own, with your own modified Stage 1.
  -----------------------------------------------------------------
  WAIT     - Assembler source to the WAIT program, which is used
  (optionally) in the stage 2 JCL to time some of the activities.
  -----------------------------------------------------------------
  XATCCON  - VTAM Major nodes to be started automatically;
  -----------------------------------------------------------------
  XATCSTR  - VTAM startup parameters;
  -----------------------------------------------------------------
  XCOMMND  - Commands issued at IPL;
  -----------------------------------------------------------------
  XXIEASYS - Main parmlib member - shouldn't need much if any chg.
  -----------------------------------------------------------------
  XXIEFSSN - Subsystems.
  -----------------------------------------------------------------
  XXIKJTSO - TSO Auth commands.
  -----------------------------------------------------------------
  XXJESPRM - JES2 parms.  You'll probably be best off replacing
  this with a copy of your own JES2 parms, and changing the
  CKPTDEF and SPOOLDEF statements to point to the RESCUE volume.
  BE SURE YOU DO THIS!  Otherwise, when you IPL your rescue sys.,
  and cold start JES2, you will wipe out your production JES spool.
  This would be bad.  JES2 does tell you what volume is going to be
  cold started, and gives you a chance to back out, so pay attention
  when you do a cold start, and be sure JES2 is telling you that
  RESCUE is the volume being cold started.
  -----------------------------------------------------------------
  XXLOAD   - Specifies the master catalog name, IODF file suffix,
  nucleus suffix, and some other stuff.  See "OS/390 Initialization
  and Tuning" for more information.
                 +--------SYS1.IODFxx suffix.
                 V
        IODF     02 SYS1              01

        NUCLEUS  1  <-----Nucleus suffix
        SYSCAT   RESCUE113CCATALOG.RESCUE  <----Master catlg name

  Be sure that you have a @DATASET macro specified for the IODF
  file that you are using: SYS1.IODF02 would be the file for the
  above LOADxx member.
  -----------------------------------------------------------------
  XXSMFPRM - SMF parms.  Should be OK, use your own if you wish.
  -----------------------------------------------------------------
  XXVATLST - Specified RESCUE as STRG, which will allow temp.
  datasets such as ISPF temp files, etc. to be allocated.
  -----------------------------------------------------------------

1 -----------------------------------------------------------------
           S U M M A R Y    O F   M A C R O S
  -----------------------------------------------------------------
  The following macros are used in building a rescue system:

  - @JOBCARD - This macro reads in JCL job card statements that will be
    used as a model in generating each of the system generation jobs.
    The example JCL member "STAGE1" illustrates how to use this macro.

  - @DATASET - This macro is used to define user or other data sets that
    need to be recreated on the rescue system volume.  This macro is
    called within the stage 1 input (typically for locally defined
    datasets), and also called as an inner macro from within the @TSTVOL
    macro (for "vanilla" system datasets).

    The @DATASET macro accepts the following parameters:
    - Units (CYL, TRK or block value)
    - Primary allocation units.
    - Secondary allocation units.
    - Directory blocks (Must be 0 for non-pds)
    - Method to use in copying the dataset:
         C - IEBCOPY
         G - IEBGENER
         D - DFDSS
         N - Don't copy, allocate only.
    - Data set name
    - Optional space subparameters such as CONTIG, RLSE, etc.
    - Optional input volume for DFDSS INDYNAM parameter.
    - Optional usage parameters.  This parameter is used to specify
      additional processing for the dataset as follows:
         LNK     - Add to LNKLST00 parmlib member.
         LPA     - Add to LPALST00 parmlib member.
         APF     - Add to IEAAPF00 parmlib member.
         JES2    - JES2 PROCLIB to be added to JES2 startup PROC.
         VTAMLST - Add to VTAM startup PROC VTAMLST concatenation.
         VTAMLIB - Add to VTAM startup PROC VTAMLIB concatenation.
         ISPPLIB - Add to ISPPLIB concatenation in TSO PROC.
         ISPMLIB - Add to ISPMLIB concatenation in TSO PROC.
         ISPSLIB - Add to ISPSLIB concatenation in TSO PROC.
         ISPTLIB - Add to ISPTLIB concatenation in TSO PROC.
         SYSPROC - Add to SYSPROC concatenation in TSO PROC.

    The following macros would result in JCL being generated to perform
    an IEBCOPY of dataset 'SYS5.LINKLIB', and have the library placed
    in the APF list and Link list, and the RLSE parm coded in JCL:

         @DATASET CYL,0095,0035,150,C,SYS5.LINKLIB,RLSE,,(LNK,APF)
                        or
         @DATASET 23400,0190,0070,150,C,SYS5.LINKLIB,RLSE,,(APF,LNK)

  - @COPY - This macro specifies individual pds members that are to be
    copied in order to set up the ipl'able system.  See the verbiage
    within the macro itself in member @COPY for more detailed usage
    information.

  - @TSTVOL  - The main deal.  This macro performs the actual JCL
    generation process.  See the documentation within the macro for a
    description of the parameters that can be specified.  NOTE: The
    @JOBCARD macro as well as all @COPY and @DATASET macros must come
    BEFORE the @TSTVOL macro.

./ ADD NAME=$$$$BUGS 0100-02365-02365-0941-00006-00006-00000-JMILLER
Known bugs/irritants/shortcomings/desirable features:

1 - SMS subsystem is not set up on target volume;

2 - Open MVS is not supported.  I just haven't gotten around to
    it yet.  I plan to have both OMVS and SMS support soon.
./ ADD NAME=$$README 0100-02365-02365-0941-00028-00028-00000-JMILLER
OS/390 Rescue System - How to transfer to MVS host:
---------------------------------------------------

- Create a PDS on the MVS system.  CYL(1,1,15) should be big enough.
  RECFM=FB,LRECL=80,BLKSIZE=6160 are suitable DCB parameters.

- Download the RESCUE.EXE self-extracting file to a PC.  Place
  RESCUE.EXE in a directory by itself, and run it.  This will
  result in all required members being extracted. (These won't be
  readable on a PC  See note below)

- FTP all the extracted files from the PC to the MVS PDS
  allocated in the first step.  Use the FTP subcommand: "BINARY"
  or equivalent to specify a binary transfer.  This is a must.
  (These FTP'd files become members of the target PDS.)

- Read the $$$$$DOC member in the PDS for further instructions.


NOTE: The files that are in this self-extracting zip file are in
EBCDIC format, so they will look like garbage on the PC, even
after being extracted.  They will however be normal, readable
EBCDIC PDS members after they are extracted and transferred to an
MVS host using Binary mode.


John C. Miller
jmit@mindspring.com
./ ADD NAME=@@@@FND  0100-02365-02365-0941-00032-00032-00000-JMILLER
          MACRO
          @@@@FND
.*====================================================================*
.*    @@USE Inner Macro.                                              *
.*--------------------------------------------------------------------*
.*    09/07/97 John Miller                                            *
.*--------------------------------------------------------------------*
.*    Find a string in another string.                                *
.*--------------------------------------------------------------------*
.*    Change Log:                                                     *
.*       09/07/97 JCM Initial version.                                *
.*--------------------------------------------------------------------*
         GBLB &TMPFND
         LCLC &NEEDLE,&HAYSTAC
         LCLA &X,&NLEN,&HLEN
&NEEDLE  SETC '&SYSLIST(1)'
&HAYSTAC SETC '&SYSLIST(2)'
&HLEN    SETA K'&HAYSTAC
&NLEN    SETA K'&NEEDLE
&X       SETA 0
.*
.FINDTOP ANOP
&X       SETA (&X+1)
         AIF  ((&X+&NLEN-1) GT &HLEN).NOTFOUN
         AIF  ('&HAYSTAC'(&X,&NLEN) EQ '&NEEDLE').FOUND
         AGO  .FINDTOP
.FOUND   ANOP
&TMPFND  SETB 1
         MEXIT
.NOTFOUN ANOP
&TMPFND  SETB 0
         MEND
./ ADD NAME=@@FINDDS 0100-02365-02365-0941-00033-00033-00000-JMILLER
          MACRO
          @@FINDDS
.*====================================================================*
.*    @@FINDDS Inner Macro.                                           *
.*--------------------------------------------------------------------*
.*    09/07/97 John Miller                                            *
.*--------------------------------------------------------------------*
.*    Build the TMPDS(x) array with datasets that have a USE value    *
.*    that includes the string specified by TYPE (parm one of this    *
.*    macro).                                                         *
.*--------------------------------------------------------------------*
.*    Change Log:                                                     *
.*       09/07/97 JCM Initial version.                                *
.*--------------------------------------------------------------------*
         COPY @@GLOBAL
         LCLA &X1,&X2
         LCLC &TYPE
&TYPE    SETC '&SYSLIST(1)'
&TMPCTR  SETA 0
&X1      SETA 0
&X2      SETA 0
.*
.TOP     ANOP
&X1      SETA    (&X1+1)
         AIF     (&X1 GT &CTR).DONE
         @@@@FND &TYPE,&USE(&X1)
         AIF     (NOT &TMPFND).TOP
&TMPCTR  SETA    (&TMPCTR+1)
&TMPDS(&TMPCTR)  SETC '&DSN(&X1)'
 MNOTE 'DSN: &DSN(&X1) &TMPDS(&TMPCTR)'
         AGO     .TOP
.DONE    ANOP
         MEND
./ ADD NAME=@@GLOBAL 0100-02365-02365-0941-00034-00034-00000-JMILLER
.*-----------------------------------------------------------------*
.*    GLOBAL VARIABLES                                             *
.*-----------------------------------------------------------------*
         GBLA   &CTR,&CTRB
         GBLC   &DS2(750)
         GBLC   &JCRD(11)
         GBLC   &SRCL(200),&TGTL(200)
         GBLC   &MEMB(200),&NMEM(200)
         GBLC   &BLANK
&BLANK   SETC   '                                                    '
.*
.* Data stored by @DATASET macro invocations
.*
         GBLC   &SPA(750)
         GBLC   &PRI(750)
         GBLC   &SEC(750)
         GBLC   &DIR(750)
         GBLC   &CPY(750)
         GBLC   &DSN(750)
         GBLC   &SPR(750)
         GBLC   &VOL(750)
         GBLC   &USE(750)
.*
         GBLA   &TMPCTR
         GBLB   &TMPFND
         GBLC   &TMPDS(750)
.*
         GBLB   &LNK(750)
         GBLB   &LPA(750)
         GBLB   &APF(750)
         GBLB   &JES2(750)
         GBLB   &VLIB(750)
         GBLB   &VLST(750)
         GBLB   &BLNK,&BLPA,&BAPF,&BJES2,&BVLIB,&BVLST
./ ADD NAME=@@PARMLB 0100-02365-02365-0941-00160-00160-00000-JMILLER
          MACRO
          @@PARMLB &JOBCHAR=,&DEVT=,&VOLUME=
.*====================================================================*
.*    @@PARMLB Inner macro.                                           *
.*--------------------------------------------------------------------*
.*    09/07/97 John Miller                                            *
.*--------------------------------------------------------------------*
.*    Build JCL to create PARMLIB members:                            *
.*    - LNKLST                                                        *
.*    - LPALST                                                        *
.*    - IEAAPF                                                        *
.*--------------------------------------------------------------------*
.*    Change Log:                                                     *
.*       09/07/97 JCM Initial version.                                *
.*--------------------------------------------------------------------*
         COPY @@GLOBAL
         LCLB &DOJF
&DOJF    SETB (&BLNK OR &BLPA OR &BAPF OR &BJES2 OR &BVLIB OR &BVLST)
         AIF (NOT &DOJF).NOJOB
         @JOBCARD SUFFIX=&JOBCHAR
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - &JOBCHAR   &SYSTIME &SYSDATE        '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
  MNOTE 'BLNK IS: &BLNK'
       AIF (NOT &BLNK).FNOLNK1
 PUNCH '//* LNKLST   ¦  Dynamically build LNKLSTxx PARMLIB member.   '
.FNOLNK1 ANOP
       AIF (NOT &BLPA).FNOLPA1
 PUNCH '//* LPALST   ¦  Dynamically build LPALSTxx PARMLIB member.   '
.FNOLPA1 ANOP
       AIF (NOT &BAPF).FNOAPF1
 PUNCH '//* IEAAPF   ¦  Dynamically build IEAAPFxx PARMLIB member.   '
.FNOAPF1 ANOP
 PUNCH '//*---------------------------------------------------------*'
.*--------------------------------------------------------------------*
.*    Punch JCL steps.                                                *
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*    LNKLSTxx                                                        *
.*--------------------------------------------------------------------*
         LCLA &X1,&X2
         LCLC &TMPDSN(750),&TMP1
         AIF (NOT &BLNK).FNOLNK2
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* Build LNKLSTxx member.                                  *'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LNKLST  EXEC PGM=IEBGENER,REGION=2M                        '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                      '
 PUNCH '//SYSIN     DD DUMMY                                         '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=SYS1.PARMLIB(LNKLST00),         '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME                      '
 PUNCH '//SYSUT1    DD *                                            '
.*---
&X1      SETA 0
&X2      SETA 0
.LNKTOP1 ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &CTR).LNKDON1
         AIF  (NOT &LNK(&X1)).LNKTOP1
&X2      SETA (&X2+1)
&TMPDSN(&X2) SETC '&DSN(&X1)'                                        '
         AGO .LNKTOP1
.LNKDON1 ANOP
.*---
&X1      SETA 0
.LNKTOP2 ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 EQ &X2).LNKDON2
 PUNCH '&TMPDSN(&X1),'
         AGO .LNKTOP2
.LNKDON2 ANOP
&TMP1    SETC '&TMPDSN(&X1)&BLANK'(1,45)
 PUNCH '&TMP1  '
 PUNCH '//*         '
.*-*-*-*-*-*-*
.*-*-*-*-*-*-*
.FNOLNK2 ANOP
       AIF (NOT &BLPA).FNOLPA2
.*--------------------------------------------------------------------*
.*    LPALSTxx                                                        *
.*--------------------------------------------------------------------*
         AIF (NOT &BLPA).FNOLPA2
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* Build LPALSTxx member.                                  *'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LPALST  EXEC PGM=IEBGENER,REGION=2M                        '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                      '
 PUNCH '//SYSIN     DD DUMMY                                         '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=SYS1.PARMLIB(LPALST00),         '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME                      '
 PUNCH '//SYSUT1    DD *                                            '
.*---
&X1      SETA 0
&X2      SETA 0
.LPATOP1 ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &CTR).LPADON1
         AIF  (NOT &LPA(&X1)).LPATOP1
&X2      SETA (&X2+1)
&TMPDSN(&X2) SETC '&DSN(&X1)'                                        '
         AGO .LPATOP1
.LPADON1 ANOP
.*---
&X1      SETA 0
.LPATOP2 ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 EQ &X2).LPADON2
&TMP1    SETC '&TMPDSN(&X1),&BLANK'(1,45)
 PUNCH '&TMP1  '
         AGO .LPATOP2
.LPADON2 ANOP
 PUNCH '&TMPDSN(&X1)  '
 PUNCH '//*         '
.*-*-*-*-*-*-*
.*-*-*-*-*-*-*
.FNOLPA2 ANOP
       AIF (NOT &BAPF).FNOAPF2
.*--------------------------------------------------------------------*
.*    IEAAPFxx                                                        *
.*--------------------------------------------------------------------*
         AIF (NOT &BLPA).FNOLPA2
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* Build IEAAPFxx member.                                  *'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LPALST  EXEC PGM=IEBGENER,REGION=2M                        '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                      '
 PUNCH '//SYSIN     DD DUMMY                                         '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=SYS1.PARMLIB(IEAAPF00),         '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME                      '
 PUNCH '//SYSUT1    DD *                                            '
.*---
&X1      SETA 0
&X2      SETA 0
.APFTOP1 ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &CTR).APFDON1
         AIF  (NOT &APF(&X1)).APFTOP1
&X2      SETA (&X2+1)
&TMPDSN(&X2) SETC '&DSN(&X1)&BLANK'
         AGO .APFTOP1
.APFDON1 ANOP
.*---
&X1      SETA 0
.APFTOP2 ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 EQ &X2).APFDON2
&TMP1    SETC '&TMPDSN(&X1)&BLANK'(1,35).'&VOLUME,'
 PUNCH '&TMP1  '
         AGO .APFTOP2
.APFDON2 ANOP
&TMP1    SETC '&TMPDSN(&X1)&BLANK'(1,35).'&VOLUME'
 PUNCH '&TMP1  '
 PUNCH '//*    '
.*-*-*-*-*-*-*
.*-*-*-*-*-*-*
.FNOAPF2 ANOP
.NOJOB   ANOP
         MEND
./ ADD NAME=@@PROCLB 0100-02365-02365-0941-00196-00196-00000-JMILLER
          MACRO
          @@PROCLB &DEVT=,&VOLUME=,&TSOPROC=
.*====================================================================*
.*    @@PARMLB Inner macro.                                           *
.*--------------------------------------------------------------------*
.*    09/07/97 John Miller                                            *
.*--------------------------------------------------------------------*
.*    Build JCL to create PROCLIB members:                            *
.*    - JES2                                                          *
.*    - VTAM                                                          *
.*    - TSO PROC                                                      *
.*    - Other PROCs.                                                  *
.*--------------------------------------------------------------------*
.*    Change Log:                                                     *
.*       09/07/97 JCM Initial version.                                *
.*--------------------------------------------------------------------*
         COPY @@GLOBAL
         AIF (NOT &BJES2).NOJES2
         LCLC &TMPDSN(750)
.*--------------------------------------------------------------------*
.*    Build JES2 startup PROC.                                        *
.*--------------------------------------------------------------------*
         AIF (NOT &BJES2).FNOJES2
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* Build JES2 startup PROC.                                *'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//JESPROC EXEC PGM=IEBGENER,REGION=2M                        '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                      '
 PUNCH '//SYSIN     DD DUMMY                                         '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=SYS1.PROCLIB(JES2),             '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME                      '
 PUNCH '//SYSUT1    DD DATA,DLM=''@#''                              '
 PUNCH '//JES2      PROC M=00                                       '
 PUNCH '//*======================================================*  '
 PUNCH '//* JES2 STARTUP PROC - RESCUE SYSTEM                    *  '
 PUNCH '//*======================================================*  '
 PUNCH '//IEFPROC  EXEC PGM=HASJES20,DPRTY=(15,15),TIME=1440        '
 PUNCH '//HASPPARM DD  DSN=SYS1.PARMLIB(JESPRM&&M),DISP=SHR         '
 PUNCH '//HASPLIST DD  DDNAME=IEFRDER                               '
.*---
&X1      SETA 1
         @@FINDDS JES2
         MNOTE 'JES2 TMPCTR: &TMPCTR '
         AIF  (&TMPCTR LT 1).JSDONE1
 PUNCH '//PROC00   DD  DISP=SHR,DSN=&TMPDS(1)                    '
.JSTOP1  ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).JSDONE1
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .JSTOP1
.JSDONE1 ANOP
 PUNCH '@#                                                          '
.FNOJES2 ANOP
.*-*-*-*-*-*-*
.*-*-*-*-*-*-*
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*    VTAM PROC                                                       *
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* Build VTAM startup PROC.                                *'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LPALST  EXEC PGM=IEBGENER,REGION=2M                        '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                      '
 PUNCH '//SYSIN     DD DUMMY                                        '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=SYS1.PROCLIB(VTAM),             '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME                      '
 PUNCH '//SYSUT1    DD DATA,DLM=''@#''                              '
 PUNCH '//VTAM     PROC                                             '
 PUNCH '//*======================================================*  '
 PUNCH '//* VTAM STARTUP PROC - RESCUE SYSTEM                    *  '
 PUNCH '//*======================================================*  '
 PUNCH '//VTAM     EXEC PGM=ISTINM01,REGION=6500K,                  '
 PUNCH '//         DPRTY=(15,15),TIME=1440,PERFORM=8                '
 PUNCH '//SISTCLIB DD DISP=SHR,DSN=SYS1.SISTCLIB                    '
 PUNCH '//SYSABEND DD SYSOUT=*,HOLD=YES                             '
.*---
.*---
&X1      SETA 1
         @@FINDDS VTAMLST
         AIF  (&TMPCTR LT 1).VLDONE1
 PUNCH '//VTAMLST  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.VLTOP1  ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).VLDONE1
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .VLTOP1
.VLDONE1 ANOP
&X1      SETA 1
         @@FINDDS VTAMLIB
         AIF  (&TMPCTR LT 1).VIDONE1
 PUNCH '//VTAMLIB  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.VITOP1  ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).VIDONE1
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .VITOP1
.VIDONE1 ANOP
 PUNCH '@#                                                        '
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*    Build TSO LOGON PROC                                            *
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* Build a TSO LOGON PROC.                                 *'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//TSOPROC EXEC PGM=IEBGENER,REGION=2M                        '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                      '
 PUNCH '//SYSIN     DD DUMMY                                         '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=SYS1.PROCLIB(&TSOPROC),         '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME                      '
 PUNCH '//SYSUT1    DD DATA,DLM=''@#''                              '
 PUNCH '//&TSOPROC  PROC                                            '
 PUNCH '//*======================================================*  '
 PUNCH '//* TSO LOGON PROC - Rescue System.                      *  '
 PUNCH '//* &SYSTIME &SYSDATE                                    *  '
 PUNCH '//*======================================================*  '
 PUNCH '//&TSOPROC EXEC PGM=IKJEFT01,DYNAMNBR=256,PARM=ISPALLOC     '
 PUNCH '//SYSPRINT DD TERM=TS,SYSOUT=*                              '
 PUNCH '//SYSTERM  DD TERM=TS,SYSOUT=*                              '
 PUNCH '//SYSIN    DD TERM=TS                                       '
 PUNCH '//SYSPROC  DD DISP=SHR,DSN=SYS3.CLIST                       '
 PUNCH '//SYSHELP  DD DISP=SHR,DSN=SYS1.HELP                        '
 PUNCH '//SYSLBC   DD DISP=SHR,DSN=SYS1.BRODCAST                    '
 PUNCH '//* Dynamically build statements below                      '
.*
.****SYSPROC DATASETS*****
.*
&X1      SETA 1
         @@FINDDS SYSPROC
         AIF  (&TMPCTR LT 1).T0DONE
 PUNCH '//SYSPROC  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.T0TOP   ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).T0DONE
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .T0TOP
.T0DONE  ANOP
.*
.*
.****ISPPLIB DATASETS*****
.*
&X1      SETA 1
         @@FINDDS ISPPLIB
         AIF  (&TMPCTR LT 1).T1DONE
 PUNCH '//ISPPLIB  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.T1TOP   ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).T1DONE
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .T1TOP
.T1DONE  ANOP
.*
.****ISPMLIB DATASETS*****
.*
&X1      SETA 1
         @@FINDDS ISPMLIB
         AIF  (&TMPCTR LT 1).T2DONE
 PUNCH '//ISPMLIB  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.T2TOP   ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).T2DONE
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .T2TOP
.T2DONE  ANOP
.*
.****ISPSLIB DATASETS*****
.*
&X1      SETA 1
         @@FINDDS ISPSLIB
         AIF  (&TMPCTR LT 1).T3DONE
 PUNCH '//ISPSLIB  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.T3TOP   ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).T3DONE
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .T3TOP
.T3DONE  ANOP
.*
.****ISPTLIB DATASETS*****
.*
&X1      SETA 1
         @@FINDDS ISPTLIB
         AIF  (&TMPCTR LT 1).T4DONE
 PUNCH '//ISPTLIB  DD  DISP=SHR,DSN=&TMPDS(1)                    '
.T4TOP   ANOP
&X1      SETA (&X1+1)
         AIF  (&X1 GT &TMPCTR).T4DONE
 PUNCH '//         DD  DISP=SHR,DSN=&TMPDS(&X1)                  '
         AGO  .T4TOP
.T4DONE  ANOP
.****
 PUNCH '@#                                                          '
         MEND
./ ADD NAME=@COPY    0100-02365-02365-0941-00076-00076-00000-JMILLER
         MACRO
         @COPY &SRCLIB=,                                               X
               &TGTLIB=,                                               X
               &MEMBER=,                                               X
               &NEWMEM=
.*--------------------------------------------------------------------*
.*    @COPY    MACRO                                                  *
.*--------------------------------------------------------------------*
.*    THIS MACRO SPECIFIES INDIVIDUAL PDS MEMBERS THAT ARE TO BE      *
.*    COPIED IN ORDER TO SET UP THE IPL'ABLE SYSTEM.                  *
.*--------------------------------------------------------------------*
.*    PARAMETERS:                                                     *
.*    - SRCLIB=  < THE PDS THAT CONTAINS THE MEMBER(S) TO BE COPIED   *
.*    - TGTLIB=  < THE PDS ON THE TEST SYSTEM THAT WILL CONTAIN THE   *
.*               < MEMBER.                                            *
.*    - MEMBER=  < THE NAME OF THE MEMBER TO BE COPIED.               *
.*    - NEWMEM=  < THE NEW NAME THAT THE MEMBER WILL HAVE WHEN COPIED.*
.*--------------------------------------------------------------------*
.*    NOTES:                                                          *
.*    - THE FIRST INVOCATION OF THIS MACRO MUST SPECIFY THE SRCLIB=   *
.*      AND TGTLIB= PARAMETERS.  THIS IS SO ANY MACRO PROCESSING THE  *
.*      ARRAY OF COPY MEMBERS WILL KNOW AT A SINGLE PASS WHAT THE     *
.*      SOURCE AND TARGET LIBRARIES ARE.                              *
.*    - ONCE SRCLIB= OR TGTLIB= IS SPECIFIED, THE VALUE REMAINS UNITL *
.*      IT IS CHANGED BY A SUBSEQUENT SRCLIB= OR TGTLIB=              *
.*--------------------------------------------------------------------*
.*      09/07/97 JOHN MILLER                                          *
.*--------------------------------------------------------------------*
         GBLA &CTRB
         GBLC &SRCL(200),&TGTL(200),&MEMB(200),&NMEM(200)
         GBLC &DEFSRC,&DEFTGT
         LCLA &X,&Y
         LCLC &MEMPRM
         AIF (&CTRB GT 0).NOTFRST         FIRST TIME THROUGH, BOTH
         AIF ('&SRCLIB' EQ '').ERR001     TGTLIB AND SRCLIB MUST BE
         AIF ('&TGTLIB' EQ '').ERR001     CODED.
.NOTFRST ANOP                             *************************
&CTRB    SETA (&CTRB+1)
         AIF (&CTRB GT 200).ERR002
.***
.* COPY PASSED PARAMETERS
.***
         AIF ('&SRCLIB' EQ '').NOSRC
&DEFSRC  SETC '&SRCLIB'
&SRCL(&CTRB) SETC '&SRCLIB'
.NOSRC   ANOP
.*
         AIF ('&TGTLIB' EQ '').NOTGT
&DEFTGT  SETC '&TGTLIB'
&TGTL(&CTRB) SETC '&TGTLIB'
.NOTGT   ANOP
.*
.***
.* IF NO MEMBER SPECIFIED, DON'T CREATE A MEMBER ENTRY IN THE ARRAY
.***
         AIF ('&MEMBER' EQ '').NOMEM
&MEMB(&CTRB) SETC '&MEMBER'
         AIF ('&NEWMEM' EQ '').DONE
&NMEM(&CTRB) SETC '&NEWMEM'
.DONE    ANOP
&MEMPRM  SETC '&MEMB(&CTRB)'
         AIF ('&NMEM(&CTRB)' EQ '').NONEW
&MEMPRM  SETC '&MEMPRM,&NMEM(&CTRB)'
.NONEW   ANOP
.* MNOTE 0,'  SELECT MEMBER=((&MEMPRM,R)) '
.NOMEM   ANOP
           MEXIT
.*--------------------------------------------------------------------*
.*    ERRORS                                                          *
.*--------------------------------------------------------------------*
.ERR001  MNOTE 8,'FIRST INVOCATION OF @COPY MUST SPECIFY BOTH SRCLIB'
         MNOTE 8,'AND TGTLIB.'
         MEXIT
.ERR002  MNOTE 8,'MAXIMUM COPY DEFINITIONS EXCEEDED.'
         MEXIT
         MEND
./ ADD NAME=@DATASET 0100-02365-02365-0941-00160-00160-00000-JMILLER
         MACRO
         @DATASET
.*--------------------------------------------------------------------*
.*    @DATASET MACRO                                                  *
.*--------------------------------------------------------------------*
.* 09/02/97 John Miller                                               *
.* Rescue volume generation facility.                                 *
.*--------------------------------------------------------------------*
.* The @DATASET macro specifies a data set that is to be copied or    *
.* allocated in some manner to the target rescue system volume.       *
.*--------------------------------------------------------------------*
.*   Parameters for the @dataset macro are as follows:                *
.*   1 - CYL, TRK or BLOCK value to be used for allocation            *
.*   2 - Primary allocation quantity                                  *
.*   3 - Secondary allocation quantity                                *
.*   4 - Directory blocks (for PDS, specify 0 for sequential)         *
.*   5 - Copy Mode:                                                   *
.*       C - IEBCOPY                                                  *
.*       G - IEBGENER/ICEGENER                                        *
.*       D - DFDSS - Note: DFDSS performs the DS allocation           *
.*       N - Don't copy (Allocate only)                               *
.*   6 - Dataset name                                                 *
.*   7 - Options for space subparameter (Optional) (RLSE, CONTIG)     *
.*   8 - Input volume for DFDSS INDYNAM(volser) parameter.            *
.*   9 - Additional processing options for dataset:                   *
.*       LNK     - Add to LNKLSTxx.                                   *
.*       LPA     - Add to LPALSTxx.                                   *
.*       APF     - Add to IEAAPFxx.                                   *
.*       JES2    - JES2 PROCLIB to be added to JES2 startup PROC.     *
.*       VTAMLST - Add to VTAM startup PROC VTAMLST concatenation.    *
.*       VTAMLIB - Add to VTAM startup PROC VTAMLIB concatenation.    *
.*       ISPPLIB - Add ISPPLIB concatenation of TSO PROC.             *
.*       ISPMLIB - Add ISPMLIB concatenation of TSO PROC.             *
.*       ISPSLIB - Add ISPSLIB concatenation of TSO PROC.             *
.*       ISPTLIB - Add ISPTLIB concatenation of TSO PROC.             *
.*       SYSPROC - Add SYSPROC concatenation of TSO PROC.             *
.*--------------------------------------------------------------------*
.* CHANGE LOG:                                                        *
.*--------------------------------------------------------------------*
.* 01/24/91 John Miller - Initial version (MVS 3.1.3)                 *
.* 09/15/97 John Miller - OS/390 version.                             *
.*--------------------------------------------------------------------*
.*
.*--------------------------------------------------------------------*
.*    Copy Global variable definitions.                               *
.*--------------------------------------------------------------------*
         COPY @@GLOBAL
.*
         LCLA &X,&Y
         LCLC &COPY
&CTR     SETA (&CTR+1)
         AIF (&CTR GT 750).ERR008
         AIF ('&SYSLIST(1)' EQ '').ERR001
         AIF ('&SYSLIST(2)' EQ '').ERR002
         AIF ('&SYSLIST(3)' EQ '').ERR003
         AIF ('&SYSLIST(4)' EQ '').ERR004
         AIF ('&SYSLIST(5)' EQ '').ERR005
         AIF ('&SYSLIST(6)' EQ '').ERR006
.*
.*   @DATASET CYL,0002,0001,050,C,SYS2.LINKLIB,RLSE
.*
&SPA(&CTR) SETC '&SYSLIST(1)'
&PRI(&CTR) SETC '&SYSLIST(2)'
&SEC(&CTR) SETC '&SYSLIST(3)'
&DIR(&CTR) SETC '&SYSLIST(4)'
&CPY(&CTR) SETC '&SYSLIST(5)'
&DSN(&CTR) SETC '&SYSLIST(6)'
&SPR(&CTR) SETC '&SYSLIST(7)'
&VOL(&CTR) SETC '&SYSLIST(8)'
&USE(&CTR) SETC '&SYSLIST(9)'
.****----
.* Parse parameter #9
.****----
           LCLA &USEX,&USEY
&USEX      SETA 0
&USEY      SETA N'&SYSLIST(9)
.USETOP1   ANOP
&USEX      SETA (&USEX+1)
           AIF  (&USEX GT &USEY).USEDONE
.*
           AIF  ('&SYSLIST(9,&USEX)' NE 'LNK').USENX1
&LNK(&CTR) SETB 1
&BLNK      SETB 1
.USENX1    ANOP
.*
           AIF  ('&SYSLIST(9,&USEX)' NE 'LPA').USENX2
&LPA(&CTR) SETB 1
&BLPA      SETB 1
.USENX2    ANOP
.*
           AIF  ('&SYSLIST(9,&USEX)' NE 'APF').USENX3
&APF(&CTR) SETB 1
&BAPF      SETB 1
.USENX3    ANOP
.*
           AIF  ('&SYSLIST(9,&USEX)' NE 'JES2').USENX4
&JES2(&CTR) SETB 1
&BJES2     SETB 1
.USENX4    ANOP
.*
           AIF  ('&SYSLIST(9,&USEX)' NE 'VTAMLIB').USENX5
&VLIB(&CTR) SETB 1
&BVLIB     SETB 1
.USENX5    ANOP
.*
           AIF  ('&SYSLIST(9,&USEX)' NE 'VTAMLST').USENX6
&VLST(&CTR) SETB 1
&BVLST     SETB 1
.USENX6    ANOP
           AGO .USETOP1
.*
.USEDONE   ANOP
.****----
           AIF  ('&SPR(&CTR)' EQ '').NOSPR
&SPR(&CTR) SETC ',&SPR(&CTR)'
.NOSPR     ANOP
&X         SETA  K'&DSN(&CTR)
&Y         SETA  &X
.MTOP      ANOP
&X         SETA  &X-1
           AIF (&X LT 1).ERR007
           AIF ('&DSN(&CTR)  '(&X,1) EQ '.').SETDS2
           AGO .MTOP
.SETDS2    ANOP
&DS2(&CTR) SETC '&DSN(&CTR)'(&X+1,&Y-&X)
           MEXIT
.*--------------------------------------------------------------------*
.*    ERRORS                                                          *
.*--------------------------------------------------------------------*
.ERR001  MNOTE 8,'INVALID MACRO REQUEST.  6 PARAMETERS ARE REQUIRED,'
         MNOTE 8,'NONE WERE SUPPLIED.  REQUIRED IS:'
         MNOTE 8,'UNITS,PRIMARY,SECONDARY,DIR,Y/N,DSNAME'
         MEXIT
.ERR002  MNOTE 8,'INVALID MACRO REQUEST.  6 PARAMETERS ARE REQUIRED,'
         MNOTE 8,'1 WAS SUPPLIED.  REQUIRED IS:'
         MNOTE 8,'UNITS,PRIMARY,SECONDARY,DIR,Y/N,DSNAME'
         MEXIT
.ERR003  MNOTE 8,'INVALID MACRO REQUEST.  6 PARAMETERS ARE REQUIRED,'
         MNOTE 8,'2 WERE SUPPLIED.  REQUIRED IS:'
         MNOTE 8,'UNITS,PRIMARY,SECONDARY,DIR,Y/N,DSNAME'
         MEXIT
.ERR004  MNOTE 8,'INVALID MACRO REQUEST.  6 PARAMETERS ARE REQUIRED,'
         MNOTE 8,'3 WERE SUPPLIED.  REQUIRED IS:'
         MNOTE 8,'UNITS,PRIMARY,SECONDARY,DIR,Y/N,DSNAME'
         MEXIT
.ERR005  MNOTE 8,'INVALID MACRO REQUEST.  6 PARAMETERS ARE REQUIRED,'
         MNOTE 8,'4 WERE SUPPLIED.  REQUIRED IS:'
         MNOTE 8,'UNITS,PRIMARY,SECONDARY,DIR,Y/N,DSNAME'
         MEXIT
.ERR006  MNOTE 8,'INVALID MACRO REQUEST.  6 PARAMETERS ARE REQUIRED,'
         MNOTE 8,'5 WERE SUPPLIED.  REQUIRED IS:'
         MNOTE 8,'UNITS,PRIMARY,SECONDARY,DIR,Y/N,DSNAME'
         MEXIT
.ERR007  MNOTE 8,'SINGLE LEVEL DATA SETS ARE NOT SUPPORTED.'
         MNOTE 8,'SPECIFIED DATASET &DSN(&CTR) HAS ONLY 1 QUALIFIER.'
         MEXIT
.ERR008  MNOTE 8,'MAXIMUM DATASET DEFINITIONS EXCEEDED -'
         MNOTE 8,'INCREASE VALUE OF GLOBAL PARAMETER INDEXES.'
         MEXIT
         MEND
./ ADD NAME=@JOBCARD 0100-02365-02365-0941-00081-00081-00000-JMILLER
         MACRO
         @JOBCARD &SUFFIX=
.*--------------------------------------------------------------------*
.*    @JOBCARD MACRO                                                  *
.*    THIS MACRO IDS DUAL PURPOSE:                                    *
.*    1 - THIS MACRO READS THE JCL STATEMENTS FOLLOWING IT IN SOURCE  *
.*        AND STORES THEM IN CASM VARIABLES FOR USE BY @TSTVOL MACRO. *
.*    2 - PUNCHES A JOBCARD.  THIS OPTION IS SELECTED BY SPECIFYING   *
.*        A SINGLE CHARACTER FOR THE "SUFFIX=" KEYWORD.               *
.*--------------------------------------------------------------------*
.*    04/17/91 JOHN MILLER                                            *
.*--------------------------------------------------------------------*
.*
.*--------------------------------------------------------------------*
.*    Copy Global variable definitions.                               *
.*--------------------------------------------------------------------*
         COPY @@GLOBAL
.*
         LCLA &X,&Y,&Z
         LCLC &CARD,&B
         LCLC &JC1A,&JC1B
         AIF ('&SUFFIX' NE '').PUNCH
&B       SETC '&B                                        '
&B       SETC '&B                                        '
&CARD    AREAD
         AIF ('&CARD'(1,2) NE '//').ERR002
.TFIND   ANOP
&Y       SETA &Y+1
         AIF (&Y GT 10).ERR003
         AIF ('&CARD'(&Y,1) NE ' ').TFIND
&JC1A    SETC '&CARD'(1,&Y-1)
&JC1B    SETC '&CARD&B'(&Y,72-&Y-1)
         AIF (K'&JC1A LT 10).J1OK
&JC1A    SETC '&JC1A'(1,9)
.J1OK    ANOP
&JCRD(1) SETC '&JC1A'
&JCRD(2) SETC '&JC1B'
.*       MNOTE 0,'&JCRD(1).&JCRD(2)'
&X       SETA 2
.JOBTOP  ANOP
&X       SETA &X+1
         AIF (&X GT 11).ERR001
&CARD    AREAD
         AIF ('&CARD'(1,2) NE '//').DONE
         AIF ('&CARD'(1,2) EQ '/*').DONE
.*       MNOTE 0,'&CARD'
&JCRD(&X) SETC '&CARD'
         AGO .JOBTOP
.DONE    ANOP
         MEXIT
.*--------------------------------------------------------------------*
.*    THIS SECTION PUNCHES OUT THE SAVED JOBCARD WITH THE SUPPLIED    *
.*    JOB NAME SUFFIX                                                 *
.*--------------------------------------------------------------------*
.PUNCH   ANOP
         LCLC &SUF
&SUF     SETC '&SUFFIX'(1,1)
&X       SETA 2
 PUNCH '&JCRD(1).&SUF.&JCRD(2)'
.PTOP    ANOP
&X       SETA &X+1
         AIF (&X GT 11).PUNDONE
         AIF ('&JCRD(&X)' EQ '').PUNDONE
 PUNCH '&JCRD(&X)'
         AGO  .PTOP
.PUNDONE ANOP
         MEXIT
.*--------------------------------------------------------------------*
.*    ERRORS                                                          *
.*--------------------------------------------------------------------*
.ERR001  MNOTE 8,'MORE THAN 10 JOB STATEMENTS WERE SPECIFIED - '
         MNOTE 8,'RE-RUN THE ASSEMBLY WITH 10 OR FEWER JOB STATEMENTS.'
         MEXIT
.ERR002  MNOTE 8,'FIRST JOB STATEMENT DID NOT BEGIN WITH //'
         MNOTE 8,'RE-RUN THE ASSEMBLY WITH A VALID JOBCARD FOLLOWING '
         MNOTE 8,'THIS MACRO.'
         MEXIT
.ERR003  MNOTE 8,'INVALID JOBNAME - FIRST JOB STATEMENT MUST CONTAIN'
         MNOTE 8,'// IMMEDIATELY FOLLOWED BY A 1 TO 8 CHAR JOBNAME'
         MEXIT
         MEND
./ ADD NAME=@TSTVOL  0100-02365-02365-0941-01224-01224-00000-JMILLER
          MACRO
          @TSTVOL &CATALOG=CATALOG.RESCUE,                             X
               &CATFIND=Y,                                             X
               &CATPTR=N,                                              X
               &COMMAND=Y,                                             X
               &DCBREF=Y,                                              X
               &DEALLOC=DEALLOC,                                       X
               &DEVT=3380,                                             X
               &DUMP=Y,                                                X
               &JOBS=ABCDEFG,                                          X
               &LIST=Y,                                                X
               &MASTRCAT=,                                             X
               &MCATVOL=CSUCAT,                                        X
               &OWNER=SYS900,                                          X
               &PGCOMM=150,                                            X
               &PGLCL1=150,                                            X
               &PGPLPA=150,                                            X
               &RACF=Y,                                                X
               &RACFDS=SYS1.RACFP1,                                    X
               &RFCOPY=Y,                                              X
               &STEPCAT=,                                              X
               &SYSRES=SYSRS1,                                         X
               &SYSX=SYSX,                                             X
               &SYS1=SYS1,                                             X
               &TAPEUNT=CART,                                          X
               &TMSPRM=EXPDT=98000,                                    X
               &TSOPASS=XXXXXXXX,                                      X
               &TSOPROC=MINIMUM,                                       X
               &SECS=5,                                                X
               &UADS=Y,                                                X
               &UNITADR=000,                                           X
               &USR1=IBMUSER,                                          X
               &USR2=,                                                 X
               &USR3=,                                                 X
               &USR4=,                                                 X
               &USR5=,                                                 X
               &USYNC=Y,                                               X
               &VFY=,                                                  X
               &VOLUME=RESCUE,                                         X
               &WRKPFX=SYS9.RESCUE,                                    X
               &WRKUNIT=SYSALLDA,                                      X
               &WRKVOL=,                                               X
               &WAIT=Y
.*====================================================================*
.*    @TSTVOL MACRO for OS/390 Version 1.1                            *
.*--------------------------------------------------------------------*
.*    09/25/97 John Miller                                            *
.*--------------------------------------------------------------------*
.*    This macro is the heart of a facility that generates the JCL    *
.*    to create a one-pack IPL'able OS/390 system for emergency and   *
.*    maintenance purposes.  Each installation will most likely want  *
.*    to customize the default values, dataset specifications and     *
.*    dataset names to be compatible with their installation.         *
.*--------------------------------------------------------------------*
.*    This facility is very similar to the SYSGEN or IPOGEN processes *
.*    for those of you who have been in MVS long enough to remember   *
.*    them! It is a 2 stage process:                                  *
.*                                                                    *
.*    Stage 1:                                                        *
.*    A set of assembler macros are coded in the STAGE1 source. These *
.*    macros describe the datasets and other information needed to    *
.*    fully describe the new system being built.  The output of this  *
.*    assembler "stage 1" job is a large set of JCL called Stage 2.   *
.*                                                                    *
.*    Stage 2:                                                        *
.*    This is a large deck of JCL produced by Stage 1.  The JCL       *
.*    consists of several jobs which are run in sequence, and which   *
.*    build the IPLable system "from scratch," starting with an empty *
.*    disk volume, and ending with a fully self-contained, one volume *
.*    OS/390 system.                                                  *
.*--------------------------------------------------------------------*
.*    This macro (@TSTVOL) must be invoked last.  The @JOBCARD and    *
.*    and any required @DATASET and @COPY macros must be coded before *
.*    this one.                                                       *
.*                                                                    *
.*    See the @JOBCARD, @DATASET and @COPY macros for more info. on   *
.*    their use.                                                      *
.*--------------------------------------------------------------------*
.*    Change Log:                                                     *
.*    09/25/97 John Miller                                            *
.*    Reworked from 1992 MVS 3.1.3. version.                          *
.*--------------------------------------------------------------------*
.*    Inner macros:                                                   *
.*                  @JOBCARD                                          *
.*                  @DATASET                                          *
.*                  @COPY                                             *
.*                  @@FINDDS                                          *
.*                  @@@@FND                                           *
.*--------------------------------------------------------------------*
.*    Parameters:                                                     *
.*--------------------------------------------------------------------*
.*    CATALOG=      < Name of the target Master Cat. to be built.     *
.*    CATFIND=      < Y/N Find dsns via catalog vs. from SYSRES vol.  *
.*    CATPTR=       < Y/N IEBDG run to create catalog pointer.        *
.*                  < Specify "N" if using LOADxx parmlib member.     *
.*    COMMAND=      < Y/N Command program (SVC34) is available.       *
.*    DCBREF=       < Y/N To code DCB=(DSN) on output DD statements.  *
.*    DEALLOC=      < Name of dummy STC to deallocate DASD UCBs.      *
.*    DEVT=         < Device type of the target volume.               *
.*    DUMP=         < DUMP THE PACK WHEN DONE       (Y/N)             *
.*    JOBS=         < Which jobs to generate (Default to all jobs)    *
.*                  < JOBS=ABCDEFG results in all jobs being run.     *
.*    LIST=Y        < Y/N Set assembler PRINT option on.              *
.*    MASTRCAT=     < Driver system master catalog name.              *
.*    MCATVOL=      < Volume containing driver system master cat.     *
.*    OWNER=        < Goes in OWNER field of catalog entries.         *
.*    PGCOMM=       < # Cyls for COMMON page dataset.                 *
.*    PGLCL1=       < # Cyls for LOCAL page dataset.                  *
.*    PGPLPA=       < # Cyls for PLPA page dataset.                   *
.*    RACF=         < Y/N Do RACF ds initialization, etc.             *
.*    RACFDS=       < Fully qualified name for target RACF dataset.   *
.*                  < NOTE: If RFCOPY=Y, then RACFDS= must specify    *
.*                  < the name of the production RACF dataset to be   *
.*                  < copied.                                         *
.*    RFCOPY=       < Y/N Copy productn RACF dataset. See above note. *
.*    SECS=         < Seconds to wait (Parm to the WAIT program).     *
.*    STEPCAT=      < Catalog used to find dsns to be copied (opt.)   *
.*    SYSRES=       < Driver system SYSRES volume.                    *
.*    SYSX=         < Temporary high level qualifier.                 *
.*    SYS1=         < Alternate "SYS1" high level qualifier.          *
.*    TAPEUNT=      < Tape unit generic or esoteric                   *
.*    TMSPRM=       < Tms parm to be added to tape DD for vol. backup *
.*    TSOPASS=      < TSO UADS password                               *
.*    TSOPROC=      < TSO PROC to be built and defined to UADS        *
.*    UADS=         < Perform UADS processing (Y/N)                   *
.*    UNITADR=000,  < Unit address of the rescue target volume        *
.*    USR1=         < TSO users to be supported.  An ISPF profile     *
.*    USR2=         < data set is created for each user specified.    *
.*    USR3=         < In addition, if "UADS=Y" is coded, each         *
.*    USR4=         < user is defined in UADS with the PROC and       *
.*    USR5=         < password specified in TSOPROC= and TSOPASS=     *
.*                  < respectively.  This is generally required if    *
.*                  < RACF=NO is coded, as TSO LOGON is then UADS     *
.*                  < only.                                           *
.*    USYNC=        < Perform UADS to BRODCAST SYNC                   *
.*    VFY=          < Old VOLSER to be verified before clipping       *
.*    VOLUME=       < Volid to be given to the target rescue system.  *
.*    WAIT=         < Y/N Wait program is available.                  *
.*====================================================================*
         PUSH   PRINT
         PRINT  ON
         AIF    ('&LIST'     EQ  'Y').LISTYES
         PRINT  OFF
.LISTYES ANOP
.*--------------------------------------------------------------------*
.*    Copy Global variable definitions.                               *
.*--------------------------------------------------------------------*
         COPY @@GLOBAL
.*
.*--------------------------------------------------------------------*
.*    LOCAL VARIABLES                                                 *
.*--------------------------------------------------------------------*
         LCLA &W,&X,&Y,&Z
         LCLC &DDNAME,&DDN,&XCTR
.*--------------------------------------------------------------------*
.*    CHECK TO BE SURE THE @JOBCARD MACRO HAS BEEN INVOKED            *
.*--------------------------------------------------------------------*
         AIF ('&JCRD(1)' EQ '').ERR001
.*--------------------------------------------------------------------*
.*    Parse the JOBS= parameter and set flags for which jobs to build.*
.*--------------------------------------------------------------------*
         LCLA &Q1,&Q2
         LCLC &C1
         LCLB &DOJOBA,&DOJOBB,&DOJOBC,&DOJOBD,&DOJOBE,&DOJOBF,&DOJOBG
&DOJOBA  SETB 0
&DOJOBB  SETB 0
&DOJOBC  SETB 0
&DOJOBD  SETB 0
&DOJOBE  SETB 0
&DOJOBF  SETB 0
&DOJOBG  SETB 0
&Q1      SETA 0
.TOPJOB1 ANOP
&Q1      SETA (&Q1+1)
         AIF (&Q1 GT K'&JOBS).DONJOB1
         AIF ('&JOBS'(&Q1,1) NE 'A').NOJA1
&DOJOBA  SETB 1
.NOJA1   ANOP
         AIF ('&JOBS'(&Q1,1) NE 'B').NOJB1
&DOJOBB  SETB 1
.NOJB1   ANOP
         AIF ('&JOBS'(&Q1,1) NE 'C').NOJC1
&DOJOBC  SETB 1
.NOJC1   ANOP
         AIF ('&JOBS'(&Q1,1) NE 'D').NOJD1
&DOJOBD  SETB 1
.NOJD1   ANOP
         AIF ('&JOBS'(&Q1,1) NE 'E').NOJE1
&DOJOBE  SETB 1
.NOJE1   ANOP
         AIF ('&JOBS'(&Q1,1) NE 'F').NOJF1
&DOJOBF  SETB 1
.NOJF1   ANOP
         AIF ('&JOBS'(&Q1,1) NE 'G').NOJG1
&DOJOBG  SETB 1
.NOJG1   ANOP
         AGO .TOPJOB1
.DONJOB1 ANOP
         AIF ('&JCRD(1)' EQ '').ERR001
.*====================================================================*
.*--------------------------------------------------------------------*
.*    DEFINE NONVSAM SYSTEM DATASETS TO BE COPIED                     *
.*--------------------------------------------------------------------*
.* - SUPPORT FOR ADDITIONAL DATASETS CAN BE ACCOMPLISHED BE SIMPLY    *
.*   ADDING ADDITIONAL @DATASET MACRO ENTRIES AS NEEDED.              *
.* - TO REMOVE SUPPORT FOR A LIBRARY DELETE OR COMMENT OUT THE ENTRY. *
.*--------------------------------------------------------------------*
.* << THE VALUES SHOWN ARE IN 3380 CYLINDERS >>                       *
.*--------------------------------------------------------------------*
.*====================================================================*
.*
.*
.*--------------------------------------------------------------------*
.*       MVS DATASETS                                                 *
.*--------------------------------------------------------------------*
     @DATASET CYL,0005,000,150,C,&SYS1..CMDLIB,,,(LNK)
     @DATASET CYL,0001,000,000,G,&SYS1..DAE
     @DATASET CYL,0008,001,150,C,&SYS1..HELP
     @DATASET CYL,0002,000,150,C,&SYS1..IMAGELIB
     @DATASET CYL,0005,001,150,C,&SYS1..CSSLIB,RLSE,,(LNK)
     @DATASET CYL,0200,000,650,C,&SYS1..LINKLIB,RLSE,,(APF,LNK)
     @DATASET CYL,0010,001,025,C,&SYS1..V1R3M0.SHASLINK,,,(LNK,APF)
     @DATASET CYL,0090,000,550,C,&SYS1..LPALIB,RLSE
     @DATASET CYL,0140,005,350,C,&SYS1..MACLIB,RLSE
     @DATASET CYL,0020,001,250,C,&SYS1..MIGLIB,RLSE
     @DATASET CYL,0040,000,250,C,&SYS1..NUCLEUS
     @DATASET CYL,0002,000,050,C,&SYS1..PARMLIB
     @DATASET CYL,0002,001,150,C,&SYS1..PROCLIB,,,(JES2)
     @DATASET CYL,0050,001,250,C,&SYS1..SAMPLIB
     @DATASET CYL,0002,001,150,C,&SYS1..SVCLIB
     @DATASET CYL,0002,001,150,C,&SYS1..UADS
     @DATASET CYL,0003,000,000,N,&SYS1..BRODCAST
     @DATASET CYL,0003,000,000,N,&SYS1..HASPCKPT
     @DATASET CYL,0060,000,000,N,&SYS1..HASPACE
     @DATASET CYL,0010,000,000,N,&SYS1..CPAC.LOGREC
     @DATASET CYL,0060,000,000,N,&SYS1..DUMP00
     @DATASET CYL,0060,000,000,N,&SYS1..DUMP01
.*--------------------------------------------------------------------*
.*       RACF DATASET AND ISPF LIBRARIES                              *
.*--------------------------------------------------------------------*
     @DATASET CYL,0010,000,000,N,&RACFDS
     @DATASET CYL,0002,001,150,C,&SYS1..HRFCLST
     @DATASET CYL,0002,001,150,C,&SYS1..HRFMSG
     @DATASET CYL,0002,001,150,C,&SYS1..HRFPANL
     @DATASET CYL,0002,001,150,C,&SYS1..HRFSKEL
.*--------------------------------------------------------------------*
.*       ISMF ISPF libraries                                          *
.*--------------------------------------------------------------------*
     @DATASET CYL,0001,001,095,C,&SYS1..DGTCLIB
     @DATASET CYL,0010,001,095,C,&SYS1..DGTLLIB
     @DATASET CYL,0002,001,095,C,&SYS1..DGTMLIB
     @DATASET CYL,0033,001,350,C,&SYS1..DGTPLIB
     @DATASET CYL,0002,001,095,C,&SYS1..DGTSLIB
     @DATASET CYL,0001,001,095,C,&SYS1..DGTTLIB
.*--------------------------------------------------------------------*
.*       OS DITTO Datasets                                            *
.*--------------------------------------------------------------------*
     @DATASET CYL,0002,001,095,C,&SYS1..DUTLOAD
     @DATASET CYL,0003,001,095,C,&SYS1..DUTPLIB
.*--------------------------------------------------------------------*
.*       SDSF Datasets                                                *
.*--------------------------------------------------------------------*
     @DATASET CYL,0001,000,000,N,ISF.HASPINDX
     @DATASET CYL,0001,001,150,C,ISF.SISFLINK,,,(LNK)
     @DATASET CYL,0005,001,050,C,ISF.SISFLOAD,,,(LNK)
     @DATASET CYL,0001,001,025,C,ISF.SISFLPA,,,(LPA)
     @DATASET CYL,0001,001,150,C,ISF.SISFMLIB,,,(ISPMLIB)
     @DATASET CYL,0002,001,150,C,ISF.SISFPLIB,,,(ISPPLIB)
     @DATASET CYL,0001,001,150,C,ISF.SISFTLIB,,,(ISPTLIB)
     @DATASET CYL,0001,001,150,C,ISF.SISFSLIB,,,(ISPSLIB)
     @DATASET CYL,0015,001,150,C,ISF.SISFSRC
.*--------------------------------------------------------------------*
.*       COPY ISPF DATASETS                                           *
.*--------------------------------------------------------------------*
     @DATASET CYL,0035,0001,075,C,ISP.SISPLPA,,,(LPA)
     @DATASET CYL,0008,0001,075,C,ISP.SISPLOAD,,,(LNK)
     @DATASET CYL,0003,0001,150,C,ISP.SISPMENU,,,(ISPMLIB)
     @DATASET CYL,0025,0001,200,C,ISP.SISPPENU,,,(ISPPLIB)
     @DATASET CYL,0006,0001,125,C,ISP.SISPSENU,,,(ISPSLIB)
     @DATASET CYL,0002,0001,125,C,ISP.SISPSLIB,,,(ISPSLIB)
     @DATASET CYL,0001,0001,125,C,ISP.SISPTENU,,,(ISPTLIB)
.*--------------------------------------------------------------------*
.*       COPY PDF DATASETS (OBSOLETE FOR ISPF V4.)                    *
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*       VTAM / NCP DATASETS                                          *
.*--------------------------------------------------------------------*
     @DATASET CYL,0001,0001,125,C,CNM.VTAMLST,,,(VTAMLST)
     @DATASET CYL,0001,0001,125,C,CNM.VTAMLIB,,,(VTAMLIB,APF)
     @DATASET CYL,0005,0001,125,C,&SYS1..VTAMLST,,,(VTAMLST)
     @DATASET CYL,0005,0001,125,C,&SYS1..VTAMLIB,,,(VTAMLIB,APF)
     @DATASET CYL,0050,0001,125,C,&SYS1..SISTCLIB,,,(APF)
     @DATASET CYL,0007,0001,125,C,NCP5.LOADLIB,,,(APF)
.**  @DATASET CYL,0005,0000,125,N,NCP5.NCPDUMP
.*--------------------------------------------------------------------*
.*       ISPF PROFILE DATASETS                                        *
.*--------------------------------------------------------------------*
         AIF ('&USR1' EQ '').NOISPF1
     @DATASET CYL,0001,0000,050,N,&USR1..ISPF.ISPPROF
.NOISPF1 ANOP
         AIF ('&USR2' EQ '').NOISPF2
     @DATASET CYL,0001,0000,050,N,&USR2..ISPF.ISPPROF
.NOISPF2 ANOP
         AIF ('&USR3' EQ '').NOISPF3
     @DATASET CYL,0001,0000,050,N,&USR3..ISPF.ISPPROF
.NOISPF3 ANOP
         AIF ('&USR4' EQ '').NOISPF4
     @DATASET CYL,0001,0000,050,N,&USR4..ISPF.ISPPROF
.NOISPF4 ANOP
         AIF ('&USR5' EQ '').NOISPF5
     @DATASET CYL,0001,0000,050,N,&USR5..ISPF.ISPPROF
.NOISPF5 ANOP
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*--------------- END OF NONVSAM DATASET DEFINITIONS -----------------*
.*--------------------------------------------------------------------*
.*--------------------------------------------------------------------*
.*
.*
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "A"                                          *
.*--------------------------------------------------------------------*
         AIF (NOT &DOJOBA).NOJOBA
         @JOBCARD SUFFIX=A
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - A   &SYSTIME &SYSDATE                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* EXPORTD  ¦  DISCONNECTS TEST SYSTEM MASTER CATALOG       '
         AIF ('&COMMAND' NE 'Y').NOCMD1
 PUNCH '//* OFFLINE  ¦  VARIES DEVICE &UNITADR OFFLINE               '
.NOCMD1  ANOP
 PUNCH '//* DSFINIT  ¦  INITIALIZES DASD VOLUME USING ICKDSF         '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*    N O T E : : :                                         '
 PUNCH '//*    BE SURE THAT DEVICE &UNITADR IS OFFLINE BEFORE THIS   '
 PUNCH '//*    JOB IS RELEASED.                                      '
 PUNCH '//*----------------------------------------------------------'
 PUNCH '//EXPORTD  EXEC  PGM=IDCAMS,REGION=1M                        '
 PUNCH '//SYSPRINT DD SYSOUT=*                                       '
 PUNCH '//SYSIN    DD *                                              '
 PUNCH '   EXPORT &CATALOG -                                         '
 PUNCH '          DISCONNECT                                         '
 PUNCH '   SET MAXCC=0                                               '
 PUNCH '/*                                                           '
         AIF ('&COMMAND' NE 'Y').NOCMD2
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* OFFLINE  ¦  VARY DEVICE &UNITADR OFFLINE                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//OFFLINE  EXEC PGM=COMMAND                                  '
 PUNCH '//SYSIN    DD *                                              '
 PUNCH 'V &UNITADR,OFFLINE                                           '
 PUNCH '/*                                                           '
         AIF ('&WAIT' NE 'Y').NOWAIT1
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* WAIT     ¦  WAIT 5 SECONDS FOR VARY TO COMPLETE          '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//WAIT     EXEC PGM=WAIT,PARM=&SECS                          '
 PUNCH '/*                                                           '
.NOWAIT1 ANOP
         AIF ('&COMMAND' NE 'Y').NOCMD5
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* &DEALLOC ¦  START DUMMY &DEALLOC TASK                    '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//&DEALLOC EXEC PGM=COMMAND                                  '
 PUNCH '//SYSIN    DD *                                              '
 PUNCH 'S &DEALLOC                                                   '
.*--------------------------------------------------------------------*
.* IF THE WAIT PROGRAM IS NOT AVAILABLE, PUNCH AN EXTRA START         *
.* COMMAND, SO MAYBE WE CAN SLOW THE THING DOWN ENOUGH                *
.*--------------------------------------------------------------------*
         AIF ('&WAIT' EQ 'Y').NOWAIT3
 PUNCH 'S &DEALLOC                                                   '
.NOWAIT3 ANOP
 PUNCH '/*                                                           '
         AIF ('&WAIT' NE 'Y').NOWAIT2
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* WAIT     ¦  WAIT 5 SECONDS FOR DEALLOC TO COMPLETE       '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//WAIT     EXEC PGM=WAIT,PARM=&SECS                          '
 PUNCH '/*                                                           '
.NOWAIT2 ANOP
.NOCMD5  ANOP
.NOCMD2  ANOP
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* DSFINIT  ¦  INITIALIZES DASD VOLUME USING ICKDSF         '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//DSFINIT  EXEC PGM=ICKDSF                                   '
 PUNCH '//IPLTEXT  DD DISP=SHR,VOL=SER=&SYSRES,UNIT=SYSDA,           '
 PUNCH '//            DSN=SYS1.SAMPLIB(IPLRECS)                      '
 PUNCH '//         DD DISP=SHR,VOL=SER=&SYSRES,UNIT=SYSDA,           '
 PUNCH '//            DSN=SYS1.SAMPLIB(IEAIPL00)                     '
 PUNCH '//SYSPRINT DD   SYSOUT=*                                     '
 PUNCH '//SYSIN    DD   *                                            '
 PUNCH ' INIT   UNIT(&UNITADR) -                           '
 PUNCH '        VOLID(&VOLUME) -                           '
 PUNCH '        OWNERID(&OWNER) -                          '
 PUNCH '        VTOC(0,1,14) -                             '
 PUNCH '        PURGE -                                    '
 PUNCH '        MAP -                                      '
         AIF ('&VFY' EQ '').NOVFY
 PUNCH '        VERIFY(&VFY) -                             '
         AGO  .VFY
.NOVFY   ANOP
 PUNCH '        NOVERIFY -                                 '
.VFY     ANOP
 PUNCH '        NOVALIDATE -                               '
 PUNCH '        NOCHECK -                                  '
 PUNCH '        IPLDD(IPLTEXT) -                           '
 PUNCH '        NOBOOTSTRAP                                '
 PUNCH '/*                                                 '
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB A  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.NOJOBA  ANOP
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "B"                                          *
.*--------------------------------------------------------------------*
         AIF (NOT &DOJOBB).NOJOBB
         @JOBCARD SUFFIX=B
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - B   &SYSTIME &SYSDATE                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
         AIF ('&COMMAND' NE 'Y').NOCMD3
 PUNCH '//* ONLINE   ¦  VARY DEVICE &UNITADR ONLINE AND MOUNT &VOLUME'
.NOCMD3  ANOP
 PUNCH '//* DEFMCAT  ¦  DELETE AND RECREATE VVDS                     '
 PUNCH '//*          ¦  DEFINE TEST SYSTEM MASTER CATALOG            '
 PUNCH '//* DEFVSAM  ¦  DEFINE ALL VSAM DS NEEDED FOR IPL            '
 PUNCH '//* DEFNVSAM ¦  DEFINE ALL NON VSAM CATALOG ENTRIES          '
         AIF ('&COMMAND' NE 'Y').NOCMD4
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* ONLINE   ¦  VARY DEVICE &UNITADR ONLINE AND MOUNT &VOLUME'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//OFFLINE  EXEC PGM=COMMAND                                  '
 PUNCH '//SYSIN    DD *                                              '
 PUNCH 'V &UNITADR,ONLINE                                            '
 PUNCH 'M &UNITADR,VOL=(SL,&VOLUME),USE=PRIVATE                      '
 PUNCH '/*                                                           '
.NOCMD4  ANOP
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* DEFMCAT  ¦  DELETE AND RECREATE VVDS, DEFINE NEW MCAT    '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//DEFMCAT  EXEC PGM=IDCAMS,REGION=2M                         '
 PUNCH '//SYSPRINT DD   SYSOUT=*                                     '
 PUNCH '//TARGET   DD   DISP=SHR,UNIT=&DEVT,VOL=SER=&VOLUME          '
 PUNCH '//SYSIN    DD   *                                            '
 PUNCH ' DELETE -                                          '
 PUNCH '         &SYS1..VVDS.V&VOLUME -                    '
 PUNCH '           FILE(TARGET)  -                         '
 PUNCH '           CLUSTER -                               '
 PUNCH '           PURGE -                                 '
 PUNCH '       CATALOG(&MASTRCAT) '                        '
 PUNCH ' SET MAXCC=0                                       '
 PUNCH '                                                   '
 PUNCH ' DEFINE CLUSTER ( -                                '
 PUNCH '           NAME(&SYS1..VVDS.V&VOLUME) -            '
 PUNCH '           CYL(1,1) -                              '
 PUNCH '           VOL(&VOLUME) -                          '
 PUNCH '           FILE(TARGET) -                          '
 PUNCH '           NONINDEXED -                            '
 PUNCH '           OWNER(&OWNER) -                         '
 PUNCH '         ) -                                       '
 PUNCH '       CATALOG(&MASTRCAT)                          '
 PUNCH '                                                   '
 PUNCH ' DEFINE USERCATALOG   ( -                          '
 PUNCH '           NAME(&CATALOG) -                        '
 PUNCH '           CYL(5 2) -                              '
 PUNCH '           VOL(&VOLUME) -                          '
 PUNCH '           BUFFERSPACE(8192) -                     '
 PUNCH '           BUFND(10) -                             '
 PUNCH '           BUFNI(10) -                             '
 PUNCH '           FILE(TARGET) -                         '
 PUNCH '           ICFCATALOG -                            '
 PUNCH '           OWNER(&OWNER) -                         '
 PUNCH '           STRNO(9) -                              '
 PUNCH '                      ) -                          '
 PUNCH '       CATALOG(&MASTRCAT)                          '
 PUNCH '/*                                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* DEFVSAM  ¦  DEFINE VSAM DATASETS                         '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//DEFVSAM  EXEC PGM=IDCAMS,REGION=2M,COND=(0,LT)   '
 PUNCH '//STEPCAT  DD  DSN=&CATALOG,DISP=SHR               '
 PUNCH '//SYSPRINT DD  SYSOUT=*                            '
 PUNCH '//TARGET   DD  DISP=SHR,UNIT=&DEVT,VOL=SER=&VOLUME '
 PUNCH '//SYSIN    DD   *                                  '
 PUNCH '  DEFINE CLUSTER ( -                                '
 PUNCH '            NAME( &SYS1..STGINDEX ) -         '
 PUNCH '            CYL(5) -                          '
 PUNCH '            VOL(&VOLUME) -                    '
 PUNCH '            BUFFERSPACE(20480) -              '
 PUNCH '            FILE(TARGET) -                    '
 PUNCH '            KEYS(12 8) -                      '
 PUNCH '            OWNER(&OWNER) -                   '
 PUNCH '            RECORDSIZE(2041,2041) -           '
 PUNCH '            REUSE ) -                         '
 PUNCH '         DATA ( -                             '
 PUNCH '            NAME( &SYS1..STGINDEX.DATA ) -    '
 PUNCH '            CISZ(2048) ) -                    '
 PUNCH '         INDEX ( -                            '
 PUNCH '            NAME( &SYS1..STGINDEX.INDEX ) -   '
 PUNCH '            CISZ(1024) ) -                    '
 PUNCH '         CATALOG(&CATALOG)                    '
 PUNCH '                                              '
 PUNCH ' DEFINE PAGESPACE ( -                         '
 PUNCH '            NAME( PAGE.&VOLUME..PLPA) -     '
 PUNCH '               CYL(&PGPLPA) -                 '
 PUNCH '               VOL(&VOLUME) -                 '
 PUNCH '               FILE(TARGET) -                 '
 PUNCH '               OWNER(&OWNER) -                '
 PUNCH '               NOSWAP -                       '
 PUNCH '               UNIQUE ) -                     '
 PUNCH '            CATALOG(&CATALOG)                 '
 PUNCH '                                              '
 PUNCH ' DEFINE PAGESPACE ( -                         '
 PUNCH '            NAME( PAGE.&VOLUME..COMMON) -   '
 PUNCH '               CYL(&PGCOMM) -                 '
 PUNCH '               VOL(&VOLUME) -                 '
 PUNCH '               FILE(TARGET) -                 '
 PUNCH '               OWNER(&OWNER) -                '
 PUNCH '               NOSWAP -                       '
 PUNCH '               UNIQUE ) -                     '
 PUNCH '            CATALOG(&CATALOG)                 '
 PUNCH '                                              '
 PUNCH ' DEFINE PAGESPACE ( -                         '
 PUNCH '            NAME( PAGE.&VOLUME..LOCAL1) -   '
 PUNCH '               CYL(&PGLCL1) -                 '
 PUNCH '               VOL(&VOLUME) -                 '
 PUNCH '               FILE(TARGET) -                 '
 PUNCH '               OWNER(&OWNER) -                '
 PUNCH '               NOSWAP -                       '
 PUNCH '               UNIQUE ) -                     '
 PUNCH '            CATALOG(&CATALOG)                 '
 PUNCH '                                              '
 PUNCH ' DEFINE CLUSTER ( -                           '
 PUNCH '            NAME( &SYS1..MAN1 ) -             '
 PUNCH '               CYL(10) -                   '
 PUNCH '               VOL(&VOLUME) -              '
 PUNCH '               CISZ(4096) -                '
 PUNCH '               FILE(TARGET) -              '
 PUNCH '               NONINDEXED -                '
 PUNCH '               OWNER(&OWNER) -             '
 PUNCH '               RECORDSIZE(4086 32767) -    '
 PUNCH '               REUSE   SHR(2 3) -          '
 PUNCH '               SPANNED  SPEED ) -          '
 PUNCH '         DATA ( -                                  '
 PUNCH '                 NAME( &SYS1..MAN1.VDATA) ) -      '
 PUNCH '         CATALOG(&CATALOG)                         '
 PUNCH '                                              '
 PUNCH ' DEFINE CLUSTER ( -                           '
 PUNCH '            NAME( &SYS1..MAN2 ) -             '
 PUNCH '               CYL(10) -                   '
 PUNCH '               VOL(&VOLUME) -              '
 PUNCH '               CISZ(4096) -                '
 PUNCH '               FILE(TARGET) -              '
 PUNCH '               NONINDEXED -                '
 PUNCH '               OWNER(&OWNER) -             '
 PUNCH '               RECORDSIZE(4086 32767) -    '
 PUNCH '               REUSE   SHR(2 3) -          '
 PUNCH '               SPANNED  SPEED ) -          '
 PUNCH '         DATA ( -                                  '
 PUNCH '                 NAME( &SYS1..MAN2.VDATA) ) -      '
 PUNCH '         CATALOG(&CATALOG)                         '
 PUNCH '                                                   '
 PUNCH ' IMPORT CONNECT -                                  '
 PUNCH '        OBJECTS( -                                 '
 PUNCH '        (&MASTRCAT  -                              '
 PUNCH '        VOLUME(&MCATVOL) -                         '
 PUNCH '        DEVT(&DEVT) )) -                           '
 PUNCH '        CATALOG(&CATALOG)                          '
 PUNCH '                                                   '
 PUNCH '/*                                                            '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* DEFNVSAM ¦  DEFINE NON VSAM CATALOG ENTRIES              '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//DEFNVSAM EXEC PGM=IDCAMS,REGION=3M,COND=(0,LT)              '
 PUNCH '//STEPCAT   DD  DSN=&CATALOG,DISP=SHR '
 PUNCH '//SYSPRINT  DD  SYSOUT=*                                      '
 PUNCH '//SYSIN     DD  *                                             '
&X       SETA 0
.JBTOP1  ANOP
&X       SETA &X+1
         AIF (&X GT &CTR).JBDONE1
 PUNCH ' DEFINE NONVSAM ( -                                           '
 PUNCH '    NAME(&SYSX..&DSN(&X)) -'
 PUNCH '    OWNER(&OWNER) DEVT(&DEVT) VOL(&VOLUME)) -'
 PUNCH '    CATALOG(&CATALOG)'
         AGO  .JBTOP1
.JBDONE1 ANOP
 PUNCH '//*                                                           '
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB B  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.NOJOBB  ANOP
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "C"                                          *
.*--------------------------------------------------------------------*
         AIF (NOT &DOJOBC).NOJOBC
         @JOBCARD SUFFIX=C
         LCLC &QVOL,&DSSVOL,&DCBRF
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - C   &SYSTIME &SYSDATE                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  ALLOC   ¦  ALLOCATES NONVSAM DATASETS                   '
 PUNCH '//*  LOADNNN ¦  COPIES NONVSAM PDS DSNS                      '
 PUNCH '//*  COPYNNN ¦  COPIES MEMBERS FROM SOURCE TO TARGET SYSTEM  '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  ALLOC -                                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//ALLOC   EXEC PGM=IEFBR14,REGION=4M                         '
         AIF ('&STEPCAT' EQ '').NOSCATA
 PUNCH '//STEPCAT   DD DISP=SHR,DSN=&STEPCAT      '
.NOSCATA  ANOP
&X       SETA 0
.J1TOP1  ANOP
&X       SETA &X+1
         AIF (&X GT &CTR).J1DONE1
.*******************************************************
.*** IF DFDSS COPY, LET DFDSS PERFORM THE ALLOCATION ***
.*** INSTEAD OF IEFBR14.                              **
.*******************************************************
         AIF ('&CPY(&X)' EQ 'D').J1TOP1  USE REPLACE OPTION INSTEAD
&DCBRF   SETC ''
         AIF ('&DCBREF' NE 'Y').NODCBRF
&DCBRF   SETC ',DCB=(&DSN(&X))'
.NODCBRF ANOP
&DDNAME  SETC '&DS2(&X)        '(1,8)
 PUNCH '//&DDNAME DD DISP=(,KEEP),DSN=&SYSX..&DSN(&X),    '
 PUNCH '//    UNIT=&DEVT,VOL=SER=&VOLUME&DCBRF,    '
 PUNCH '//    SPACE=(&SPA(&X),(&PRI(&X),&SEC(&X),&DIR(&X))&SPR(&X))'
         AGO  .J1TOP1
.J1DONE1 ANOP
&X       SETA 0
.JCTOP2  ANOP
&X       SETA &X+1
&XCTR    SETC '&X'
.XCTC2   ANOP
         AIF (K'&XCTR GT 2).NOXCC2
&XCTR    SETC '0&XCTR'
         AGO   .XCTC2
.NOXCC2  ANOP
         AIF (&X GT &CTR).JCDONE2
&DDN     SETC '&DS2(&X)        '(1,7)
&XDDN    SETC '&DS2(&X)'
         AIF (K'&XDDN LT 8).NODTRIM
&XDDN    SETC '&XDDN'(1,7)
.NODTRIM ANOP
.* SEE IF THIS IS A CATFIND = Y RUN.  IF SO, DON'T ADD THE VOL=SER=
.* SYSRES UNLESS SPECIFICALLY REQUESTED ON @DATASET MACRO.
.* IF CATFIND = N, THEN PUT VOL=SER=SYSRES ON ALL, EXCEPT PUT
.* SPECIFIED VOLUME ON VOL=SER= IF SPECIFIED ON @DATASET MACRO.
&QVOL    SETC ''
&DSSVOL  SETC ''
.*
         AIF ('&VOL(&X)' EQ '').NOVOL   IF NO VOL, BRANCH AROUND
&QVOL    SETC '&VOL(&X)'                ELSE SET VOL
&DSSVOL  SETC 'INDYNAM(&VOL(&X))'       ELSE SET VOL
         AGO .PUNCPY                    AND GO PUNCH COPY JCL
.*
.NOVOL   ANOP
         AIF ('&CATFIND' EQ 'Y').PUNCPY IF CATFIND=Y, LEAVE VOL BLNK
&QVOL    SETC '&SYSRES'
.PUNCPY  ANOP
         AIF ('&CPY(&X)' EQ 'C').DOCOPY
         AIF ('&CPY(&X)' EQ 'G').DOGENER
         AIF ('&CPY(&X)' EQ 'D').DODSS
         AGO .JCTOP2
.DOCOPY  ANOP
.*
.* PROCESS THIS DATASET WITH IEBCOPY (COPY OPTION "C")
.*
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  LOAD&XCTR - IEBCOPY &DSN(&X)         '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LOAD&XCTR EXEC PGM=IEBCOPY,REGION=2M    '
         AIF ('&STEPCAT' EQ '').NOSCAT1
 PUNCH '//STEPCAT   DD DISP=SHR,DSN=&STEPCAT      '
.NOSCAT1  ANOP
 PUNCH '//SYSPRINT  DD SYSOUT=*                   '
 PUNCH '//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))  '
 PUNCH '//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))  '
 PUNCH '//I&DDN  DD DISP=SHR,DSN=&DSN(&X),            '
 PUNCH '//          UNIT=SYSALLDA,VOL=SER=&QVOL       '
 PUNCH '//O&DDN  DD DISP=SHR,DSN=&SYSX..&DSN(&X),     '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME        '
 PUNCH '//SYSIN    DD *                               '
 PUNCH '   COPY I=I&XDDN,O=O&XDDN,LIST=NO       '
 PUNCH '//*                                             '
         AGO  .JCTOP2
.DOGENER ANOP
.*
.* PROCESS THIS DATASET WITH ICEGENER (COPY OPTION "G")
.*
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  LOAD&XCTR - ICEGENER &DSN(&X)       '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LOAD&XCTR EXEC PGM=ICEGENER,REGION=2M         '
         AIF ('&STEPCAT' EQ '').NOSCAT2
 PUNCH '//STEPCAT   DD DISP=SHR,DSN=&STEPCAT      '
.NOSCAT2  ANOP
 PUNCH '//SYSPRINT  DD SYSOUT=*                         '
 PUNCH '//SYSUT1    DD DISP=SHR,DSN=&DSN(&X),           '
 PUNCH '//          UNIT=SYSALLDA,VOL=SER=&QVOL       '
 PUNCH '//SYSUT2    DD DISP=SHR,DSN=&SYSX..&DSN(&X),    '
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME          '
 PUNCH '//SYSIN     DD DUMMY                            '
 PUNCH '//*                                             '
         AGO  .JCTOP2
.DODSS   ANOP
.*
.* PROCESS THIS DATASET WITH DFDSS (COPY OPTION "D")
.*
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  LOAD&XCTR - DFDSS &DSN(&X)       '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LOAD&XCTR EXEC PGM=ADRDSSU,REGION=4M          '
         AIF ('&STEPCAT' EQ '').NOSCAT3
 PUNCH '//STEPCAT   DD DISP=SHR,DSN=&STEPCAT      '
.NOSCAT3  ANOP
 PUNCH '//SYSPRINT  DD SYSOUT=*                         '
 PUNCH '//SYSIN     DD *                                '
 PUNCH '  COPY -                                        '
 PUNCH '  DATASET( -                                    '
 PUNCH '     INCLUDE( -                                 '
 PUNCH '        &DSN(&X) -                              '
 PUNCH '            ) ) -                               '
 PUNCH '  REPLACE    -                                  '
 PUNCH '  ALLDATA(*) -                                  '
 PUNCH '  TOL(ENQF) -                                   '
 PUNCH '  PROCESS(SYS1)  -                              '
 PUNCH '  RECATALOG(&CATALOG) -                         '
 PUNCH '  OUTDYNAM(&VOLUME) &DSSVOL -                   '
 PUNCH '  SHARE                                         '
 PUNCH '//*                                             '
         AGO  .JCTOP2
.*
.JCDONE2 ANOP
.*-----------------------------------------------------
.*-----------------------------------------------------
.*-----------------------------------------------------
.* PROCESS MEMBER COPIES SPECIFIED THROUGH @COPY MACRO
.*-----------------------------------------------------
.*-----------------------------------------------------
.*-----------------------------------------------------
         LCLA &YCTR,&ZCTR
         LCLC &SOURCE,&TARGET
         LCLC &MEMPRM
         AIF (&CTRB LT 1).NOMEMCPY
         AIF ('&SRCL(1)' EQ '').ERRMC01
         AIF ('&TGTL(1)' EQ '').ERRMC01
&SOURCE  SETC '&SRCL(1)'
&TARGET  SETC '&TGTL(1)'
&YCTR    SETA 1
         AGO .NEWCJOB                    GO PUNCH FIRST JOB CARDS
.*-----------------------------------------------------
.*--- IF TARGET OR SOURCE LIB CHANGES, PUNCH NEW STEP -
.*-----------------------------------------------------
.MEMTOP  ANOP
&YCTR    SETA &YCTR+1
.* MNOTE 1,'SRCL(&YCTR) IS: &SRCL(&YCTR)'
.* MNOTE 1,'TGTL(&YCTR) IS: &TGTL(&YCTR)'
.* MNOTE 1,'MEMB(&YCTR) IS: &MEMB(&YCTR)'
.* MNOTE 1,'NMEM(&YCTR) IS: &NMEM(&YCTR)'
         AIF (&YCTR GT &CTRB).MEMDONE
         AIF ('&SRCL(&YCTR)' NE '').NEWCJOB
         AIF ('&TGTL(&YCTR)' NE '').NEWCJOB
.*-----------------------------------------------------
.*---- PUNCH THE NEXT MEMBER COPY STATEMENT -----------
.*-----------------------------------------------------
.NEXTMEM ANOP
&MEMPRM  SETC ''
&MEMPRM  SETC '&MEMB(&YCTR)'
         AIF ('&NMEM(&YCTR)' EQ '').NONEW
&MEMPRM  SETC '&MEMPRM,&NMEM(&YCTR),R'
.NONEW   ANOP
.* MNOTE 0,'  SELECT MEMBER=((&MEMPRM)) '
 PUNCH '  SELECT MEMBER=((&MEMPRM)) '
         AGO .MEMTOP
.*-----------------------------------------------------
.*---- PUNCH THE JCL FOR THE NEXT JOB STEP  -----------
.*-----------------------------------------------------
.NEWCJOB ANOP                          ************************
&ZCTR    SETA &ZCTR+1
&XCTR    SETC '&ZCTR'                  PAD THE COUNTER WITH 0'S
.PADCTR  ANOP                          MAKE IT LOOK NICE
         AIF (K'&XCTR GT 2).NOMCPAD    ************************
&XCTR    SETC '0&XCTR'
         AGO .PADCTR
.NOMCPAD ANOP
         AIF ('&SRCL(&YCTR)' EQ '').NSRCSET
&SOURCE  SETC '&SRCL(&YCTR)'
.NSRCSET ANOP
         AIF ('&TGTL(&YCTR)' EQ '').NTGTSET
&TARGET  SETC '&TGTL(&YCTR)'
.NTGTSET ANOP
 PUNCH '//*'
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  COPY&XCTR - COPY MEMBERS             '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//COPY&XCTR EXEC PGM=IEBCOPY,REGION=2M    '
 PUNCH '//SYSPRINT  DD SYSOUT=*                   '
 PUNCH '//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))  '
 PUNCH '//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))  '
 PUNCH '//INDD      DD DISP=SHR,DSN=&SOURCE'
 PUNCH '//OUTDD     DD DISP=SHR,DSN=&SYSX..&TARGET,'
 PUNCH '//          UNIT=&DEVT,VOL=SER=&VOLUME        '
 PUNCH '//SYSIN    DD *                               '
 PUNCH '   COPY I=INDD,O=OUTDD,LIST=NO          '
         AGO .MEMTOP
.*-----------------------------------------------------
.*---- ERROR ------------------------------------------
.*-----------------------------------------------------
.ERRMC01 MNOTE 8,'SOURCE AND TARGET LIB MUST BE SPECIFIED ON FIRST'
         MNOTE 8,'@COPY INVOCATION.'
         MEXIT
.*-----------------------------------------------------
.*---- END OF MEMBER COPY JCL GENERATION --------------
.*-----------------------------------------------------
.MEMDONE  ANOP
.NOMEMCPY ANOP
.*
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB C  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*
.NOJOBC  ANOP
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "D"                                          *
.*--------------------------------------------------------------------*
         AIF (NOT &DOJOBD).NOJOBD
         @JOBCARD SUFFIX=D
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - D   &SYSTIME &SYSDATE                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* LOGREC   ¦  INITIALIZES SYS1.CPAC.LOGREC                 '
         AIF ('&UADS' NE 'Y').NOUADSX
 PUNCH '//* USYNC    ¦  SYNC UADS/BRODCAST DATASETS.                 '
.NOUADSX ANOP
         AIF ('&UADS' NE 'Y').NOUADSA
 PUNCH '//* UADSXXXX ¦  COPY, AND MANIPULATE TSO UADS MEMBERS        '
.NOUADSA ANOP
 PUNCH '//* DMPINT0  ¦  INITIALIZES DUMP DATASETS                    '
 PUNCH '//* DMPINT1  ¦  INITIALIZES DUMP DATASETS                    '
         AIF ('&RACF' NE 'Y').NORACF2
         AIF ('&RFCOPY' EQ 'Y').RFCOPY2
 PUNCH '//* ICHINIT  ¦  INITIALIZES NEW RACF DATASET                 '
         AGO .NORACF2
.RFCOPY2 ANOP
 PUNCH '//* ICHCOPY  ¦  COPIES RACF DATASET USING IRRUT200           '
.NORACF2 ANOP
 PUNCH '//* FMTSMF   ¦  FORMAT SMF DATASETS                          '
         AIF ('&CATPTR' EQ 'N').NOCATP1
 PUNCH '//* CATPTR   ¦  SET MASTER CATALOG POINTER                   '
.NOCATP1 ANOP
 PUNCH '//* CATPRT   ¦  PRINT MASTER CATALOG POINTER                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*                                                '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* LOGREC   ¦  INITIALIZES SYS1.CPAC.LOGREC                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LOGREC   EXEC PGM=IFCDIP00                              '
 PUNCH '//SERERDS  DD DISP=SHR,DSN=&SYSX..SYS1.CPAC.LOGREC,       '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                     '
 PUNCH '//*                                                       '
         AIF ('&USYNC' NE 'Y').NOUSYNC
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* SYNC UADS / BRODCAST DATASETS                       '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//USYNC    EXEC PGM=IKJEFT01,                           '
 PUNCH '//         DYNAMNBR=15,                                 '
 PUNCH '//         REGION=2M                                    '
 PUNCH '//SYSPRINT DD SYSOUT=*                             '
 PUNCH '//SYSIN    DD DUMMY                                '
 PUNCH '//SYSUADS  DD DISP=SHR,DSN=&SYSX..&SYS1..UADS,     '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME              '
 PUNCH '//SYSLBC   DD DISP=SHR,DSN=&SYSX..&SYS1..BRODCAST, '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME              '
 PUNCH '//SYSTSPRT DD SYSOUT=*                             '
 PUNCH '//SYSTSIN  DD *                                    '
 PUNCH '  ACCOUNT                                          '
 PUNCH '  SYNC                                             '
 PUNCH '  END                                              '
 PUNCH '//*                                                '
.NOUSYNC ANOP
         AIF ('&UADS' NE 'Y').NOUADSB
         AIF ('&USR1&USR2&USR3&USR4&USR5' EQ '').NOUADSB
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* COPY UADS ENTRIES FOR SELECTED TSO USERS            '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//UADSCPY  EXEC PGM=IEBCOPY                               '
 PUNCH '//SYSPRINT DD SYSOUT=*                             '
 PUNCH '//SYSUT2   DD UNIT=SYSDA,SPACE=(20,10)             '
 PUNCH '//SYSUT3   DD UNIT=SYSDA,SPACE=(20,10)             '
 PUNCH '//IUADS    DD DSN=SYS1.UADS,DISP=SHR               '
 PUNCH '//OUADS    DD DSN=&SYSX..&SYS1..UADS,DISP=SHR,     '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME              '
 PUNCH '//SYSIN    DD *                                    '
 PUNCH ' COPY I=((IUADS,R)),O=OUADS                        '
         AIF ('&USR1' EQ '').UNO1
 PUNCH ' SELECT MEMBER=((&USR1.0,$&USR1.0,R))                     '
.UNO1    ANOP
         AIF ('&USR2' EQ '').UNO2
 PUNCH ' SELECT MEMBER=((&USR2.0,$&USR2.0,R))                     '
.UNO2    ANOP
         AIF ('&USR3' EQ '').UNO3
 PUNCH ' SELECT MEMBER=((&USR3.0,$&USR3.0,R))                     '
.UNO3    ANOP
         AIF ('&USR4' EQ '').UNO4
 PUNCH ' SELECT MEMBER=((&USR4.0,$&USR4.0,R))                     '
.UNO4    ANOP
         AIF ('&USR5' EQ '').UNO5
 PUNCH ' SELECT MEMBER=((&USR5.0,$&USR5.0,R))                     '
.UNO5    ANOP
 PUNCH '//*                                                '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* PERFORM ACCOUNT PROCESSING ON TSO USERIDS           '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//UADSACT  EXEC PGM=IKJEFT01,                           '
 PUNCH '//        DYNAMNBR=15,                                  '
 PUNCH '//        REGION=2M                                     '
 PUNCH '//SYSUADS  DD DSN=&SYSX..&SYS1..UADS,DISP=SHR,          '
 PUNCH '//            VOL=SER=&VOLUME,UNIT=&DEVT           '
 PUNCH '//SYSLBC   DD DSN=&SYSX..&SYS1..BRODCAST,DISP=SHR, '
 PUNCH '//            VOL=SER=&VOLUME,UNIT=&DEVT           '
 PUNCH '//SYSPRINT DD SYSOUT=*                             '
 PUNCH '//SYSIN    DD DUMMY                                '
 PUNCH '//SYSTERM  DD SYSOUT=*                             '
 PUNCH '//SYSTSPRT DD SYSOUT=*                             '
 PUNCH '//SYSTSIN  DD *                                    '
 PUNCH ' ACCOUNT                                           '
         AIF ('&USR1' EQ '').UNOB1
 PUNCH ' ADD    ($&USR1 * *) DATA(&TSOPROC)                '
 PUNCH ' CHANGE ($&USR1 *)   DATA(&TSOPASS)                '
.UNOB1   ANOP
         AIF ('&USR2' EQ '').UNOB2
 PUNCH ' ADD    ($&USR2 * *) DATA(&TSOPROC)                '
 PUNCH ' CHANGE ($&USR2 *)   DATA(&TSOPASS)                '
.UNOB2   ANOP
         AIF ('&USR3' EQ '').UNOB3
 PUNCH ' ADD    ($&USR3 * *) DATA(&TSOPROC)                '
 PUNCH ' CHANGE ($&USR3 *)   DATA(&TSOPASS)                '
.UNOB3   ANOP
         AIF ('&USR4' EQ '').UNOB4
 PUNCH ' ADD    ($&USR4 * *) DATA(&TSOPROC)                '
 PUNCH ' CHANGE ($&USR4 *)   DATA(&TSOPASS)                '
.UNOB4   ANOP
         AIF ('&USR5' EQ '').UNOB5
 PUNCH ' ADD    ($&USR5 * *) DATA(&TSOPROC)                '
 PUNCH ' CHANGE ($&USR5 *)   DATA(&TSOPASS)                '
.UNOB5   ANOP
 PUNCH ' END                                               '
 PUNCH '/*                                                 '
 PUNCH '//*                                                '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* RENAME USERS BACK TO ORIGINAL NAME                  '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//RNUSRS   EXEC PGM=IDCAMS,REGION=2M               '
 PUNCH '//SYSPRINT DD  SYSOUT=*                            '
 PUNCH '//UADS     DD DSN=&SYSX..UADS,                     '
 PUNCH '//            DISP=SHR,UNIT=&DEVT,VOL=SER=&VOLUME  '
 PUNCH '//SYSIN   DD   *                                   '
         AIF ('&USR1' EQ '').UNOC1
 PUNCH ' ALTER &SYSX..UADS($&USR1.0) -                     '
 PUNCH '       FILE(UADS) -                                '
 PUNCH '       NEWNAME(&SYSX..UADS(&USR1.0))               '
.UNOC1   ANOP
         AIF ('&USR2' EQ '').UNOC2
 PUNCH ' ALTER &SYSX..UADS($&USR2.0) -                     '
 PUNCH '       FILE(UADS) -                                '
 PUNCH '       NEWNAME(&SYSX..UADS(&USR2.0))               '
.UNOC2   ANOP
         AIF ('&USR3' EQ '').UNOC3
 PUNCH ' ALTER &SYSX..UADS($&USR3.0) -                     '
 PUNCH '       FILE(UADS) -                                '
 PUNCH '       NEWNAME(&SYSX..UADS(&USR3.0))               '
.UNOC3   ANOP
         AIF ('&USR4' EQ '').UNOC4
 PUNCH ' ALTER &SYSX..UADS($&USR4.0) -                     '
 PUNCH '       FILE(UADS) -                                '
 PUNCH '       NEWNAME(&SYSX..UADS(&USR4.0))               '
.UNOC4   ANOP
         AIF ('&USR5' EQ '').UNOC5
 PUNCH ' ALTER &SYSX..UADS($&USR5.0) -                     '
 PUNCH '       FILE(UADS) -                                '
 PUNCH '       NEWNAME(&SYSX..UADS(&USR5.0))               '
.UNOC5   ANOP
 PUNCH '//*                                                '
.NOUADSB ANOP
 PUNCH '//*                                                '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* INITIALIZE DUMP DATASETS                            '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//DMPINT0 EXEC PGM=IEBGENER                             '
 PUNCH '//SYSPRINT DD SYSOUT=*                                  '
 PUNCH '//SYSIN    DD DUMMY                                     '
 PUNCH '//SYSUT1   DD DUMMY,DCB=&SYS1..DUMP00                   '
 PUNCH '//SYSUT2   DD DSN=&SYSX..&SYS1..DUMP00,DISP=SHR,        '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                   '
 PUNCH '//*                                                '
 PUNCH '//DMPINT1 EXEC PGM=IEBGENER                             '
 PUNCH '//SYSPRINT DD SYSOUT=*                                  '
 PUNCH '//SYSIN    DD DUMMY                                     '
 PUNCH '//SYSUT1   DD DUMMY,DCB=&SYS1..DUMP01                   '
 PUNCH '//SYSUT2   DD DSN=&SYSX..&SYS1..DUMP01,DISP=SHR,        '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME                   '
 PUNCH '//*                                                '
         AIF ('&RACF' NE 'Y').NORACF
         AIF ('&RFCOPY' EQ 'Y').RFCOPY
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* INITIALIZE THE NEW RACF DATASET USING IRRMIN00      '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//ICHINIT  EXEC PGM=IRRMIN00,PARM=NEW                   '
 PUNCH '//SYSPRINT DD SYSOUT=*                                  '
 PUNCH '//SYSTEMP  DD DSN=&SYSX..MACLIB(ICHTEMP0),DISP=SHR'
 PUNCH '//SYSRACF  DD DSN=&SYSX..&RACFDS,DISP=OLD, '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME             '
        AGO .NORACF
.RFCOPY ANOP
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* COPY THE RACF DATASET USING IRRUT200                '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//ICHCOPY  EXEC PGM=IRRUT200                              '
 PUNCH '//SYSPRINT DD SYSOUT=*                                    '
 PUNCH '//SYSUT2   DD SYSOUT=*                                    '
 PUNCH '//SYSRACF  DD DSN=&RACFDS,DISP=SHR                 '
 PUNCH '//SYSUT1   DD DSN=&SYSX..&RACFDS,DISP=OLD,         '
 PUNCH '// UNIT=&DEVT,VOL=SER=&VOLUME                             '
 PUNCH '//SYSIN    DD *                                           '
 PUNCH '  INDEX                                                   '
 PUNCH '  MAP                                                     '
 PUNCH '  END                                                     '
 PUNCH '//*                                                       '
.NORACF    ANOP
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* FORMAT THE SMF DATASETS                             '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//FMTSMF EXEC PGM=IFASMFDP,REGION=2M               '
 PUNCH '//STEPCAT  DD DSN=&CATALOG,DISP=SHR                '
 PUNCH '//SYSPRINT DD SYSOUT=*                             '
 PUNCH '//FMAN1    DD DSN=&SYS1..MAN1,DISP=SHR,            '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME              '
 PUNCH '//FMAN2    DD DSN=&SYS1..MAN2,DISP=SHR,            '
 PUNCH '//         UNIT=&DEVT,VOL=SER=&VOLUME              '
 PUNCH '//SYSIN    DD *                                    '
 PUNCH ' INDD(FMAN1,OPTIONS(CLEAR))                        '
 PUNCH ' INDD(FMAN2,OPTIONS(CLEAR))                        '
         AIF ('&CATPTR' EQ 'N').NOCATP2
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* CONFIGURE SYSCATLG MASTER CATALOG POINTER           '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//CATPTR   EXEC PGM=IEBDG,REGION=512K                        '
 PUNCH '//*-----------------------------------------------------------'
 PUNCH '//* NOTES: ACCEPTABLE CATALOG TYPE VALUES FOR "FILL=" ON THE  '
 PUNCH '//*        "CATTYPE" FD STATEMENT ARE:                        '
 PUNCH '//*          X''00'' AND X''40''  -  VSAM MASTER CATALOG      '
 PUNCH '//*          X''F1''            -  ICF MASTER CATALOG         '
 PUNCH '//*                                                           '
 PUNCH '//*-----------------------------------------------------------'
        LCLC &QLEVEL
&QLEVEL SETC 'F1'
 PUNCH '//SYSPRINT DD  SYSOUT=*                                       '
 PUNCH '//NUCLEUS  DD  DSN=&SYSX..&SYS1..NUCLEUS(SYSCATLG),           '
 PUNCH '//             UNIT=&DEVT,VOL=SER=&VOLUME,                    '
 PUNCH '//             DISP=OLD                                       '
 PUNCH '//SYSIN    DD  *                                              '
 PUNCH '  DSD OUTPUT=(NUCLEUS)                                     '
 PUNCH '  FD NAME=VOL,                                             '
 PUNCH '     LENGTH=06,                                            '
 PUNCH '     STARTLOC=01,                                          '
 PUNCH '     FILL=X''40'',                                         '
 PUNCH '     PICTURE=6,''&VOLUME''  <-VERIFY CATALOG VOLUME        '
 PUNCH '  FD NAME=CATTYPE,                                         '
 PUNCH '     LENGTH=01,                                            '
 PUNCH '     STARTLOC=07,                                          '
 PUNCH '     FILL=X''F1''           <-VERIFY CATALOG TYPE          '
 PUNCH '  FD NAME=QLV,                                             '
 PUNCH '     LENGTH=01,                                            '
 PUNCH '     STARTLOC=08,                                          '
 PUNCH '     FILL=X''&QLEVEL''      <-QUALIFICATION LEVEL          '
 PUNCH '  FD NAME=CAT,                                             '
 PUNCH '     LENGTH=44,                                            '
 PUNCH '     STARTLOC=11,                                          '
 PUNCH '     FILL=X''40'',                                         '
 PUNCH '     PICTURE=44,''&CATALOG                              '''
 PUNCH '  FD NAME=FIL,                                             '
 PUNCH '     LENGTH=26,                                            '
 PUNCH '     STARTLOC=55,                                          '
 PUNCH '     FILL=X''40''                                          '
 PUNCH ' CREATE QUANTITY=1,FILL=X''00'',NAME=(VOL,CATTYPE,QLV,CAT,FIL)'
 PUNCH '//*                                                  '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//* PRINT THE CATALOG POINTER JUST CREATED              '
 PUNCH '//*-----------------------------------------------------'
 PUNCH '//CATPRT    EXEC PGM=IDCAMS                             '
 PUNCH '//SYSPRINT  DD SYSOUT=*                                 '
 PUNCH '//CATPTR    DD DSN=&SYSX..&SYS1..NUCLEUS(SYSCATLG),DISP=SHR,'
 PUNCH '//            UNIT=&DEVT,VOL=SER=&VOLUME             '
 PUNCH '//SYSIN    DD *                                      '
 PUNCH '  PRINT INFILE(CATPTR) DUMP                          '
 PUNCH '//*                                                  '
.NOCATP2 ANOP
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB D  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.NOJOBD  ANOP
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "E"                                          *
.*--------------------------------------------------------------------*
         AIF (NOT &DOJOBE).NOJOBE
         @JOBCARD SUFFIX=E
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - E   &SYSTIME &SYSDATE                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* RENAME   ¦  RENAME NONVSAM DATASET TO FINAL NAME         '
 PUNCH '//* VTOCLIST ¦  VTOC LISTING                                 '
 PUNCH '//* LISTCAT  ¦  FINAL LISTCAT                                '
 PUNCH '//*=========================================================*'
 PUNCH '//* RENAME   ¦  RENAME NONVSAM DATASET TO FINAL NAME         '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//RENAME  EXEC PGM=IDCAMS,REGION=2M      '
 PUNCH '//STEPCAT  DD  DISP=SHR,DSN=&CATALOG     '
 PUNCH '//SYSPRINT DD  SYSOUT=*                  '
 PUNCH '//SYSIN   DD   *                         '
&X       SETA 0
.JETOP1  ANOP
&X       SETA &X+1
         AIF (&X GT &CTR).JEDONE1
         AIF ('&CPY(&X)' EQ 'D').JETOP1
 PUNCH ' ALTER &SYSX..&DSN(&X) -                 '
 PUNCH '       NEWNAME(&DSN(&X)) -               '
 PUNCH '       CATALOG(&CATALOG)                 '
         AGO  .JETOP1
.JEDONE1 ANOP
 PUNCH '//*                                                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* VTOCLIST ¦  LIST VTOC                                    '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//VTOCLIST EXEC PGM=IEHLIST,REGION=2M              '
 PUNCH '//SYSPRINT DD SYSOUT=*                             '
 PUNCH '//VOL1     DD UNIT=&DEVT,VOL=SER=&VOLUME,DISP=OLD  '
 PUNCH '//SYSIN    DD *                                    '
 PUNCH '  LISTVTOC VOL=&DEVT=&VOLUME                       '
 PUNCH '  LISTVTOC VOL=&DEVT=&VOLUME,FORMAT                '
 PUNCH '//*                                                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* LISTCAT  ¦  FINAL CATALOG LISTING                        '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//LISTCAT EXEC PGM=IDCAMS,REGION=2M      '
 PUNCH '//STEPCAT  DD  DISP=SHR,DSN=&CATALOG     '
 PUNCH '//SYSPRINT DD  SYSOUT=*                  '
 PUNCH '//SYSIN   DD   *                         '
 PUNCH '  LISTCAT ALL CATALOG(&CATALOG)          '
 PUNCH '//*                                      '
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB E  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.NOJOBE  ANOP
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "F"                                          *
.*--------------------------------------------------------------------*
         AIF (NOT &DOJOBF).NOJOBF
         @@PARMLB DEVT=&DEVT,VOLUME=&VOLUME,JOBCHAR=F
         @@PROCLB DEVT=&DEVT,VOLUME=&VOLUME,TSOPROC=&TSOPROC
.NOJOBF  ANOP
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB F  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*--------------------------------------------------------------------*
.*    BEGIN  JCL FOR JOB "G"                                          *
.*--------------------------------------------------------------------*
         LCLC &TMSDSN
&TMSDSN  SETC '&WRKPFX..BACKUP'
         AIF    ('&TMSPRM' EQ '').SKTMSF
&TMSDSN  SETC '&TMSDSN,&TMSPRM'
.SKTMSF  ANOP
         AIF ('&DUMP' NE 'Y').NODUMP
         AIF (NOT &DOJOBG).NOJOBG
         @JOBCARD SUFFIX=G
 PUNCH '//*=========================================================*'
 PUNCH '//* JOB - G   &SYSTIME &SYSDATE                           '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//*  STEP    ¦       PURPOSE                                 '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//* DSSDUMP  ¦  BACK UP THE VOLUME TO TAPE USING DFDSS       '
 PUNCH '//*---------------------------------------------------------*'
 PUNCH '//DSSDUMP  EXEC PGM=ADRDSSU,REGION=2M              '
 PUNCH '//SYSPRINT DD SYSOUT=*                             '
 PUNCH '//TAPE     DD DSN=&TMSDSN,'
 PUNCH '//            UNIT=&TAPEUNT,DISP=(NEW,CATLG,KEEP)  '
 PUNCH '//SYSIN    DD *                                    '
 PUNCH '  DUMP INDY(&VOLUME,&DEVT) -                       '
 PUNCH '  OPT(4) -                                         '
 PUNCH '  OUTDD(TAPE) -                                    '
 PUNCH '  ALLDATA(*) -                                     '
 PUNCH '  ALLEXCP                                          '
 PUNCH '/*                                                 '
.NODUMP   ANOP
 PUNCH '//*                                                '
.NOJOBG  ANOP
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-* End of JOB G  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
.*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**
         MEXIT
.*--------------------------------------------------------------------*
.*    ERRORS                                                          *
.*--------------------------------------------------------------------*
.ERR001  MNOTE 8,'THE @JOBCARD MACRO MUST BE CODED BEFORE INVOKING'
         MNOTE 8,'THIS MACRO.'
         MEXIT
.*--------------------------------------------------------------------*
.*    END OF MACRO                                                    *
.*--------------------------------------------------------------------*
         POP    PRINT
         MEND
./ ADD NAME=COMMAND  0100-02365-02365-0941-00400-00400-00000-JMILLER
//EGTLJCMA JOB (0),JMILLER,MSGCLASS=X,CLASS=A,NOTIFY=EGTLJCM,REGION=6M
//ASMHCL   EXEC  ASMHCL,PARM.L='MAP,LET,LIST,NCAL,AC=1'
//C.SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//             DD  DSN=SYS1.AMODGEN,DISP=SHR
//C.SYSIN    DD  *
COMMAND  TITLE 'C O M M A N D  --  ISSUE SYSTEM OPERATOR COMMANDS V2.0'
***********************************************************************
*                                                                     *
*                           C O M M A N D                             *
*                                                                     *
*                   ISSUE SYSTEM OPERATOR COMMANDS                    *
*                                                                     *
***********************************************************************
*                                                                     *
* NOTE: This version has RACHECK code added to be sure that the       *
* caller has at least READ access to the COMMAND profile of the       *
* APPL RACF class.  To permit use of the COMMAND command:             *
*                                                                     *
*    RDEFINE APPL COMMAND UACC(NONE)                                  *
*    PERMIT  COMMAND CLASS(APPL) ID(userid)                           *
*                                                                     *
***********************************************************************
*                                                                     *
*     THIS PROGRAM ACCEPTS SYSTEM OR JES OPERATOR COMMANDS AS         *
*     INPUT AND EXECUTES THEM USING SVC 34. IT MUST BE APF            *
*     AUTHORIZED.                                                     *
*                                                                     *
*     COMMAND CAN OPERATE IN ONE OF THREE MODES:                      *
*                                                                     *
*     1) BATCH OR CALLED PROGRAM                                      *
*        IN THIS MODE COMMAND ACCEPTS INPUT AS EITHER 80-BYTE         *
*        CARD IMAGES FROM SYSIN OR A SINGLE COMMAND FROM THE PARM     *
*        FIELD. THE RESPONSE TO THE OPERATOR COMMAND WILL             *
*        APPEAR ON ALL OPERATOR CONSOLES. FOR EXAMPLE:                *
*                                                                     *
*           //STEP1    EXEC PGM=COMMAND,PARM='VARY 017,ONLINE'        *
*                                                                     *
*           - OR -                                                    *
*                                                                     *
*           //STEP1    EXEC PGM=COMMAND                               *
*           //SYSIN    DD *                                           *
*           VARY 017,ONLINE                                           *
*           /*                                                        *
*                                                                     *
*        IF COMMANDS ARE FETCHED FROM SYSIN, A DELAY OF 2 SECONDS     *
*        WILL BE ADDED BETWEEN COMMANDS.                              *
*                                                                     *
*     2) TSO COMMAND PROCESSOR                                        *
*        IN THIS MODE COMMAND EXPECTS TO FIND THE OPERATOR COMMAND    *
*        DIRECTLY FOLLOWING ON THE TSO INPUT LINE. THE RESPONSE TO    *
*        OS COMMANDS WILL THEN BE DISPLAYED ON THE TSO TERMINAL.      *
*        RESPONSE TO JES COMMANDS WILL APPEAR ON YOUR TERMINAL        *
*        PROVIDED A LOCAL MODIFICATION IS MADE TO JES2 TO ALLOW       *
*        IT TO INTERCEPT THE COMMAND AND SET THE RESPONSE TO TSO.     *
*        OTHERWISE, JES2 COMMANDS WILL APPEAR ON ALL CONSOLES.        *
*        FOR EXAMPLE:                                                 *
*                                                                     *
*           COMMAND D T         <--- (RESPONSE WILL APPEAR ON CRT)    *
*                                                                     *
*     3) CALLABLE SUBROUTINE                                          *
*        IN THIS MODE COMMAND ACCEPTS INPUT ACCORDING TO STANDARD     *
*        OS LINKAGE CONVENTIONS. IN ADDITION TO THE COMMAND ITSELF,   *
*        A SECOND PARAMETER MAY BE PASSED WHICH CONTAINS THE          *
*        CONSOLE NUMBER WHERE YOU WISH THE RESPONSE TO APPEAR.        *
*        (THE SVC 34 WILL ALSO ASSUME THE AUTHORITY OF THAT           *
*        CONSOLE.) FOR EXAMPLE:                                       *
*                                                                     *
*           LA       R1,CMDADDR                                       *
*           LA       R15,=V(COMMAND)                                  *
*           BALR     R14,R15                                          *
*                                                                     *
*           CMDADDR  DC    A(OPERCMD)                                 *
*           CNSADDR  DC    XL1'80',AL3(CONSOLE)                       *
*           OPERCMD  DC    H(3),CL3'D T'                              *
*           CONSOLE  DC    F'5'                                       *
*                                                                     *
*        THIS WOULD MAKE IT APPEAR AS IF 'D T' WERE ISSUED FROM       *
*        CONSOLE 5. (THIS METHOD IS USED BY PROGRAM 'SPY')            *
*                                                                     *
*        COMMAND MAY BE USED TO ISSUE REPLIES TO WTORS.               *
*                                                                     *
*     AUTHOR:                                                         *
*       THE ORIGINAL VERSION OF COMMAND WAS WRITTEN BY MARK SORKIN.   *
*       THE CURRENT VERSION HAS BEEN HEAVILY MODIFIED AT SCE.         *
*       QUESTIONS AND COMMENTS MAY BE SENT TO                         *
*                                                                     *
*          STEVE LANGLEY                                              *
*          SOUTHERN CALIFORNIA EDISON                                 *
*          P.O. BOX 800                                               *
*          ROSEMEAD, CALIF. 91770                                     *
*          1-213-572-3435                                             *
*                                                                     *
*     IMPLEMENTOR:                                          *HMD 07/81*
*       THIS PROGRAM HAS BEEN REVISED AND IMPLEMENTED AT    *HMD 07/81*
*       GTE DATA SERVICES, MARINA DEL REY, CA BY:           *HMD 07/81*
*                                                           *HMD 07/81*
*          HOWARD M. DEAN                                   *HMD 07/81*
*          GTE DATA SERVICES                                *HMD 07/81*
*          4750 LINCOLN BLVD.                               *HMD 07/81*
*          MARINA DEL REY, CALIF. 90291                     *HMD 07/81*
*          PHONE - (213) - 821-0511                         *HMD 07/81*
*                                                           *HMD 07/81*
*       CHANGES MADE BY THE ABOVE ARE MARKED WITH           *HMD 07/81*
*       '*HMD XX/XX*' IN COL 61-71. XX/XX IS THE            *HMD 07/81*
*       CHANGE DATE (MONTH AND YEAR).                       *HMD 07/81*
***********************************************************************
         EJECT
COMMAND  CSECT
         SPACE 3
R0       EQU   0                  REGISTER 0
R1       EQU   1                  REGISTER 1
R2       EQU   2                  WORK REGISTER
R3       EQU   3                  WORK REGISTER
R4       EQU   4                  WORK REGISTER
R5       EQU   5                  WORK REGISTER
R6       EQU   6                  WORK REGISTER             *HMD 07/81*
R7       EQU   7                  WORK REGISTER             *HMD 07/81*
R8       EQU   8                  WORK REGISTER             *HMD 07/81*
R9       EQU   9                  WORK REGISTER             *HMD 07/81*
R10      EQU   10                 PARAMETER LIST ADDRESS REGISTER
R11      EQU   11                 SUBROUTINE LINKAGE REGISTER
R12      EQU   12                 BASE REGISTER
R13      EQU   13                 SAVE AREA ADDRESS REGISTER
R14      EQU   14                 REGISTER 14
R15      EQU   15                 REGISTER 15
         EJECT
         SAVE  (14,12)            SAVE CALLER'S REGISTERS
         LR    R12,R15            ESTABLISH
         USING COMMAND,R12        ADDRESSABILITY
         LA    R3,SAVEAREA        GET OUR SAVEAREA ADDRESS
         ST    R13,SAVEAREA+4     ESTABLISH BACK
         ST    R3,8(R13)          AND FORWARD SAVEAREA POINTERS
         LR    R13,R3             ESTABLISH OUR SAVEAREA ADDRESS
         LR    R10,R1             SAVE PARAMETER REGISTER
         SPACE 2
*********************************************************** *CKO 07/92*
* Determine whether user is authorized to the application   *CKO 07/92*
*********************************************************** *CKO 07/92*
RACHK    EQU  *                                             *CKO 07/92*
         RACHECK ENTITY=(CMDENT),CLASS=CMDCLS,ATTR=READ     *CKO 07/92*
         LTR  R15,R15             Authorized to this prog?  *CKO 07/92*
         BNZ  NOTAUTH             Nope.                     *CKO 07/92*
         SPACE 2                                            *CKO 07/92*
         L     R2,CVTPTR          R2 = ADDR OF CVT
         USING CVT,R2
         L     R3,CVTTCBP         R3 = ADDR OF MAGIC QUADWORD
         L     R4,12(R3)          R4 = ADDR OF OUR ASCB
         USING ASCB,R4
         MVC   ASID,ASCBASID      SAVE OUR ASID
         DROP  R4
         L     R4,CVTCUCB         ADDR OF 'CUCB' (UCM BASE) *HMD 07/81*
         DROP  R2                 NO NEED FOR CVT BASE NOW  *HMD 07/81*
         USING UCM,R4             ADDRESS THE UCM           *HMD 07/81*
         LR    R2,R4              R2 = R4                   *HMD 07/81*
         S     R2,=F'4'           R2 = ADDR OF ADDR OF UCMP *HMD 07/81*
         L     R2,0(R2)           R2 = ADDR OF UCM PREFIX   *HMD 07/81*
         USING UCMPRFX,R2         ADDRESS THE PREFIX        *HMD 07/81*
         L     R5,UCMVEA          R5 = ADDR OF 1ST UCM ENTRY*HMD 07/81*
         L     R6,UCMVEZ          R6 = LNGTH OF EACH ENTRY  *HMD 07/81*
         L     R7,UCMVEL          R7 = ADDR OF LAST UCM ENT.*HMD 07/81*
         SLR   R8,R8              R8 = CONSOLE COUNTER      *HMD 07/81*
UCMLOOP  LA    R8,1(R8)           R8 = CONSOLE NUMBER       *HMD 07/81*
         C     R5,UCMMCENT        IS THIS THE MASTER CON    *HMD 07/81*
         BNE   UCMNEXT            NO, CONTINUE LOOKING      *HMD 07/81*
         ST    R8,R0MASK          SAVE MSTR CONSOLE NUMBER  *HMD 07/81*
         B     INITDONE           DONE WITH THIS NOW        *HMD 07/81*
UCMNEXT  AR    R5,R6              BUMP TO NEXT UCM ENTRY    *HMD 07/81*
         CR    R5,R7              END OF UCM'S?             *HMD 07/81*
         BL    UCMLOOP            NO, CONTINUE              *HMD 07/81*
         DROP  R2,R4              GET RID OF BASES          *HMD 07/81*
         SPACE 3
INITDONE DS    0H                 CHECK OUT INPUT PARM
         MVI   CARD,C' '          CLEAR OUT COMMAND AREA    *HMD 07/81*
         MVC   CARD+1(L'CARD-1),CARD                        *HMD 07/81*
         TM    0(R10),X'80'       IS FIRST THE ONLY PARM?
         BO    ONEPARM            YES; ONLY PARM
         TM    4(R10),X'80'       IS SECOND THE LAST PARM?
         BO    TWOPARMS           YES; TWO PARMS (CALLED WITH CNXX)
***********************************************************************
*                                                                     *
*     A X'80' WAS NOT FOUND IN THE HIGH ORDER BYTE OF THE FIRST       *
*     TWO PARMS, SO WE CAN ASSUME COMMAND IS BEING CALLED AS A CP.    *
*     PLACE OUR ASID IN THE R0 MASK AND CONTINUE.                     *
*                                                                     *
***********************************************************************
         XR    R2,R2              CLEAR R2
         ICM   R2,B'0011',ASID    R2 = ASID OF CALLER
         O     R2,=XL4'00008000'  TELL SVC34 ITS AN ASID
         ST    R2,R0MASK          AND OVERRIDE THE R0 MASK
         L     R3,0(R10)          R3 = ADDR OF INPUT LINE
         LA    R4,4(R3)           R4 = ADDR OF FIRST CHAR OF INPUT
         AH    R4,2(R3)           R4 = ADDR OF FIRST CHAR PAST COMMAND
         LH    R2,0(R3)           R2 = TOTAL LENGTH OF STRING
         SH    R2,=H'4'           R2 = LENGTH MINUS HEADER  *HMD 07/81*
         SH    R2,2(R3)           R2 = LENGTH OF OPER CMD   *HMD 07/81*
         BNP   EOJ                IS NO COMMAND GOTO EOJ    *HMD 07/81*
         CH    R2,=H'100'         IS LENGTH TOO LONG?       *HMD 07/81*
         BNH   LENOK              LENGTH IS OK              *HMD 07/81*
         LA    R2,100             ONLY 1ST 100 BYTES        *HMD 07/81*
LENOK    BCTR  R2,0               R2 = R2 - 1 FOR EX MVC
         EX    R2,MOVE1           MOVE CMD INTO CARD
*************************************************************HMD 07/82*
** THE FOLLOWING CODE IS NECESSARY THE ENABLE THIS COMMAND  *HMD 07/82*
** TO WORK UNDER MVS/SP RELEASE 3. THIS IS DUE TO A CHANGE  *HMD 07/82*
** IN THE COMMAND SCHEDULER CSCB CREATION MODULE IEE0803D.  *HMD 07/82*
**                                                          *HMD 07/82*
** IN MVS/SP 3, IF AN ASID IS PRESENT IN THE XSA, THEN THE  *HMD 07/82*
** COMMAND SCHEDULER MOVES YOUR TSO USERID INTO THE NEWLY   *HMD 07/82*
** CREATED CSCB. WHY THIS IS DONE, WHO KNOWS. IT CAUSES,    *HMD 07/82*
** HOWEVER, THE STC INITIALIZATION ROUTINE IEEPRWI2 TO      *HMD 07/82*
** THINK THAT A 'SYSTEM' ADDRESS SPACE IS BEING CREATED     *HMD 07/82*
** DUE TO THE CHKEY FIELD OF THE CSCB CONTAINING YOUR       *HMD 07/82*
** USERID INSTEAD OF ZERO. BECAUSE THIS ADDRESS SPACE       *HMD 07/82*
** INITIALIZATION ROUTINE NAME FOR SYSTEM ADDRESS SPACES    *HMD 07/82*
** IS CONTAINED IN THE CHKEY FIELD, IEEPRWI2 ATTEMPT TO     *HMD 07/82*
** LINK TO YOUR TSO USERID TO INITIALIZE THE STARTED        *HMD 07/82*
** ADDRESS SPACE. THUS AN ABEND806-4 AND A RESULTING SVC    *HMD 07/82*
** DUMP.                                                    *HMD 07/82*
**                                                          *HMD 07/82*
** SINCE RESPONSE AT THE TERMINAL IS NOT REQUIRED FOR       *HMD 07/82*
** START AND MOUNT COMMANDS (AND THAT IS THE ONLY PLACE     *HMD 07/82*
** THIS CRAZY THING HAPPENS) WE WILL ISSUE THOSE COMMANDS   *HMD 07/82*
** WITH REGISTER ZERO EQUAL TO ZERO.                        *HMD 07/82*
*************************************************************HMD 07/82*
         CLC   =C'LOGON ',CARD    LOGON COMMAND?            *HMD 07/82*
         BE    EOJ                DON'T BE SILLY            *HMD 07/82*
         CLC   =C'logon ',CARD    LOGON COMMAND?            *HMD 07/82*
         BE    EOJ                DON'T BE SILLY            *HMD 07/82*
         CLC   =C'START ',CARD    IS IT A START COMMAND?    *HMD 07/82*
         BE    STARTM             YES..CLEAR R0MASK         *HMD 07/82*
         CLC   =C'S ',CARD        START COMMAND?            *HMD 07/82*
         BE    STARTM             YES, CLEAR R0MASK         *HMD 07/82*
         CLC   =C'MOUNT ',CARD    MOUNT COMMAND?            *HMD 07/82*
         BE    STARTM             YES, CLEAR R0MASK         *HMD 07/82*
         CLC   =C'M ',CARD        MOUNT COMMAND?            *HMD 07/82*
         BE    STARTM             NO COMTINUE WITH COMMANDS *HMD 07/82*
         CLC   =C'start ',CARD    L         C               *HMD 07/82*
         BE    STARTM               O          A            *HMD 07/82*
         CLC   =C's ',CARD            W            S        *HMD 07/82*
         BE    STARTM                   E             E     *HMD 07/82*
         CLC   =C'mount ',CARD            R                 *HMD 07/82*
         BE    STARTM                                       *HMD 07/82*
         CLC   =C'm ',CARD                                  *HMD 07/82*
         BNE   DOCMD              NO COMTINUE WITH COMMANDS *HMD 07/82*
STARTM   XC    R0MASK,R0MASK      CLEAR REGISTER 0 MASK     *HMD 07/82*
DOCMD    B     DOSVC34            GO DO THE COMMAND
***********************************************************************
*                                                                     *
*     X'80' WAS FOUND IN THE HIGH ORDER BYTE OF THE SECOND PARM,      *
*     SO WE HAVE BEEN CALLED AS A SUBROUTINE (MODE 3). THE SECOND     *
*     PARM CONTAINS THE CONSOLE ID WHERE THE COMMAND IS TO 'COME      *
*     FROM', SO USE THAT FOR THE R0 MASK.                             *
*                                                                     *
***********************************************************************
TWOPARMS L     R3,4(R10)          R3 = ADDR OF R0 MASK FOR SVC34
         MVC   R0MASK(4),0(R3)    SAVE R0 MASK FOR SVC34
***********************************************************************
*                                                                     *
*     ONLY ONE PARM WAS PASSED, SO WE ARE BEING CALLED IN MODE 1.     *
*     JUST ISSUE THE COMMAND FROM THE PARM STRING.                    *
*                                                                     *
***********************************************************************
ONEPARM  L     R10,0(R10)         GET PARAMETER ADDRESS
         SLR   R3,R3              CLEAR FOR ICM             *HMD 07/81*
         ICM   R3,B'0011',0(R10)  GET PARAMETER TEXT LENGTH
         BZ    USESYSIN           NO - GO GET COMMANDS FROM SYSIN
         CH    R3,=H'100'         COMMAND TOO LONG?         *HMD 07/81*
         BNH   CMDOK              NO, IS OK                 *HMD 07/81*
         LA    R3,100             ONLY DO 1ST 100 BYTES     *HMD 07/81*
CMDOK    BCTR  R3,R0              DECREMENT R3 FOR USE IN EXECUTE
         EX    R3,MOVE            EXECUTE MVC
DOSVC34  LA    R11,EOJ            GET ADDRESS FOR RETURN FROM SVC34
         B     SVC34              GO ISSUE COMMAND
         SPACE 3
***********************************************************************
*                                                                     *
*     NO PARM FIELD FOUND, SO LOOK AT SYSIN FOR INPUT                 *
*                                                                     *
***********************************************************************
USESYSIN OPEN  (SYSIN,INPUT)      OPEN SYSIN
         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN               *HMD 07/81*
         BZ    EOJ                IF BAD OPEN; END OF PGM   *HMD 07/81*
GETSYSIN GET   SYSIN,CARD         GET A SYSIN RECORD INTO SVC34 LIST
         MVC   CARD+72(8),CARD+80 BLANK OUT SEQUENCE FIELD IN 73-80
         CLI   CARD,C'*'          IS THIS A COMMENT?
         BE    GETSYSIN           YES;GO GET ANOTHER CARD
         LA    R11,GETSYSIN       GET ADDRESS FOR RETURN FROM SVC34
         B     SVC34              GO ISSUE COMMAND
         SPACE 3
EODSYSIN CLOSE (SYSIN)            CLOSE SYSIN
         SPACE 3
EOJ      L     R13,SAVEAREA+4     GET ADDRESS OF CALLER'S SAVEAREA
         RETURN (14,12),RC=0      RETURN TO CALLER
         SPACE 3                                            *CKO 07/92*
BADEOJ   L     R13,SAVEAREA+4     GET ADDRESS OF CALLER'S   *CKO 07/92*
         RETURN (14,12),RC=8      SAVE AREA & RETURN        *CKO 07/92*
         EJECT
***********************************************************************
*                                                                     *
*     THIS ROUTINE ACTUALLY ISSUES THE SVC 34. IT EITHER RETURNS      *
*     TO THE SYSIN-READ LOOP OR EOJ DEPENDING ON THE VALUE OF R11     *
*                                                                     *
***********************************************************************
SVC34    DS    0H
         LA    R3,CARD+L'CARD-1   POINT TO END OF TEXT      *HMD 07/81*
         LA    R4,CARD-1          POINT TO START OF TEXT    *HMD 07/81*
FINDTEXT DS    0H                 FIND LAST TEXT CHARACTER
         CR    R3,R4              ALL BLANK?
         BNH   SVC34END           YES - IGNORE IT
         CLI   0(R3),C' '         BLANK CHARACTER?
         BNE   GOTTEXT            NO - FOUND END OF TEXT
         BCT   R3,FINDTEXT        KEEP ON LOOKING
         SPACE
GOTTEXT  DS    0H                 BUILD PARAMETER LIST LENGTHS
         SR    R3,R4              COMPUTE LENGTH OF COMMAND *HMD 07/81*
         BNP   SVC34END           INVALID COMMAND           *HMD 07/81*
         LA    R3,5(R3)           TEXT AND LIST PREFIX
         STH   R3,CMDLIST         SET SVC 34 LIST LENGTH
         TESTAUTH FCTN=1          SEE IF WE ARE AUTHORIZED  *HMD 07/82*
         LTR   R15,R15            WELL, ARE WE?             *HMD 07/82*
         BZ    MODEOK             YES..JUST DO MODESET      *HMD 07/82*
         MVI   AUTHFLG,AUTHUS     INDICATE WE TURNED ON     *HMD 07/82*
* INSERT YOUR USER SVC HERE TO TURN ON APF AUTHORIZATION. A SAMPLE
* OF SUCH AN SVC IS ON THE LA MVS USER GROUP TAPE. THIS WILL ALLOW
* 'COMMAND' TO BE USED UNDER SPF OPTION 6 OR VIA THE 'CALL' COMMAND.
* ALSO, YOU WILL AVOID THE MESSY JOB OF UPDATING TABLES IN IKJEFT02.
         LTR   R15,R15            SYSTEM PROGRAMMER?        *HMD 07/82*
         BNZ   SVC34END           NOPE..DO NOT WASTE TIME   *HMD 07/82*
MODEOK   DS    0H                                           *HMD 07/82*
*        LA    R0,MSG1            ISSUE MESSAGE FOR COMMAND *BAC 05/90*
*        WTO   MF=(E,(R0))                                  *BAC 05/90*
         MVC   WTOCMD(101),CARD   MOVE IN COMMAND           *BAC 05/90*
         LA    R0,MSG2            ISSUE MESSAGE FOR COMMAND *BAC 05/90*
         WTO   MF=(E,(R0))                                  *BAC 05/90*
         MODESET KEY=ZERO         INDICATE KEY=ZERO
         SYSEVENT DONTSWAP        DONT GET SWAPPED          *HMD 07/81*
         L     R0,R0MASK          LOAD R0 FOR SVC34         *HMD 07/81*
         MGCR  CMDLIST            ISSUE OPERATOR COMMAND    *HMD 07/81*
         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN               *HMD 07/81*
*                                 ARE WE USING SYSIN?       *HMD 07/81*
         BZ    NOSTIMR            NO, DO NOT DELAY          *HMD 07/81*
         STIMER  WAIT,BINTVL=HOLD WAIT FOR A COMPLETION     *HMD 07/81*
NOSTIMR  SYSEVENT OKSWAP          OK TO GET SWAPPED NOW     *HMD 07/81*
         MODESET KEY=NZERO        GO BACK TO USER KEY
         CLI   AUTHFLG,AUTHUS     DID WE TURN ON AUTH?      *HMD 07/82*
         BNE   SVC34END           NO..JUST RETURN           *HMD 07/82*
* INSERT YOUR USER SVC HERE TO TURN OFF APF AUTHORIZATION, AS WE ARE
* DONE ISSUING COMMANDS.
         SPACE
SVC34END DS    0H                 END OF COMMAND ROUTINE
         BR    R11                RETURN TO MAINLINE
         SPACE 2                                            *CKO 07/92*
NOTAUTH  EQU  *                                             *CKO 07/92*
         TPUT  =CL60'Authorization failed for executing COMMAND',60
         B     BADEOJ                     Exit              *CKO 07/92*
         EJECT
SAVEAREA DC    18F'0'             OUR SAVEAREA
HOLD     DC    F'200'             WAIT FOR 2 SECONDS        *HMD 07/81*
R0MASK   DC    A(0)               R0 MASK FOR SVC34
AUTHFLG  DC    X'00'              AUTHORIZATION FLAG        *HMD 07/82*
AUTHUS   EQU   X'FF'              WE AUTHORIZED FOR SVC34   *HMD 07/82*
MOREFLG  DC    X'00'              EXTRA FILLER              *HMD 07/82*
ASID     DC    H'00'              OUR ASID
* Parms for RACHECK                                         *CKO 07/92*
CMDENT   DC    CL8'COMMAND'                                 *CKO 07/92*
CMDCLS   DC    AL1(4),C'APPL'                               *CKO 07/92*
         SPACE
         CNOP  4,8                ALIGN TO MIDDLE OF DOUBLE WORD
CMDLIST  DC    AL2(*-*,0)         SVC 34 LIST
CARD     DC    CL101' '           COMMAND TEXT
         SPACE 3
MOVE     MVC   CARD(*-*),2(R10)   MOVE PARM TEXT INTO SVC 34 LIST
MOVE1    MVC   CARD(*-*),0(R4)    MOVE PARM TEXT INTO SVC 34 LIST
         EJECT
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,LRECL=80,MACRF=(GM),RECFM=FB,     *
               EODAD=EODSYSIN
MSG1     WTO 'SYSTEMS PROGRAMMER BRIAN COURT ISSUES THE FOLLOWING COMMAX
               ND:',MF=L
MSG2     WTO '                                                         X
                                                          ',MF=L
WTOCMD   EQU MSG2+4
         EJECT
         LTORG                    BEGIN LITERAL POOL
         EJECT
***********************************************************************
*                                                                     *
*                SYSTEM CONTROL BLOCK MAPPING DSECTS                  *
*                                                                     *
*      ALL THESE MACROS CAN BE FOUND IN THE 'SYS1.AMODGEN' MACLIB     *
*                                                                     *
***********************************************************************
         CVT   DSECT=YES,LIST=YES COMMUNICATIONS VECTOR TABLE
         EJECT
         IHAASCB                  ADDRESS SPACE CONTROL BLOCK
         EJECT
         IEECUCM  FORMAT=NEW      UNIT CONTROL MODULE       *HMD 07/81*
         EJECT                                              *HMD 07/81*
         DCBD  DSORG=PS,DEVD=DA   DCB SYMBOLIC DEFN         *HMD 07/81*
         END
//L.SYSLMOD DD  DSN=SYSOSG.CSULOAD(COMMAND),DISP=SHR,UNIT=
./ ADD NAME=STAGE1   0100-02365-02365-0941-00081-00081-00000-JMILLER
//EGTLJCMA JOB (0),JMILLER,MSGCLASS=X,CLASS=A,NOTIFY=EGTLJCM
//*-------------------------------------------------------------------*
//* ASSEMBLE STAGE 1 MACRO FOR RESCUE SYSTEM (OS/390)                 *
//*-------------------------------------------------------------------*
//ASM      EXEC  PGM=IEV90,PARM='DECK,NOOBJECT'
//SYSLIB   DD  DSN=OS390.RESCUE,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(10,10))
//SYSPUNCH DD  DSN=OS390.RESCUE(STAGE2),DISP=SHR
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DATA,DLM=@@
*---------------------------------------------------------------------*
* S T A G E   1    S O U R C E    F O L L O W S:                      *
*---------------------------------------------------------------------*
* JOBCARD TO BE USED ON GENERATED JOBS                                *
*---------------------------------------------------------------------*
         @JOBCARD
//EGTLJCM  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
*---------------------------------------------------------------------*
* USER DEFINED DATASETS TO BE GENERATED ON NEW VOLUME                 *
*---------------------------------------------------------------------*
* LINK LIBRARIES
*---------------------------------------------------------------------*
  @DATASET CYL,0002,0001,050,C,SYS2.LINKLIB,RLSE,,(LNK,APF)
  @DATASET CYL,0002,0000,050,C,SYSOSG.CSULOAD,RLSE,,(LNK,APF)
*---------------------------------------------------------------------*
* LPALST LIBRARIES
*---------------------------------------------------------------------*
  @DATASET CYL,0016,0001,150,C,TCPIP.SEZALPA,RLSE,,(LPA,APF)
*---------------------------------------------------------------------*
* IODEF LIBRARY (HCD)
*---------------------------------------------------------------------*
  @DATASET CYL,0000,0000,000,D,SYS1.IODF02.CLUSTER
*---------------------------------------------------------------------*
* OTHER LIBRARIES
*---------------------------------------------------------------------*
  @DATASET CYL,0001,0001,050,C,SYS3.CLIST,,,(SYSPROC)
  @DATASET CYL,0002,0001,050,C,SYS2.PROCLIB,,,(JES2)
  @DATASET CYL,0005,0001,075,C,SYS2.CSL.LOADLIB,,,(APF)
  @DATASET CYL,0002,0001,050,C,SYSOSG.PROCLIB,,,(JES2)
*---------------------------------------------------------------------*
* MEMBERS TO BE COPIED                                                *
*---------------------------------------------------------------------*
*  PARMLIB  -
  @COPY SRCLIB=OS390.RESCUE,TGTLIB=SYS1.PARMLIB
  @COPY MEMBER=XXCOMMND,NEWMEM=COMMND00
  @COPY MEMBER=XXIEASYS,NEWMEM=IEASYS00
  @COPY MEMBER=XXIEFSSN,NEWMEM=IEFSSN00
  @COPY MEMBER=XXIKJTSO,NEWMEM=IKJTSO00
  @COPY MEMBER=XXJESPRM,NEWMEM=JESPRM00
  @COPY MEMBER=XXLOAD00,NEWMEM=LOAD00
  @COPY MEMBER=XXSMFPRM,NEWMEM=SMFPRM00
  @COPY MEMBER=XXVATLST,NEWMEM=VATLST00
*  VTAMLST
  @COPY TGTLIB=CNM.VTAMLST
  @COPY MEMBER=XXATCSTR,NEWMEM=ATCSTR00
  @COPY MEMBER=XXATCCON,NEWMEM=ATCCON00
*--------------------------------------------------------------------*
* GENERATE JCL FOR TEST IPL SYSTEM                                   *
*--------------------------------------------------------------------*
GOFORIT @TSTVOL UADS=N,                                                X
               RACF=Y,                                                 X
               JOBS=ABCDEFG,                                           X
               USR1=IBMUSER,                                           X
               USR2=EGTLJCM,                                           X
               USR3=EGTLKFT,                                           X
               RACFDS=SYS1.RACFP1,                                     X
               TAPEUNT=CART,                                           X
               UNITADR=E4B,                                            X
               DEVT=3380,                                              X
               CATALOG=CATALOG.RESCUE,                                 X
               VOLUME=RESCUE,                                          X
               DUMP=N,                                                 X
               WAIT=Y,                                                 X
               MASTRCAT=CATALOG.CSU.MASTER,                            X
               MCATVOL=CSUCAT,                                         X
               STEPCAT=,                                               X
               OWNER=RESCUE,                                           X
               SYSRES=SYSRS3
          END
@@
./ ADD NAME=STAGE2   0100-02365-02365-0941-02014-02014-00000-JMILLER
//EGTLJCMA  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
//*=========================================================*
//* JOB - A   11.03 09/25/97
//*---------------------------------------------------------*
//*  STEP    ¦       PURPOSE
//*---------------------------------------------------------*
//* EXPORTD  ¦  DISCONNECTS TEST SYSTEM MASTER CATALOG
//* OFFLINE  ¦  VARIES DEVICE E4B OFFLINE
//* DSFINIT  ¦  INITIALIZES DASD VOLUME USING ICKDSF
//*---------------------------------------------------------*
//*    N O T E : : :
//*    BE SURE THAT DEVICE E4B IS OFFLINE BEFORE THIS
//*    JOB IS RELEASED.
//*----------------------------------------------------------
//EXPORTD  EXEC  PGM=IDCAMS,REGION=1M
//SYSPRINT DD SYSOUT=*
//SYSIN    DD *
   EXPORT CATALOG.RESCUE -
          DISCONNECT
   SET MAXCC=0
/*
//*---------------------------------------------------------*
//* OFFLINE  ¦  VARY DEVICE E4B OFFLINE
//*---------------------------------------------------------*
//OFFLINE  EXEC PGM=COMMAND
//SYSIN    DD *
V E4B,OFFLINE
/*
//*---------------------------------------------------------*
//* WAIT     ¦  WAIT 5 SECONDS FOR VARY TO COMPLETE
//*---------------------------------------------------------*
//WAIT     EXEC PGM=WAIT,PARM=5
/*
//*---------------------------------------------------------*
//* DEALLOC ¦  START DUMMY DEALLOC TASK
//*---------------------------------------------------------*
//DEALLOC EXEC PGM=COMMAND
//SYSIN    DD *
S DEALLOC
/*
//*---------------------------------------------------------*
//* WAIT     ¦  WAIT 5 SECONDS FOR DEALLOC TO COMPLETE
//*---------------------------------------------------------*
//WAIT     EXEC PGM=WAIT,PARM=5
/*
//*---------------------------------------------------------*
//* DSFINIT  ¦  INITIALIZES DASD VOLUME USING ICKDSF
//*---------------------------------------------------------*
//DSFINIT  EXEC PGM=ICKDSF
//IPLTEXT  DD DISP=SHR,VOL=SER=SYSRS3,UNIT=SYSDA,
//            DSN=SYS1.SAMPLIB(IPLRECS)
//         DD DISP=SHR,VOL=SER=SYSRS3,UNIT=SYSDA,
//            DSN=SYS1.SAMPLIB(IEAIPL00)
//SYSPRINT DD   SYSOUT=*
//SYSIN    DD   *
 INIT   UNIT(E4B) -
        VOLID(RESCUE) -
        OWNERID(RESCUE) -
        VTOC(0,1,14) -
        PURGE -
        MAP -
        NOVERIFY -
        NOVALIDATE -
        NOCHECK -
        IPLDD(IPLTEXT) -
        NOBOOTSTRAP
/*
//EGTLJCMB  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
//*=========================================================*
//* JOB - B   11.03 09/25/97
//*---------------------------------------------------------*
//*  STEP    ¦       PURPOSE
//*---------------------------------------------------------*
//* ONLINE   ¦  VARY DEVICE E4B ONLINE AND MOUNT RESCUE
//* DEFMCAT  ¦  DELETE AND RECREATE VVDS
//*          ¦  DEFINE TEST SYSTEM MASTER CATALOG
//* DEFVSAM  ¦  DEFINE ALL VSAM DS NEEDED FOR IPL
//* DEFNVSAM ¦  DEFINE ALL NON VSAM CATALOG ENTRIES
//*---------------------------------------------------------*
//* ONLINE   ¦  VARY DEVICE E4B ONLINE AND MOUNT RESCUE
//*---------------------------------------------------------*
//OFFLINE  EXEC PGM=COMMAND
//SYSIN    DD *
V E4B,ONLINE
M E4B,VOL=(SL,RESCUE),USE=PRIVATE
/*
//*---------------------------------------------------------*
//* DEFMCAT  ¦  DELETE AND RECREATE VVDS, DEFINE NEW MCAT
//*---------------------------------------------------------*
//DEFMCAT  EXEC PGM=IDCAMS,REGION=2M
//SYSPRINT DD   SYSOUT=*
//TARGET   DD   DISP=SHR,UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD   *
 DELETE -
         SYS1.VVDS.VRESCUE -
           FILE(TARGET)  -
           CLUSTER -
           PURGE -
       CATALOG(CATALOG.CSU.MASTER)
 SET MAXCC=0

 DEFINE CLUSTER ( -
           NAME(SYS1.VVDS.VRESCUE) -
           CYL(1,1) -
           VOL(RESCUE) -
           FILE(TARGET) -
           NONINDEXED -
           OWNER(RESCUE) -
         ) -
       CATALOG(CATALOG.CSU.MASTER)

 DEFINE USERCATALOG   ( -
           NAME(CATALOG.RESCUE) -
           CYL(5 2) -
           VOL(RESCUE) -
           BUFFERSPACE(8192) -
           BUFND(10) -
           BUFNI(10) -
           FILE(TARGET) -
           ICFCATALOG -
           OWNER(RESCUE) -
           STRNO(9) -
                      ) -
       CATALOG(CATALOG.CSU.MASTER)
/*
//*---------------------------------------------------------*
//* DEFVSAM  ¦  DEFINE VSAM DATASETS
//*---------------------------------------------------------*
//DEFVSAM  EXEC PGM=IDCAMS,REGION=2M,COND=(0,LT)
//STEPCAT  DD  DSN=CATALOG.RESCUE,DISP=SHR
//SYSPRINT DD  SYSOUT=*
//TARGET   DD  DISP=SHR,UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD   *
  DEFINE CLUSTER ( -
            NAME( SYS1.STGINDEX ) -
            CYL(5) -
            VOL(RESCUE) -
            BUFFERSPACE(20480) -
            FILE(TARGET) -
            KEYS(12 8) -
            OWNER(RESCUE) -
            RECORDSIZE(2041,2041) -
            REUSE ) -
         DATA ( -
            NAME( SYS1.STGINDEX.DATA ) -
            CISZ(2048) ) -
         INDEX ( -
            NAME( SYS1.STGINDEX.INDEX ) -
            CISZ(1024) ) -
         CATALOG(CATALOG.RESCUE)

 DEFINE PAGESPACE ( -
            NAME( PAGE.RESCUE.PLPA) -
               CYL(150) -
               VOL(RESCUE) -
               FILE(TARGET) -
               OWNER(RESCUE) -
               NOSWAP -
               UNIQUE ) -
            CATALOG(CATALOG.RESCUE)

 DEFINE PAGESPACE ( -
            NAME( PAGE.RESCUE.COMMON) -
               CYL(150) -
               VOL(RESCUE) -
               FILE(TARGET) -
               OWNER(RESCUE) -
               NOSWAP -
               UNIQUE ) -
            CATALOG(CATALOG.RESCUE)

 DEFINE PAGESPACE ( -
            NAME( PAGE.RESCUE.LOCAL1) -
               CYL(150) -
               VOL(RESCUE) -
               FILE(TARGET) -
               OWNER(RESCUE) -
               NOSWAP -
               UNIQUE ) -
            CATALOG(CATALOG.RESCUE)

 DEFINE CLUSTER ( -
            NAME( SYS1.MAN1 ) -
               CYL(10) -
               VOL(RESCUE) -
               CISZ(4096) -
               FILE(TARGET) -
               NONINDEXED -
               OWNER(RESCUE) -
               RECORDSIZE(4086 32767) -
               REUSE   SHR(2 3) -
               SPANNED  SPEED ) -
         DATA ( -
                 NAME( SYS1.MAN1.VDATA) ) -
         CATALOG(CATALOG.RESCUE)

 DEFINE CLUSTER ( -
            NAME( SYS1.MAN2 ) -
               CYL(10) -
               VOL(RESCUE) -
               CISZ(4096) -
               FILE(TARGET) -
               NONINDEXED -
               OWNER(RESCUE) -
               RECORDSIZE(4086 32767) -
               REUSE   SHR(2 3) -
               SPANNED  SPEED ) -
         DATA ( -
                 NAME( SYS1.MAN2.VDATA) ) -
         CATALOG(CATALOG.RESCUE)

 IMPORT CONNECT -
        OBJECTS( -
        (CATALOG.CSU.MASTER  -
        VOLUME(CSUCAT) -
        DEVT(3380) )) -
        CATALOG(CATALOG.RESCUE)

/*
//*---------------------------------------------------------*
//* DEFNVSAM ¦  DEFINE NON VSAM CATALOG ENTRIES
//*---------------------------------------------------------*
//DEFNVSAM EXEC PGM=IDCAMS,REGION=3M,COND=(0,LT)
//STEPCAT   DD  DSN=CATALOG.RESCUE,DISP=SHR
//SYSPRINT  DD  SYSOUT=*
//SYSIN     DD  *
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS2.LINKLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYSOSG.CSULOAD) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.TCPIP.SEZALPA) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.IODF02.CLUSTER) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS3.CLIST) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS2.PROCLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS2.CSL.LOADLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYSOSG.PROCLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.CMDLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DAE) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HELP) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.IMAGELIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.CSSLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.LINKLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.V1R3M0.SHASLINK) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.LPALIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.MACLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.MIGLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.NUCLEUS) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.PARMLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.PROCLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.SAMPLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.SVCLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.UADS) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.BRODCAST) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HASPCKPT) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HASPACE) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.CPAC.LOGREC) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DUMP00) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DUMP01) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.RACFP1) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HRFCLST) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HRFMSG) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HRFPANL) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.HRFSKEL) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DGTCLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DGTLLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DGTMLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DGTPLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DGTSLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DGTTLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DUTLOAD) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.DUTPLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.HASPINDX) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFLINK) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFLOAD) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFLPA) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFMLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFPLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFTLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFSLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISF.SISFSRC) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPLPA) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPLOAD) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPMENU) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPPENU) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPSENU) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPSLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.ISP.SISPTENU) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.CNM.VTAMLST) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.CNM.VTAMLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.VTAMLST) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.VTAMLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.SYS1.SISTCLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.NCP5.LOADLIB) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.IBMUSER.ISPF.ISPPROF) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.EGTLJCM.ISPF.ISPPROF) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
 DEFINE NONVSAM ( -
    NAME(SYSX.EGTLKFT.ISPF.ISPPROF) -
    OWNER(RESCUE) DEVT(3380) VOL(RESCUE)) -
    CATALOG(CATALOG.RESCUE)
//*
//EGTLJCMC  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
//*=========================================================*
//* JOB - C   11.03 09/25/97
//*---------------------------------------------------------*
//*  STEP    ¦       PURPOSE
//*---------------------------------------------------------*
//*  ALLOC   ¦  ALLOCATES NONVSAM DATASETS
//*  LOADNNN ¦  COPIES NONVSAM PDS DSNS
//*  COPYNNN ¦  COPIES MEMBERS FROM SOURCE TO TARGET SYSTEM
//*---------------------------------------------------------*
//*  ALLOC -
//*---------------------------------------------------------*
//ALLOC   EXEC PGM=IEFBR14,REGION=4M
//LINKLIB  DD DISP=(,KEEP),DSN=SYSX.SYS2.LINKLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS2.LINKLIB),
//    SPACE=(CYL,(0002,0001,050),RLSE)
//CSULOAD  DD DISP=(,KEEP),DSN=SYSX.SYSOSG.CSULOAD,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYSOSG.CSULOAD),
//    SPACE=(CYL,(0002,0000,050),RLSE)
//SEZALPA  DD DISP=(,KEEP),DSN=SYSX.TCPIP.SEZALPA,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(TCPIP.SEZALPA),
//    SPACE=(CYL,(0016,0001,150),RLSE)
//CLIST    DD DISP=(,KEEP),DSN=SYSX.SYS3.CLIST,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS3.CLIST),
//    SPACE=(CYL,(0001,0001,050))
//PROCLIB  DD DISP=(,KEEP),DSN=SYSX.SYS2.PROCLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS2.PROCLIB),
//    SPACE=(CYL,(0002,0001,050))
//LOADLIB  DD DISP=(,KEEP),DSN=SYSX.SYS2.CSL.LOADLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS2.CSL.LOADLIB),
//    SPACE=(CYL,(0005,0001,075))
//PROCLIB  DD DISP=(,KEEP),DSN=SYSX.SYSOSG.PROCLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYSOSG.PROCLIB),
//    SPACE=(CYL,(0002,0001,050))
//CMDLIB   DD DISP=(,KEEP),DSN=SYSX.SYS1.CMDLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.CMDLIB),
//    SPACE=(CYL,(0005,000,150))
//DAE      DD DISP=(,KEEP),DSN=SYSX.SYS1.DAE,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DAE),
//    SPACE=(CYL,(0001,000,000))
//HELP     DD DISP=(,KEEP),DSN=SYSX.SYS1.HELP,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HELP),
//    SPACE=(CYL,(0008,001,150))
//IMAGELIB DD DISP=(,KEEP),DSN=SYSX.SYS1.IMAGELIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.IMAGELIB),
//    SPACE=(CYL,(0002,000,150))
//CSSLIB   DD DISP=(,KEEP),DSN=SYSX.SYS1.CSSLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.CSSLIB),
//    SPACE=(CYL,(0005,001,150),RLSE)
//LINKLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.LINKLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.LINKLIB),
//    SPACE=(CYL,(0200,000,650),RLSE)
//SHASLINK DD DISP=(,KEEP),DSN=SYSX.SYS1.V1R3M0.SHASLINK,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.V1R3M0.SHASLINK),
//    SPACE=(CYL,(0010,001,025))
//LPALIB   DD DISP=(,KEEP),DSN=SYSX.SYS1.LPALIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.LPALIB),
//    SPACE=(CYL,(0090,000,550),RLSE)
//MACLIB   DD DISP=(,KEEP),DSN=SYSX.SYS1.MACLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.MACLIB),
//    SPACE=(CYL,(0140,005,350),RLSE)
//MIGLIB   DD DISP=(,KEEP),DSN=SYSX.SYS1.MIGLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.MIGLIB),
//    SPACE=(CYL,(0020,001,250),RLSE)
//NUCLEUS  DD DISP=(,KEEP),DSN=SYSX.SYS1.NUCLEUS,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.NUCLEUS),
//    SPACE=(CYL,(0040,000,250))
//PARMLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.PARMLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.PARMLIB),
//    SPACE=(CYL,(0002,000,050))
//PROCLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.PROCLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.PROCLIB),
//    SPACE=(CYL,(0002,001,150))
//SAMPLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.SAMPLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.SAMPLIB),
//    SPACE=(CYL,(0050,001,250))
//SVCLIB   DD DISP=(,KEEP),DSN=SYSX.SYS1.SVCLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.SVCLIB),
//    SPACE=(CYL,(0002,001,150))
//UADS     DD DISP=(,KEEP),DSN=SYSX.SYS1.UADS,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.UADS),
//    SPACE=(CYL,(0002,001,150))
//BRODCAST DD DISP=(,KEEP),DSN=SYSX.SYS1.BRODCAST,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.BRODCAST),
//    SPACE=(CYL,(0003,000,000))
//HASPCKPT DD DISP=(,KEEP),DSN=SYSX.SYS1.HASPCKPT,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HASPCKPT),
//    SPACE=(CYL,(0003,000,000))
//HASPACE  DD DISP=(,KEEP),DSN=SYSX.SYS1.HASPACE,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HASPACE),
//    SPACE=(CYL,(0060,000,000))
//LOGREC   DD DISP=(,KEEP),DSN=SYSX.SYS1.CPAC.LOGREC,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.CPAC.LOGREC),
//    SPACE=(CYL,(0010,000,000))
//DUMP00   DD DISP=(,KEEP),DSN=SYSX.SYS1.DUMP00,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DUMP00),
//    SPACE=(CYL,(0060,000,000))
//DUMP01   DD DISP=(,KEEP),DSN=SYSX.SYS1.DUMP01,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DUMP01),
//    SPACE=(CYL,(0060,000,000))
//RACFP1   DD DISP=(,KEEP),DSN=SYSX.SYS1.RACFP1,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.RACFP1),
//    SPACE=(CYL,(0010,000,000))
//HRFCLST  DD DISP=(,KEEP),DSN=SYSX.SYS1.HRFCLST,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HRFCLST),
//    SPACE=(CYL,(0002,001,150))
//HRFMSG   DD DISP=(,KEEP),DSN=SYSX.SYS1.HRFMSG,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HRFMSG),
//    SPACE=(CYL,(0002,001,150))
//HRFPANL  DD DISP=(,KEEP),DSN=SYSX.SYS1.HRFPANL,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HRFPANL),
//    SPACE=(CYL,(0002,001,150))
//HRFSKEL  DD DISP=(,KEEP),DSN=SYSX.SYS1.HRFSKEL,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.HRFSKEL),
//    SPACE=(CYL,(0002,001,150))
//DGTCLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DGTCLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DGTCLIB),
//    SPACE=(CYL,(0001,001,095))
//DGTLLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DGTLLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DGTLLIB),
//    SPACE=(CYL,(0010,001,095))
//DGTMLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DGTMLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DGTMLIB),
//    SPACE=(CYL,(0002,001,095))
//DGTPLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DGTPLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DGTPLIB),
//    SPACE=(CYL,(0033,001,350))
//DGTSLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DGTSLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DGTSLIB),
//    SPACE=(CYL,(0002,001,095))
//DGTTLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DGTTLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DGTTLIB),
//    SPACE=(CYL,(0001,001,095))
//DUTLOAD  DD DISP=(,KEEP),DSN=SYSX.SYS1.DUTLOAD,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DUTLOAD),
//    SPACE=(CYL,(0002,001,095))
//DUTPLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.DUTPLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.DUTPLIB),
//    SPACE=(CYL,(0003,001,095))
//HASPINDX DD DISP=(,KEEP),DSN=SYSX.ISF.HASPINDX,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.HASPINDX),
//    SPACE=(CYL,(0001,000,000))
//SISFLINK DD DISP=(,KEEP),DSN=SYSX.ISF.SISFLINK,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFLINK),
//    SPACE=(CYL,(0001,001,150))
//SISFLOAD DD DISP=(,KEEP),DSN=SYSX.ISF.SISFLOAD,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFLOAD),
//    SPACE=(CYL,(0005,001,050))
//SISFLPA  DD DISP=(,KEEP),DSN=SYSX.ISF.SISFLPA,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFLPA),
//    SPACE=(CYL,(0001,001,025))
//SISFMLIB DD DISP=(,KEEP),DSN=SYSX.ISF.SISFMLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFMLIB),
//    SPACE=(CYL,(0001,001,150))
//SISFPLIB DD DISP=(,KEEP),DSN=SYSX.ISF.SISFPLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFPLIB),
//    SPACE=(CYL,(0002,001,150))
//SISFTLIB DD DISP=(,KEEP),DSN=SYSX.ISF.SISFTLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFTLIB),
//    SPACE=(CYL,(0001,001,150))
//SISFSLIB DD DISP=(,KEEP),DSN=SYSX.ISF.SISFSLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFSLIB),
//    SPACE=(CYL,(0001,001,150))
//SISFSRC  DD DISP=(,KEEP),DSN=SYSX.ISF.SISFSRC,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISF.SISFSRC),
//    SPACE=(CYL,(0015,001,150))
//SISPLPA  DD DISP=(,KEEP),DSN=SYSX.ISP.SISPLPA,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPLPA),
//    SPACE=(CYL,(0035,0001,075))
//SISPLOAD DD DISP=(,KEEP),DSN=SYSX.ISP.SISPLOAD,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPLOAD),
//    SPACE=(CYL,(0008,0001,075))
//SISPMENU DD DISP=(,KEEP),DSN=SYSX.ISP.SISPMENU,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPMENU),
//    SPACE=(CYL,(0003,0001,150))
//SISPPENU DD DISP=(,KEEP),DSN=SYSX.ISP.SISPPENU,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPPENU),
//    SPACE=(CYL,(0025,0001,200))
//SISPSENU DD DISP=(,KEEP),DSN=SYSX.ISP.SISPSENU,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPSENU),
//    SPACE=(CYL,(0006,0001,125))
//SISPSLIB DD DISP=(,KEEP),DSN=SYSX.ISP.SISPSLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPSLIB),
//    SPACE=(CYL,(0002,0001,125))
//SISPTENU DD DISP=(,KEEP),DSN=SYSX.ISP.SISPTENU,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(ISP.SISPTENU),
//    SPACE=(CYL,(0001,0001,125))
//VTAMLST  DD DISP=(,KEEP),DSN=SYSX.CNM.VTAMLST,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(CNM.VTAMLST),
//    SPACE=(CYL,(0001,0001,125))
//VTAMLIB  DD DISP=(,KEEP),DSN=SYSX.CNM.VTAMLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(CNM.VTAMLIB),
//    SPACE=(CYL,(0001,0001,125))
//VTAMLST  DD DISP=(,KEEP),DSN=SYSX.SYS1.VTAMLST,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.VTAMLST),
//    SPACE=(CYL,(0005,0001,125))
//VTAMLIB  DD DISP=(,KEEP),DSN=SYSX.SYS1.VTAMLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.VTAMLIB),
//    SPACE=(CYL,(0005,0001,125))
//SISTCLIB DD DISP=(,KEEP),DSN=SYSX.SYS1.SISTCLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(SYS1.SISTCLIB),
//    SPACE=(CYL,(0050,0001,125))
//LOADLIB  DD DISP=(,KEEP),DSN=SYSX.NCP5.LOADLIB,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(NCP5.LOADLIB),
//    SPACE=(CYL,(0007,0001,125))
//ISPPROF  DD DISP=(,KEEP),DSN=SYSX.IBMUSER.ISPF.ISPPROF,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(IBMUSER.ISPF.ISPPROF),
//    SPACE=(CYL,(0001,0000,050))
//ISPPROF  DD DISP=(,KEEP),DSN=SYSX.EGTLJCM.ISPF.ISPPROF,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(EGTLJCM.ISPF.ISPPROF),
//    SPACE=(CYL,(0001,0000,050))
//ISPPROF  DD DISP=(,KEEP),DSN=SYSX.EGTLKFT.ISPF.ISPPROF,
//    UNIT=3380,VOL=SER=RESCUE,DCB=(EGTLKFT.ISPF.ISPPROF),
//    SPACE=(CYL,(0001,0000,050))
//*---------------------------------------------------------*
//*  LOAD001 - IEBCOPY SYS2.LINKLIB
//*---------------------------------------------------------*
//LOAD001 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ILINKLIB  DD DISP=SHR,DSN=SYS2.LINKLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OLINKLIB  DD DISP=SHR,DSN=SYSX.SYS2.LINKLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ILINKLIB,O=OLINKLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD002 - IEBCOPY SYSOSG.CSULOAD
//*---------------------------------------------------------*
//LOAD002 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ICSULOAD  DD DISP=SHR,DSN=SYSOSG.CSULOAD,
//          UNIT=SYSALLDA,VOL=SER=
//OCSULOAD  DD DISP=SHR,DSN=SYSX.SYSOSG.CSULOAD,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ICSULOAD,O=OCSULOAD,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD003 - IEBCOPY TCPIP.SEZALPA
//*---------------------------------------------------------*
//LOAD003 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISEZALPA  DD DISP=SHR,DSN=TCPIP.SEZALPA,
//          UNIT=SYSALLDA,VOL=SER=
//OSEZALPA  DD DISP=SHR,DSN=SYSX.TCPIP.SEZALPA,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISEZALPA,O=OSEZALPA,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD004 - DFDSS SYS1.IODF02.CLUSTER
//*---------------------------------------------------------*
//LOAD004 EXEC PGM=ADRDSSU,REGION=4M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD *
  COPY -
  DATASET( -
     INCLUDE( -
        SYS1.IODF02.CLUSTER -
            ) ) -
  REPLACE    -
  ALLDATA(*) -
  TOL(ENQF) -
  PROCESS(SYS1)  -
  RECATALOG(CATALOG.RESCUE) -
  OUTDYNAM(RESCUE)  -
  SHARE
//*
//*---------------------------------------------------------*
//*  LOAD005 - IEBCOPY SYS3.CLIST
//*---------------------------------------------------------*
//LOAD005 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ICLIST    DD DISP=SHR,DSN=SYS3.CLIST,
//          UNIT=SYSALLDA,VOL=SER=
//OCLIST    DD DISP=SHR,DSN=SYSX.SYS3.CLIST,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ICLIST,O=OCLIST,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD006 - IEBCOPY SYS2.PROCLIB
//*---------------------------------------------------------*
//LOAD006 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IPROCLIB  DD DISP=SHR,DSN=SYS2.PROCLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OPROCLIB  DD DISP=SHR,DSN=SYSX.SYS2.PROCLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IPROCLIB,O=OPROCLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD007 - IEBCOPY SYS2.CSL.LOADLIB
//*---------------------------------------------------------*
//LOAD007 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ILOADLIB  DD DISP=SHR,DSN=SYS2.CSL.LOADLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OLOADLIB  DD DISP=SHR,DSN=SYSX.SYS2.CSL.LOADLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ILOADLIB,O=OLOADLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD008 - IEBCOPY SYSOSG.PROCLIB
//*---------------------------------------------------------*
//LOAD008 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IPROCLIB  DD DISP=SHR,DSN=SYSOSG.PROCLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OPROCLIB  DD DISP=SHR,DSN=SYSX.SYSOSG.PROCLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IPROCLIB,O=OPROCLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD009 - IEBCOPY SYS1.CMDLIB
//*---------------------------------------------------------*
//LOAD009 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ICMDLIB   DD DISP=SHR,DSN=SYS1.CMDLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OCMDLIB   DD DISP=SHR,DSN=SYSX.SYS1.CMDLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ICMDLIB,O=OCMDLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD010 - ICEGENER SYS1.DAE
//*---------------------------------------------------------*
//LOAD010 EXEC PGM=ICEGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT1    DD DISP=SHR,DSN=SYS1.DAE,
//          UNIT=SYSALLDA,VOL=SER=
//SYSUT2    DD DISP=SHR,DSN=SYSX.SYS1.DAE,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN     DD DUMMY
//*
//*---------------------------------------------------------*
//*  LOAD011 - IEBCOPY SYS1.HELP
//*---------------------------------------------------------*
//LOAD011 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IHELP     DD DISP=SHR,DSN=SYS1.HELP,
//          UNIT=SYSALLDA,VOL=SER=
//OHELP     DD DISP=SHR,DSN=SYSX.SYS1.HELP,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IHELP,O=OHELP,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD012 - IEBCOPY SYS1.IMAGELIB
//*---------------------------------------------------------*
//LOAD012 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IIMAGELI  DD DISP=SHR,DSN=SYS1.IMAGELIB,
//          UNIT=SYSALLDA,VOL=SER=
//OIMAGELI  DD DISP=SHR,DSN=SYSX.SYS1.IMAGELIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IIMAGELI,O=OIMAGELI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD013 - IEBCOPY SYS1.CSSLIB
//*---------------------------------------------------------*
//LOAD013 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ICSSLIB   DD DISP=SHR,DSN=SYS1.CSSLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OCSSLIB   DD DISP=SHR,DSN=SYSX.SYS1.CSSLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ICSSLIB,O=OCSSLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD014 - IEBCOPY SYS1.LINKLIB
//*---------------------------------------------------------*
//LOAD014 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ILINKLIB  DD DISP=SHR,DSN=SYS1.LINKLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OLINKLIB  DD DISP=SHR,DSN=SYSX.SYS1.LINKLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ILINKLIB,O=OLINKLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD015 - IEBCOPY SYS1.V1R3M0.SHASLINK
//*---------------------------------------------------------*
//LOAD015 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISHASLIN  DD DISP=SHR,DSN=SYS1.V1R3M0.SHASLINK,
//          UNIT=SYSALLDA,VOL=SER=
//OSHASLIN  DD DISP=SHR,DSN=SYSX.SYS1.V1R3M0.SHASLINK,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISHASLIN,O=OSHASLIN,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD016 - IEBCOPY SYS1.LPALIB
//*---------------------------------------------------------*
//LOAD016 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ILPALIB   DD DISP=SHR,DSN=SYS1.LPALIB,
//          UNIT=SYSALLDA,VOL=SER=
//OLPALIB   DD DISP=SHR,DSN=SYSX.SYS1.LPALIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ILPALIB,O=OLPALIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD017 - IEBCOPY SYS1.MACLIB
//*---------------------------------------------------------*
//LOAD017 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IMACLIB   DD DISP=SHR,DSN=SYS1.MACLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OMACLIB   DD DISP=SHR,DSN=SYSX.SYS1.MACLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IMACLIB,O=OMACLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD018 - IEBCOPY SYS1.MIGLIB
//*---------------------------------------------------------*
//LOAD018 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IMIGLIB   DD DISP=SHR,DSN=SYS1.MIGLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OMIGLIB   DD DISP=SHR,DSN=SYSX.SYS1.MIGLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IMIGLIB,O=OMIGLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD019 - IEBCOPY SYS1.NUCLEUS
//*---------------------------------------------------------*
//LOAD019 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//INUCLEUS  DD DISP=SHR,DSN=SYS1.NUCLEUS,
//          UNIT=SYSALLDA,VOL=SER=
//ONUCLEUS  DD DISP=SHR,DSN=SYSX.SYS1.NUCLEUS,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=INUCLEUS,O=ONUCLEUS,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD020 - IEBCOPY SYS1.PARMLIB
//*---------------------------------------------------------*
//LOAD020 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IPARMLIB  DD DISP=SHR,DSN=SYS1.PARMLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OPARMLIB  DD DISP=SHR,DSN=SYSX.SYS1.PARMLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IPARMLIB,O=OPARMLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD021 - IEBCOPY SYS1.PROCLIB
//*---------------------------------------------------------*
//LOAD021 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IPROCLIB  DD DISP=SHR,DSN=SYS1.PROCLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OPROCLIB  DD DISP=SHR,DSN=SYSX.SYS1.PROCLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IPROCLIB,O=OPROCLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD022 - IEBCOPY SYS1.SAMPLIB
//*---------------------------------------------------------*
//LOAD022 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISAMPLIB  DD DISP=SHR,DSN=SYS1.SAMPLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSAMPLIB  DD DISP=SHR,DSN=SYSX.SYS1.SAMPLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISAMPLIB,O=OSAMPLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD023 - IEBCOPY SYS1.SVCLIB
//*---------------------------------------------------------*
//LOAD023 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISVCLIB   DD DISP=SHR,DSN=SYS1.SVCLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSVCLIB   DD DISP=SHR,DSN=SYSX.SYS1.SVCLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISVCLIB,O=OSVCLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD024 - IEBCOPY SYS1.UADS
//*---------------------------------------------------------*
//LOAD024 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IUADS     DD DISP=SHR,DSN=SYS1.UADS,
//          UNIT=SYSALLDA,VOL=SER=
//OUADS     DD DISP=SHR,DSN=SYSX.SYS1.UADS,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IUADS,O=OUADS,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD032 - IEBCOPY SYS1.HRFCLST
//*---------------------------------------------------------*
//LOAD032 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IHRFCLST  DD DISP=SHR,DSN=SYS1.HRFCLST,
//          UNIT=SYSALLDA,VOL=SER=
//OHRFCLST  DD DISP=SHR,DSN=SYSX.SYS1.HRFCLST,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IHRFCLST,O=OHRFCLST,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD033 - IEBCOPY SYS1.HRFMSG
//*---------------------------------------------------------*
//LOAD033 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IHRFMSG   DD DISP=SHR,DSN=SYS1.HRFMSG,
//          UNIT=SYSALLDA,VOL=SER=
//OHRFMSG   DD DISP=SHR,DSN=SYSX.SYS1.HRFMSG,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IHRFMSG,O=OHRFMSG,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD034 - IEBCOPY SYS1.HRFPANL
//*---------------------------------------------------------*
//LOAD034 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IHRFPANL  DD DISP=SHR,DSN=SYS1.HRFPANL,
//          UNIT=SYSALLDA,VOL=SER=
//OHRFPANL  DD DISP=SHR,DSN=SYSX.SYS1.HRFPANL,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IHRFPANL,O=OHRFPANL,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD035 - IEBCOPY SYS1.HRFSKEL
//*---------------------------------------------------------*
//LOAD035 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IHRFSKEL  DD DISP=SHR,DSN=SYS1.HRFSKEL,
//          UNIT=SYSALLDA,VOL=SER=
//OHRFSKEL  DD DISP=SHR,DSN=SYSX.SYS1.HRFSKEL,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IHRFSKEL,O=OHRFSKEL,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD036 - IEBCOPY SYS1.DGTCLIB
//*---------------------------------------------------------*
//LOAD036 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDGTCLIB  DD DISP=SHR,DSN=SYS1.DGTCLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODGTCLIB  DD DISP=SHR,DSN=SYSX.SYS1.DGTCLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDGTCLIB,O=ODGTCLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD037 - IEBCOPY SYS1.DGTLLIB
//*---------------------------------------------------------*
//LOAD037 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDGTLLIB  DD DISP=SHR,DSN=SYS1.DGTLLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODGTLLIB  DD DISP=SHR,DSN=SYSX.SYS1.DGTLLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDGTLLIB,O=ODGTLLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD038 - IEBCOPY SYS1.DGTMLIB
//*---------------------------------------------------------*
//LOAD038 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDGTMLIB  DD DISP=SHR,DSN=SYS1.DGTMLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODGTMLIB  DD DISP=SHR,DSN=SYSX.SYS1.DGTMLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDGTMLIB,O=ODGTMLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD039 - IEBCOPY SYS1.DGTPLIB
//*---------------------------------------------------------*
//LOAD039 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDGTPLIB  DD DISP=SHR,DSN=SYS1.DGTPLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODGTPLIB  DD DISP=SHR,DSN=SYSX.SYS1.DGTPLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDGTPLIB,O=ODGTPLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD040 - IEBCOPY SYS1.DGTSLIB
//*---------------------------------------------------------*
//LOAD040 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDGTSLIB  DD DISP=SHR,DSN=SYS1.DGTSLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODGTSLIB  DD DISP=SHR,DSN=SYSX.SYS1.DGTSLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDGTSLIB,O=ODGTSLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD041 - IEBCOPY SYS1.DGTTLIB
//*---------------------------------------------------------*
//LOAD041 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDGTTLIB  DD DISP=SHR,DSN=SYS1.DGTTLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODGTTLIB  DD DISP=SHR,DSN=SYSX.SYS1.DGTTLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDGTTLIB,O=ODGTTLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD042 - IEBCOPY SYS1.DUTLOAD
//*---------------------------------------------------------*
//LOAD042 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDUTLOAD  DD DISP=SHR,DSN=SYS1.DUTLOAD,
//          UNIT=SYSALLDA,VOL=SER=
//ODUTLOAD  DD DISP=SHR,DSN=SYSX.SYS1.DUTLOAD,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDUTLOAD,O=ODUTLOAD,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD043 - IEBCOPY SYS1.DUTPLIB
//*---------------------------------------------------------*
//LOAD043 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IDUTPLIB  DD DISP=SHR,DSN=SYS1.DUTPLIB,
//          UNIT=SYSALLDA,VOL=SER=
//ODUTPLIB  DD DISP=SHR,DSN=SYSX.SYS1.DUTPLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IDUTPLIB,O=ODUTPLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD045 - IEBCOPY ISF.SISFLINK
//*---------------------------------------------------------*
//LOAD045 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFLIN  DD DISP=SHR,DSN=ISF.SISFLINK,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFLIN  DD DISP=SHR,DSN=SYSX.ISF.SISFLINK,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFLIN,O=OSISFLIN,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD046 - IEBCOPY ISF.SISFLOAD
//*---------------------------------------------------------*
//LOAD046 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFLOA  DD DISP=SHR,DSN=ISF.SISFLOAD,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFLOA  DD DISP=SHR,DSN=SYSX.ISF.SISFLOAD,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFLOA,O=OSISFLOA,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD047 - IEBCOPY ISF.SISFLPA
//*---------------------------------------------------------*
//LOAD047 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFLPA  DD DISP=SHR,DSN=ISF.SISFLPA,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFLPA  DD DISP=SHR,DSN=SYSX.ISF.SISFLPA,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFLPA,O=OSISFLPA,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD048 - IEBCOPY ISF.SISFMLIB
//*---------------------------------------------------------*
//LOAD048 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFMLI  DD DISP=SHR,DSN=ISF.SISFMLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFMLI  DD DISP=SHR,DSN=SYSX.ISF.SISFMLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFMLI,O=OSISFMLI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD049 - IEBCOPY ISF.SISFPLIB
//*---------------------------------------------------------*
//LOAD049 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFPLI  DD DISP=SHR,DSN=ISF.SISFPLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFPLI  DD DISP=SHR,DSN=SYSX.ISF.SISFPLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFPLI,O=OSISFPLI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD050 - IEBCOPY ISF.SISFTLIB
//*---------------------------------------------------------*
//LOAD050 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFTLI  DD DISP=SHR,DSN=ISF.SISFTLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFTLI  DD DISP=SHR,DSN=SYSX.ISF.SISFTLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFTLI,O=OSISFTLI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD051 - IEBCOPY ISF.SISFSLIB
//*---------------------------------------------------------*
//LOAD051 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFSLI  DD DISP=SHR,DSN=ISF.SISFSLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFSLI  DD DISP=SHR,DSN=SYSX.ISF.SISFSLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFSLI,O=OSISFSLI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD052 - IEBCOPY ISF.SISFSRC
//*---------------------------------------------------------*
//LOAD052 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISFSRC  DD DISP=SHR,DSN=ISF.SISFSRC,
//          UNIT=SYSALLDA,VOL=SER=
//OSISFSRC  DD DISP=SHR,DSN=SYSX.ISF.SISFSRC,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISFSRC,O=OSISFSRC,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD053 - IEBCOPY ISP.SISPLPA
//*---------------------------------------------------------*
//LOAD053 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPLPA  DD DISP=SHR,DSN=ISP.SISPLPA,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPLPA  DD DISP=SHR,DSN=SYSX.ISP.SISPLPA,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPLPA,O=OSISPLPA,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD054 - IEBCOPY ISP.SISPLOAD
//*---------------------------------------------------------*
//LOAD054 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPLOA  DD DISP=SHR,DSN=ISP.SISPLOAD,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPLOA  DD DISP=SHR,DSN=SYSX.ISP.SISPLOAD,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPLOA,O=OSISPLOA,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD055 - IEBCOPY ISP.SISPMENU
//*---------------------------------------------------------*
//LOAD055 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPMEN  DD DISP=SHR,DSN=ISP.SISPMENU,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPMEN  DD DISP=SHR,DSN=SYSX.ISP.SISPMENU,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPMEN,O=OSISPMEN,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD056 - IEBCOPY ISP.SISPPENU
//*---------------------------------------------------------*
//LOAD056 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPPEN  DD DISP=SHR,DSN=ISP.SISPPENU,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPPEN  DD DISP=SHR,DSN=SYSX.ISP.SISPPENU,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPPEN,O=OSISPPEN,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD057 - IEBCOPY ISP.SISPSENU
//*---------------------------------------------------------*
//LOAD057 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPSEN  DD DISP=SHR,DSN=ISP.SISPSENU,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPSEN  DD DISP=SHR,DSN=SYSX.ISP.SISPSENU,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPSEN,O=OSISPSEN,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD058 - IEBCOPY ISP.SISPSLIB
//*---------------------------------------------------------*
//LOAD058 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPSLI  DD DISP=SHR,DSN=ISP.SISPSLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPSLI  DD DISP=SHR,DSN=SYSX.ISP.SISPSLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPSLI,O=OSISPSLI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD059 - IEBCOPY ISP.SISPTENU
//*---------------------------------------------------------*
//LOAD059 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISPTEN  DD DISP=SHR,DSN=ISP.SISPTENU,
//          UNIT=SYSALLDA,VOL=SER=
//OSISPTEN  DD DISP=SHR,DSN=SYSX.ISP.SISPTENU,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISPTEN,O=OSISPTEN,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD060 - IEBCOPY CNM.VTAMLST
//*---------------------------------------------------------*
//LOAD060 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IVTAMLST  DD DISP=SHR,DSN=CNM.VTAMLST,
//          UNIT=SYSALLDA,VOL=SER=
//OVTAMLST  DD DISP=SHR,DSN=SYSX.CNM.VTAMLST,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IVTAMLST,O=OVTAMLST,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD061 - IEBCOPY CNM.VTAMLIB
//*---------------------------------------------------------*
//LOAD061 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IVTAMLIB  DD DISP=SHR,DSN=CNM.VTAMLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OVTAMLIB  DD DISP=SHR,DSN=SYSX.CNM.VTAMLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IVTAMLIB,O=OVTAMLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD062 - IEBCOPY SYS1.VTAMLST
//*---------------------------------------------------------*
//LOAD062 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IVTAMLST  DD DISP=SHR,DSN=SYS1.VTAMLST,
//          UNIT=SYSALLDA,VOL=SER=
//OVTAMLST  DD DISP=SHR,DSN=SYSX.SYS1.VTAMLST,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IVTAMLST,O=OVTAMLST,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD063 - IEBCOPY SYS1.VTAMLIB
//*---------------------------------------------------------*
//LOAD063 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//IVTAMLIB  DD DISP=SHR,DSN=SYS1.VTAMLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OVTAMLIB  DD DISP=SHR,DSN=SYSX.SYS1.VTAMLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=IVTAMLIB,O=OVTAMLIB,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD064 - IEBCOPY SYS1.SISTCLIB
//*---------------------------------------------------------*
//LOAD064 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ISISTCLI  DD DISP=SHR,DSN=SYS1.SISTCLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OSISTCLI  DD DISP=SHR,DSN=SYSX.SYS1.SISTCLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ISISTCLI,O=OSISTCLI,LIST=NO
//*
//*---------------------------------------------------------*
//*  LOAD065 - IEBCOPY NCP5.LOADLIB
//*---------------------------------------------------------*
//LOAD065 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//ILOADLIB  DD DISP=SHR,DSN=NCP5.LOADLIB,
//          UNIT=SYSALLDA,VOL=SER=
//OLOADLIB  DD DISP=SHR,DSN=SYSX.NCP5.LOADLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=ILOADLIB,O=OLOADLIB,LIST=NO
//*
//*
//*---------------------------------------------------------*
//*  COPY001 - COPY MEMBERS
//*---------------------------------------------------------*
//COPY001 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//INDD      DD DISP=SHR,DSN=OS390.RESCUE
//OUTDD     DD DISP=SHR,DSN=SYSX.SYS1.PARMLIB,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=INDD,O=OUTDD,LIST=NO
  SELECT MEMBER=((XXCOMMND,COMMND00,R))
  SELECT MEMBER=((XXIEASYS,IEASYS00,R))
  SELECT MEMBER=((XXIEFSSN,IEFSSN00,R))
  SELECT MEMBER=((XXIKJTSO,IKJTSO00,R))
  SELECT MEMBER=((XXJESPRM,JESPRM00,R))
  SELECT MEMBER=((XXLOAD00,LOAD00,R))
  SELECT MEMBER=((XXSMFPRM,SMFPRM00,R))
  SELECT MEMBER=((XXVATLST,VATLST00,R))
//*
//*---------------------------------------------------------*
//*  COPY002 - COPY MEMBERS
//*---------------------------------------------------------*
//COPY002 EXEC PGM=IEBCOPY,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSUT3    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//SYSUT4    DD UNIT=SYSDA,SPACE=(CYL,(75,2))
//INDD      DD DISP=SHR,DSN=OS390.RESCUE
//OUTDD     DD DISP=SHR,DSN=SYSX.CNM.VTAMLST,
//          UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
   COPY I=INDD,O=OUTDD,LIST=NO
  SELECT MEMBER=((XXATCSTR,ATCSTR00,R))
  SELECT MEMBER=((XXATCCON,ATCCON00,R))
//EGTLJCMD  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
//*=========================================================*
//* JOB - D   11.03 09/25/97
//*---------------------------------------------------------*
//*  STEP    ¦       PURPOSE
//*---------------------------------------------------------*
//* LOGREC   ¦  INITIALIZES SYS1.CPAC.LOGREC
//* DMPINT0  ¦  INITIALIZES DUMP DATASETS
//* DMPINT1  ¦  INITIALIZES DUMP DATASETS
//* ICHCOPY  ¦  COPIES RACF DATASET USING IRRUT200
//* FMTSMF   ¦  FORMAT SMF DATASETS
//* CATPRT   ¦  PRINT MASTER CATALOG POINTER
//*---------------------------------------------------------*
//*
//*---------------------------------------------------------*
//* LOGREC   ¦  INITIALIZES SYS1.CPAC.LOGREC
//*---------------------------------------------------------*
//LOGREC   EXEC PGM=IFCDIP00
//SERERDS  DD DISP=SHR,DSN=SYSX.SYS1.CPAC.LOGREC,
//         UNIT=3380,VOL=SER=RESCUE
//*
//*-----------------------------------------------------
//* SYNC UADS / BRODCAST DATASETS
//*-----------------------------------------------------
//USYNC    EXEC PGM=IKJEFT01,
//         DYNAMNBR=15,
//         REGION=2M
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//SYSUADS  DD DISP=SHR,DSN=SYSX.SYS1.UADS,
//         UNIT=3380,VOL=SER=RESCUE
//SYSLBC   DD DISP=SHR,DSN=SYSX.SYS1.BRODCAST,
//         UNIT=3380,VOL=SER=RESCUE
//SYSTSPRT DD SYSOUT=*
//SYSTSIN  DD *
  ACCOUNT
  SYNC
  END
//*
//*
//*-----------------------------------------------------
//* INITIALIZE DUMP DATASETS
//*-----------------------------------------------------
//DMPINT0 EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//SYSUT1   DD DUMMY,DCB=SYS1.DUMP00
//SYSUT2   DD DSN=SYSX.SYS1.DUMP00,DISP=SHR,
//         UNIT=3380,VOL=SER=RESCUE
//*
//DMPINT1 EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN    DD DUMMY
//SYSUT1   DD DUMMY,DCB=SYS1.DUMP01
//SYSUT2   DD DSN=SYSX.SYS1.DUMP01,DISP=SHR,
//         UNIT=3380,VOL=SER=RESCUE
//*
//*-----------------------------------------------------
//* COPY THE RACF DATASET USING IRRUT200
//*-----------------------------------------------------
//ICHCOPY  EXEC PGM=IRRUT200
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD SYSOUT=*
//SYSRACF  DD DSN=SYS1.RACFP1,DISP=SHR
//SYSUT1   DD DSN=SYSX.SYS1.RACFP1,DISP=OLD,
// UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
  INDEX
  MAP
  END
//*
//*-----------------------------------------------------
//* FORMAT THE SMF DATASETS
//*-----------------------------------------------------
//FMTSMF EXEC PGM=IFASMFDP,REGION=2M
//STEPCAT  DD DSN=CATALOG.RESCUE,DISP=SHR
//SYSPRINT DD SYSOUT=*
//FMAN1    DD DSN=SYS1.MAN1,DISP=SHR,
//         UNIT=3380,VOL=SER=RESCUE
//FMAN2    DD DSN=SYS1.MAN2,DISP=SHR,
//         UNIT=3380,VOL=SER=RESCUE
//SYSIN    DD *
 INDD(FMAN1,OPTIONS(CLEAR))
 INDD(FMAN2,OPTIONS(CLEAR))
//EGTLJCME  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
//*=========================================================*
//* JOB - E   11.03 09/25/97
//*---------------------------------------------------------*
//*  STEP    ¦       PURPOSE
//*---------------------------------------------------------*
//* RENAME   ¦  RENAME NONVSAM DATASET TO FINAL NAME
//* VTOCLIST ¦  VTOC LISTING
//* LISTCAT  ¦  FINAL LISTCAT
//*=========================================================*
//* RENAME   ¦  RENAME NONVSAM DATASET TO FINAL NAME
//*---------------------------------------------------------*
//RENAME  EXEC PGM=IDCAMS,REGION=2M
//STEPCAT  DD  DISP=SHR,DSN=CATALOG.RESCUE
//SYSPRINT DD  SYSOUT=*
//SYSIN   DD   *
 ALTER SYSX.SYS2.LINKLIB -
       NEWNAME(SYS2.LINKLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYSOSG.CSULOAD -
       NEWNAME(SYSOSG.CSULOAD) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.TCPIP.SEZALPA -
       NEWNAME(TCPIP.SEZALPA) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS3.CLIST -
       NEWNAME(SYS3.CLIST) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS2.PROCLIB -
       NEWNAME(SYS2.PROCLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS2.CSL.LOADLIB -
       NEWNAME(SYS2.CSL.LOADLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYSOSG.PROCLIB -
       NEWNAME(SYSOSG.PROCLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.CMDLIB -
       NEWNAME(SYS1.CMDLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DAE -
       NEWNAME(SYS1.DAE) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HELP -
       NEWNAME(SYS1.HELP) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.IMAGELIB -
       NEWNAME(SYS1.IMAGELIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.CSSLIB -
       NEWNAME(SYS1.CSSLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.LINKLIB -
       NEWNAME(SYS1.LINKLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.V1R3M0.SHASLINK -
       NEWNAME(SYS1.V1R3M0.SHASLINK) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.LPALIB -
       NEWNAME(SYS1.LPALIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.MACLIB -
       NEWNAME(SYS1.MACLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.MIGLIB -
       NEWNAME(SYS1.MIGLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.NUCLEUS -
       NEWNAME(SYS1.NUCLEUS) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.PARMLIB -
       NEWNAME(SYS1.PARMLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.PROCLIB -
       NEWNAME(SYS1.PROCLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.SAMPLIB -
       NEWNAME(SYS1.SAMPLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.SVCLIB -
       NEWNAME(SYS1.SVCLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.UADS -
       NEWNAME(SYS1.UADS) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.BRODCAST -
       NEWNAME(SYS1.BRODCAST) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HASPCKPT -
       NEWNAME(SYS1.HASPCKPT) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HASPACE -
       NEWNAME(SYS1.HASPACE) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.CPAC.LOGREC -
       NEWNAME(SYS1.CPAC.LOGREC) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DUMP00 -
       NEWNAME(SYS1.DUMP00) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DUMP01 -
       NEWNAME(SYS1.DUMP01) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.RACFP1 -
       NEWNAME(SYS1.RACFP1) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HRFCLST -
       NEWNAME(SYS1.HRFCLST) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HRFMSG -
       NEWNAME(SYS1.HRFMSG) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HRFPANL -
       NEWNAME(SYS1.HRFPANL) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.HRFSKEL -
       NEWNAME(SYS1.HRFSKEL) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DGTCLIB -
       NEWNAME(SYS1.DGTCLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DGTLLIB -
       NEWNAME(SYS1.DGTLLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DGTMLIB -
       NEWNAME(SYS1.DGTMLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DGTPLIB -
       NEWNAME(SYS1.DGTPLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DGTSLIB -
       NEWNAME(SYS1.DGTSLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DGTTLIB -
       NEWNAME(SYS1.DGTTLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DUTLOAD -
       NEWNAME(SYS1.DUTLOAD) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.DUTPLIB -
       NEWNAME(SYS1.DUTPLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.HASPINDX -
       NEWNAME(ISF.HASPINDX) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFLINK -
       NEWNAME(ISF.SISFLINK) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFLOAD -
       NEWNAME(ISF.SISFLOAD) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFLPA -
       NEWNAME(ISF.SISFLPA) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFMLIB -
       NEWNAME(ISF.SISFMLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFPLIB -
       NEWNAME(ISF.SISFPLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFTLIB -
       NEWNAME(ISF.SISFTLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFSLIB -
       NEWNAME(ISF.SISFSLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISF.SISFSRC -
       NEWNAME(ISF.SISFSRC) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPLPA -
       NEWNAME(ISP.SISPLPA) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPLOAD -
       NEWNAME(ISP.SISPLOAD) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPMENU -
       NEWNAME(ISP.SISPMENU) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPPENU -
       NEWNAME(ISP.SISPPENU) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPSENU -
       NEWNAME(ISP.SISPSENU) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPSLIB -
       NEWNAME(ISP.SISPSLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.ISP.SISPTENU -
       NEWNAME(ISP.SISPTENU) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.CNM.VTAMLST -
       NEWNAME(CNM.VTAMLST) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.CNM.VTAMLIB -
       NEWNAME(CNM.VTAMLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.VTAMLST -
       NEWNAME(SYS1.VTAMLST) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.VTAMLIB -
       NEWNAME(SYS1.VTAMLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.SYS1.SISTCLIB -
       NEWNAME(SYS1.SISTCLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.NCP5.LOADLIB -
       NEWNAME(NCP5.LOADLIB) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.IBMUSER.ISPF.ISPPROF -
       NEWNAME(IBMUSER.ISPF.ISPPROF) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.EGTLJCM.ISPF.ISPPROF -
       NEWNAME(EGTLJCM.ISPF.ISPPROF) -
       CATALOG(CATALOG.RESCUE)
 ALTER SYSX.EGTLKFT.ISPF.ISPPROF -
       NEWNAME(EGTLKFT.ISPF.ISPPROF) -
       CATALOG(CATALOG.RESCUE)
//*
//*---------------------------------------------------------*
//* VTOCLIST ¦  LIST VTOC
//*---------------------------------------------------------*
//VTOCLIST EXEC PGM=IEHLIST,REGION=2M
//SYSPRINT DD SYSOUT=*
//VOL1     DD UNIT=3380,VOL=SER=RESCUE,DISP=OLD
//SYSIN    DD *
  LISTVTOC VOL=3380=RESCUE
  LISTVTOC VOL=3380=RESCUE,FORMAT
//*
//*---------------------------------------------------------*
//* LISTCAT  ¦  FINAL CATALOG LISTING
//*---------------------------------------------------------*
//LISTCAT EXEC PGM=IDCAMS,REGION=2M
//STEPCAT  DD  DISP=SHR,DSN=CATALOG.RESCUE
//SYSPRINT DD  SYSOUT=*
//SYSIN   DD   *
  LISTCAT ALL CATALOG(CATALOG.RESCUE)
//*
//EGTLJCMF  JOB (0),JMILLER,MSGCLASS=X,CLASS=A,
// NOTIFY=EGTLJCM,REGION=6M,TYPRUN=HOLD
//*=========================================================*
//* JOB - F   11.03 09/25/97
//*---------------------------------------------------------*
//*  STEP    ¦       PURPOSE
//*---------------------------------------------------------*
//* LNKLST   ¦  Dynamically build LNKLSTxx PARMLIB member.
//* LPALST   ¦  Dynamically build LPALSTxx PARMLIB member.
//* IEAAPF   ¦  Dynamically build IEAAPFxx PARMLIB member.
//*---------------------------------------------------------*
//*---------------------------------------------------------*
//* Build LNKLSTxx member.                                  *
//*---------------------------------------------------------*
//LNKLST  EXEC PGM=IEBGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSUT2    DD DISP=SHR,DSN=SYS1.PARMLIB(LNKLST00),
//          UNIT=3380,VOL=SER=RESCUE
//SYSUT1    DD *
SYS2.LINKLIB,
SYSOSG.CSULOAD,
SYS1.CMDLIB,
SYS1.CSSLIB,
SYS1.LINKLIB,
SYS1.V1R3M0.SHASLINK,
ISF.SISFLINK,
ISF.SISFLOAD,
ISP.SISPLOAD
//*
//*---------------------------------------------------------*
//* Build LPALSTxx member.                                  *
//*---------------------------------------------------------*
//LPALST  EXEC PGM=IEBGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSUT2    DD DISP=SHR,DSN=SYS1.PARMLIB(LPALST00),
//          UNIT=3380,VOL=SER=RESCUE
//SYSUT1    DD *
TCPIP.SEZALPA,
ISF.SISFLPA,
ISP.SISPLPA
//*
//*---------------------------------------------------------*
//* Build IEAAPFxx member.                                  *
//*---------------------------------------------------------*
//LPALST  EXEC PGM=IEBGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSUT2    DD DISP=SHR,DSN=SYS1.PARMLIB(IEAAPF00),
//          UNIT=3380,VOL=SER=RESCUE
//SYSUT1    DD *
SYS2.LINKLIB                       RESCUE,
SYSOSG.CSULOAD                     RESCUE,
TCPIP.SEZALPA                      RESCUE,
SYS2.CSL.LOADLIB                   RESCUE,
SYS1.LINKLIB                       RESCUE,
SYS1.V1R3M0.SHASLINK               RESCUE,
CNM.VTAMLIB                        RESCUE,
SYS1.VTAMLIB                       RESCUE,
SYS1.SISTCLIB                      RESCUE,
NCP5.LOADLIB                       RESCUE
//*
//*---------------------------------------------------------*
//* Build JES2 startup PROC.                                *
//*---------------------------------------------------------*
//JESPROC EXEC PGM=IEBGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSUT2    DD DISP=SHR,DSN=SYS1.PROCLIB(JES2),
//          UNIT=3380,VOL=SER=RESCUE
//SYSUT1    DD DATA,DLM='@#'
//JES2      PROC M=00
//*======================================================*
//* JES2 STARTUP PROC - RESCUE SYSTEM                    *
//*======================================================*
//IEFPROC  EXEC PGM=HASJES20,DPRTY=(15,15),TIME=1440
//HASPPARM DD  DSN=SYS1.PARMLIB(JESPRM&M),DISP=SHR
//HASPLIST DD  DDNAME=IEFRDER
//PROC00   DD  DISP=SHR,DSN=SYS2.PROCLIB
//         DD  DISP=SHR,DSN=SYSOSG.PROCLIB
//         DD  DISP=SHR,DSN=SYS1.PROCLIB
@#
//*---------------------------------------------------------*
//* Build VTAM startup PROC.                                *
//*---------------------------------------------------------*
//LPALST  EXEC PGM=IEBGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSUT2    DD DISP=SHR,DSN=SYS1.PROCLIB(VTAM),
//          UNIT=3380,VOL=SER=RESCUE
//SYSUT1    DD DATA,DLM='@#'
//VTAM     PROC
//*======================================================*
//* VTAM STARTUP PROC - RESCUE SYSTEM                    *
//*======================================================*
//VTAM     EXEC PGM=ISTINM01,REGION=6500K,
//         DPRTY=(15,15),TIME=1440,PERFORM=8
//SISTCLIB DD DISP=SHR,DSN=SYS1.SISTCLIB
//SYSABEND DD SYSOUT=*,HOLD=YES
//VTAMLST  DD  DISP=SHR,DSN=CNM.VTAMLST
//         DD  DISP=SHR,DSN=SYS1.VTAMLST
//VTAMLIB  DD  DISP=SHR,DSN=CNM.VTAMLIB
//         DD  DISP=SHR,DSN=SYS1.VTAMLIB
@#
//*---------------------------------------------------------*
//* Build a TSO LOGON PROC.                                 *
//*---------------------------------------------------------*
//TSOPROC EXEC PGM=IEBGENER,REGION=2M
//SYSPRINT  DD SYSOUT=*
//SYSIN     DD DUMMY
//SYSUT2    DD DISP=SHR,DSN=SYS1.PROCLIB(MINIMUM),
//          UNIT=3380,VOL=SER=RESCUE
//SYSUT1    DD DATA,DLM='@#'
//MINIMUM  PROC
//*======================================================*
//* TSO LOGON PROC - Rescue System.                      *
//* 11.03 09/25/97                                    *
//*======================================================*
//MINIMUM EXEC PGM=IKJEFT01,DYNAMNBR=256,PARM=ISPALLOC
//SYSPRINT DD TERM=TS,SYSOUT=*
//SYSTERM  DD TERM=TS,SYSOUT=*
//SYSIN    DD TERM=TS
//SYSPROC  DD DISP=SHR,DSN=SYS3.CLIST
//SYSHELP  DD DISP=SHR,DSN=SYS1.HELP
//SYSLBC   DD DISP=SHR,DSN=SYS1.BRODCAST
//* Dynamically build statements below
//SYSPROC  DD  DISP=SHR,DSN=SYS3.CLIST
//ISPPLIB  DD  DISP=SHR,DSN=ISF.SISFPLIB
//         DD  DISP=SHR,DSN=ISP.SISPPENU
//ISPMLIB  DD  DISP=SHR,DSN=ISF.SISFMLIB
//         DD  DISP=SHR,DSN=ISP.SISPMENU
//ISPSLIB  DD  DISP=SHR,DSN=ISF.SISFSLIB
//         DD  DISP=SHR,DSN=ISP.SISPSENU
//         DD  DISP=SHR,DSN=ISP.SISPSLIB
//ISPTLIB  DD  DISP=SHR,DSN=ISF.SISFTLIB
//         DD  DISP=SHR,DSN=ISP.SISPTENU
@#
//*
./ ADD NAME=WAIT     0100-02365-02365-0941-00157-00157-00000-JMILLER
//EGTLJCMA JOB (0),JMILLER,MSGCLASS=X,CLASS=A,NOTIFY=EGTLJCM,REGION=6M
//ASMHCL   EXEC  ASMHCL,PARM.L='MAP,LET,LIST,NCAL'
//C.SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//           DD  DSN=SYS1.MODGEN,DISP=SHR
//C.SYSIN    DD  *
PRC      TITLE 'WAIT - WAIT A LITTLE BIT.'
********************************************************************
*                                                                  *
* NAME - WAIT.                                                     *
*                                                                  *
* DESCRIPTION -                                                    *
*                                                                  *
*   THIS MODULE WILL WAIT THE REQUESTED NUMBER OF SECONDS.         *
*                                                                  *
* TO USE -                                                         *
*                                                                  *
*   PARM='NNNN', WHERE 0 < NNNN <= 9999, THE NUMBER OF SECONDS TO  *
*     WAIT. DEFAULT IS 10 SECONDS.                                 *
*                                                                  *
* RETURN CODES -                                                   *
*                                                                  *
*   R15 = 20, BAD PARM FIELD.                                      *
*                                                                  *
* LOG -                                                            *
*   05/30/86 L01 PTW IMPLEMENTED                                   *L01
*   09/27/88 L02 PTW IMPLEMENTED                                   *L02
*                                                                  *
********************************************************************
         LCLC  &CSECT
&CSECT   SETC  'WAIT'
&CSECT   CSECT
********************************************************************
*                                                                  *
*        I N I T I A L I Z E                                       *
*                                                                  *
********************************************************************
         PRINT NOGEN
         SAVE  (14,12),,&CSECT-&SYSDATE-&SYSTIME
         LR    R12,R15            ESTABLISH BASE.
         USING &CSECT,R12
         GETMAIN RU,LV=DYNLEN
         LR    R2,R13
         LR    R13,R1
         USING DYNAMIC,R13
         LR    R0,R1
         LA    R14,DYNLEN
         LA    R1,R1
         SLR   R15,R15
         MVCL  R0,R14             ZERO STORAGE.
         ST    R2,4(,R13)         BACK CHAIN.
         ST    R13,8(,R2)         FORWARD CHAIN.
         XC    RC,RC
********************************************************************
*                                                                  *
*        P A R M   P R O C E S S I N G                             *
*                                                                  *
********************************************************************
         MVC   SECONDS,=F'10'     DEFAULT.
         L     R2,4(,R13)         A(PREVIOUS SAVEAREA).
         L     R2,24(,R2)         A(A(PARM)).
         LTR   R2,R2              CHECK FOR NULL PARM.
         BZ    DOTIME
         L     R2,0(,R2)          A(PARM).
         LH    R3,0(,R2)          L'PARM.
         LTR   R3,R3              IF ZEROS +
         BZ    DOTIME               THEN EXIT.
         CH    R3,=H'4'           IF LENGTH NGT '4' +
         BH    BADTIME            FORGET NEXT.
         LA    R4,2(,R2)
VERNUM   DS    0H
         CLI   0(R4),C'0'         SCAN
         BL    BADTIME             FORWARD
         CLI   0(R4),C'9'         SCAN
         BH    BADTIME             FORWARD
         LA    R4,1(,R4)            TO FIRST
         BCT   R3,VERNUM
         LH    R3,0(,R2)
         BCTR  R3,0               MACHINE LENGTH.
         EX    R3,PACKSEC         PACK SECONDS.
         CVB   R3,DOUBLE          CONVERT TO BINARY.
         CH    R3,=H'1'           TEST SECONDS
         BL    BADTIME             FOR LIMITS.
         CH    R3,=H'9999'
         BH    BADTIME
         ST    R3,SECONDS          AND STORE.
PACKSEC  PACK  DOUBLE,2(*-*,R2)
********************************************************************
*                                                                  *
*        W A I T                                                   *
*                                                                  *
********************************************************************
DOTIME   DS    0H
         L     R2,SECONDS
         MH    R2,=H'100'
         ST    R2,SECONDS
         STIMER WAIT,BINTVL=SECONDS
         XC    RC,RC
********************************************************************
*                                                                  *
*        R E T U R N                                               *
*                                                                  *
********************************************************************
RETURN   DS    0H
         L     R2,RC                  R2 = RC.
         LR    R1,R13              PREPARE
         L     R13,4(,R13)         FOR FREEMAIN.
         FREEMAIN RU,LV=DYNLEN,A=(1)
         LR    R15,R2              AND RETURN
         RETURN (14,12),RC=(15)      WITH R15 = RC.
********************************************************************
*                                                                  *
*        E R R O R S                                               *
*                                                                  *
********************************************************************
BADTIME  DS    0H
         WTO   'WAIT: BAD PARM - SPECIFY NNNN (1-9999 SECONDS).',      X
               ROUTCDE=11,MCSFLAG=HRDCPY
         MVC   RC,=F'20'
         B     RETURN
********************************************************************
*                                                                  *
*        S T A T I C   A R E A                                     *
*                                                                  *
********************************************************************
SRCLEVEL DC    C'                                        '
         LTORG *
********************************************************************
*                                                                  *
*        D Y N A M I C   A R E A                                   *
*                                                                  *
********************************************************************
DYNAMIC  DSECT
SAVE     DS    18F .
DOUBLE   DS    D
RC       DS    F
SECONDS  DS    F
DYNLEN   EQU   *-DYNAMIC
         PRINT OFF
R0       EQU   00
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12                 PROGRAM BASE.
R13      EQU   13                 A(SAVE AREA).
R14      EQU   14
R15      EQU   15
         PRINT ON
         END   &CSECT
//L.SYSLMOD DD  DSN=SYSOSG.CSULOAD(WAIT),DISP=SHR,UNIT=
./ ADD NAME=XXATCCON 0100-02365-02365-0941-00015-00015-00000-JMILLER
***********************************************************************
***********************************************************************
**                                                                  **
**       ACTIVATE ALL VTAM MAJOR NODES                              **
**                                                                  **
***********************************************************************
***********************************************************************
         E02PATH,              ** PATH TABLES                       ** X
         E02ADJ,               ** ADJACENT SSCP ROUTING             ** X
         E02APPLS,             ** NETVIEW APPLICATIONS              ** X
         E02TSO,               ** TSO APPLIDS                       ** X
         E02CDRM,              ** CROSS DOMAIN RESOURCE MGR'S       ** X
         E02CDRSC,             ** CROSS DOMAIN RESOURCES            ** X
         E01NCP,               ** CSUC'S NCP                        ** X
         E02TCPIP,             ** TCP/IP LOGICAL TERMINALS          ** X
./ ADD NAME=XXATCSTR 0100-02365-02365-0941-00015-00015-00000-JMILLER
***********************************************************************
**       VTAM STARTUP OPTIONS                                       **
**       08/22/97 JOHN MILLER                                       **
**                                                                  **
**       S CNMNET,,,(LIST=03)                                       **
**********************************************************************
         MAXSUBA=255,           ** MAXIMUM SUBAREA                  ** X
         CONFIG=00,             ** START MAJOR NODES IN ATCCON00    ** X
         HOSTPU=E02MPU,         ** SNI - PUS - UNIQUE NETWORK NAME  ** X
         HOSTSA=192,            ** SUBAREA - UNIQUE NETWORK VALUE   ** X
         NETID=CSUNET,          ** SNI - UNIQUE NETWORK IDENTIFIER  ** X
         SSCPID=0192,           ** NETWORK UNIQUE                   ** X
         PPOLOG=YES,                                                   X
         IOBUF=(100,256,19,,1,20),                                     X
         SSCPNAME=E02M          ** SNI - GATEWAY VTAM (SSCP) NAME   **
./ ADD NAME=XXCOMMND 0100-02365-02365-0941-00009-00009-00000-JMILLER
COM='T MPF=00'
COM='TRACE'
COM='CD SET,SDUMP=(ALLPSA,NUC,SQA,LSQA,RGN,LPA,TRT,SWA,CSA,SUM),Q=YES'
COM='S DLF,SUB=MSTR'
COM='S VLF,SUB=MSTR'
COM='S EPWFFST.FFST,SUB=MSTR'
COM='S VTAM,,,(LIST=00)'
COM='S IRRDPTAB'
COM='S TSO'
./ ADD NAME=XXIEASYS 0100-02365-02365-0941-00075-00075-00000-JMILLER
APF=00,                      AUTHORIZATION LIST
CLOCK=00,                    SELECT CLOCK00                     DEFAULT
CLPA,                        ALWAYS COLD START
CMB=(UNITR,COMM,GRAPH,CHRDR), ADDITIONAL CMB ENTRIES
CMD=00,                      TOD PROMPT, SDUMP, TRACE ON AND RMF /*J3*/
CON=00,                      SELECT CONSOL00                    DEFAULT
CSA=(3000,15000),            MVS/ESA CSA RANGE
DUMP=DASD,                   PLACE SVC DUMPS ON DASD DEVICES  DEFAULT
FIX=00,                      FIX MODULES SPECIFIED               /*J3*/
GRS=NONE,                    NO COORDINATION OF GRS REQUESTS
ICS=00,                      SELECT IEAICS00 INSTALL CNTL SPECS FOR SRM
IOS=00,                      SET MIH FOR BTI BOX                    RJG
IPS=00,                      SELECT IEAIPS00 INSTALL PERF SPECS FOR SRM
LNK=00,                      SPECIFY LNKLST00                    /*J3*/
LNKAUTH=LNKLST,              AUTHORIZE LNKLST00-DEFAULT, APFTAB IS ALT
LOGCLS=A,                    WILL NOT BE PRINTED BY DEFAULT
LOGLMT=999999,               MUST BE 6 DIGITS, MAX WTL MESSAGES QUEUED
LOGREC=SYS1.&SYSNAME..LOGREC,  ERROR RECORDING
LPA=(00,L),                  SELECT LPALST00
MAXUSER=250,                 (SYS TASKS + INITS + TSOUSERS)
MLPA=00,                     MLPA PARAMETERS
MSTRJCL=00,                  MASTER JCL - MSTJCL00              DEFAULT
OPI=YES,                     ALLOW OPERATOR OVERRIDE TO IEASYS00
OPT=00,                      SPECIFY IEAOPT00 (SRM TUNING PARMETERS)
PAGE=(PAGE.RESCUE.PLPA,
      PAGE.RESCUE.COMMON,
      PAGE.RESCUE.LOCAL1,L),
PAGTOTL=(7,4),               ALLOW ADDITION 3 PAGE D/S AND 2 SWAP D/S
PAK=00,                      IEAPAK00
PROD=00,                     SELECT IFAPRDEX - SECURE SERVER DISABLED
REAL=128,                    ALLOWS 2 64K JOBS OR 1 128K JOB TO RUN V=R
RSU=0,                       NO RECONFIG STORAGE UNITS          DEFAULT
RSVSTRT=5,                   RESERVED ASVT ENTRIES              DEFAULT
RSVNONR=5,                   RESERVED ASVT ENTRIES              DEFAULT
SCH=00,                      SELECT SCHED00                     DEFAULT
SMF=00,                      SELECT SMFPRM00, SMF PARAMETERS    DEFAULT
SMS=01,                      SELECT IGDSMS01, SMS PARAMETERS
SQA=(6,0),                   MVS/ESA SQA APPROX 640K
SYSNAME=CPAC,                SYSTEM NAME
SSN=00,                      SUBSYSTEM INITIALIZATION NAMES
SVC=00,                      SELECT IEASVC00                    DEFAULT
VAL=00,                      SELECT VATLST00                    DEFAULT
VIODSN=SYS1.STGINDEX,        VIO DS
VRREGN=64                    DEFAULT REAL-STORAGE REGION SIZE   DEFAULT
/* THIS COMPLETES THE SYSP LIST                                      */
/*                                                                   */
/* NOTE 1: NOTE THAT SCAN OF THE SYSP PARAMETERS ENDS AT THE FIRST   */
/*         PARAMETER WITHOUT A COMMA.  WHEN MODIFYING ANY PARAMETER  */
/*         EXCEPT THE LAST SPECIFIED, INCLUDE THE COMMA.             */
/*                                                                   */
/* NOTE 2: PAGE PARAMETER SPECIFIED AT IPL TIME MERGES WITH IEASYSXX */
/*         SEE INIT AND TUNING GUIDE GC28-1149.                      */
/*                                                                   */
/* NOTE 3: THE FOLLOWING PARAMETERS HAVE BEEN OMITTED BY CHOICE      */
ALT=                         CAN ONLY BE SPECIFIED BY THE OPERATOR
                             NOT A VALID PARMETER FOR IEASYSXX
BLDL=                        NOT VALID FOR MVS/ESA
CVIO                         DO NOT DELETE VIO D/S - CLPA IMPLIES CVIO
DUPLEX=                      NO DUPLEX D/S - OPTIONAL WITH SU 7
HARDCPY=                     HARD COPY PARMS - CONTROLLED BY CONSOLXX
IOS=                         NOW SETS AN ALT TIME INTERVAL FOR MIH
PURGE                        DO NOT DEMOUNT MSS VOLUMES
SWAP=                        NO SWAP DATASET SPECIFIED
SYSP=00                      SPECIFIED BY OPERATOR AT IPL FOR THIS SYSP
                             NOT A VALID PARMETER FOR IEASYSXX
WTOBFRS=500                  NO. OF WTO BUFFERS- CONTROLLED BY CONSOLXX
WTORPLY=50                   NO. OF WTOR BUFFERS-CONTROLLED BY CONSOLXX
 IEALODXX IS NO LONGER VALID WITH MVS/ESA
 LPALSTXX IS A OPTION WHICH ALLOWS YOU TO
          CONCATENATE TO SYS1.LPALIB.
/*                           THIS IS THE END OF IEASYS00             */
 /* LIB: SYS1.PARMLIB(IEASYS00)                                      */
 /* GDE: CBIPO MVS CUSTOMIZATION                                     */
 /* DOC: THIS IS THE MVS CBIPO SYSTEM PARAMETER LIST.                */
 /*                                                                  */
./ ADD NAME=XXIEFSSN 0100-02365-02365-0941-00001-00001-00000-JMILLER
JES2,,,PRIMARY                   PRIMARY SUBSYSTEM
./ ADD NAME=XXIKJTSO 0100-02365-02365-0941-00071-00071-00000-JMILLER
ALLOCATE DEFAULT(SHR)
AUTHCMD NAMES(          /* AUTHORIZED COMMANDS      */      +
   DEL      DELETE      /*                          */      +
   RFLIST               /* RACF LIST CMD JCM 8/90   */      +
   RFLISTD              /* RACF LIST CMD JCM 8/90   */      +
   RFLISTG              /* RACF LIST CMD JCM 8/90   */      +
   RFLISTT              /* RACF LIST CMD JCM 8/90   */      +
   VLFNOTE              /* FOR VLF                  */      +
   RECEIVE              /* TSO COMMANDS             */      +
   TRANSMIT XMIT        /*                          */      +
   LISTB    LISTBC      /*                          */      +
   SE       SEND        /*                          */      +
   RACONVRT             /*                          */      +
   SYNC                 /*                          */      +
   AD       ADDSD       /* RACF COMMANDS            */      +
   AG       ADDGROUP    /*                          */      +
   AU       ADDUSER     /*                          */      +
   ALG      ALTGROUP    /*                          */      +
   ALD      ALTDSD      /*                          */      +
   ALU      ALTUSER     /*                          */      +
   BLKUPD               /*                          */      +
   CO       CONNECT     /*                          */      +
   DD       DELDSD      /*                          */      +
   DG       DELGROUP    /*                          */      +
   DU       DELUSER     /*                          */      +
   LD       LISTDSD     /*                          */      +
   LG       LISTGRP     /*                          */      +
   LU       LISTUSER    /*                          */      +
   RALT     RALTER      /*                          */      +
   RDEF     RDEFINE     /*                          */      +
   RDEL     RDELETE     /*                          */      +
   RE       REMOVE      /*                          */      +
   RL       RLIST       /*                          */      +
   RVARY                /*                          */      +
   PASSWORD PW          /*                          */      +
   PE       PERMIT      /*                          */      +
   SETR     SETROPTS    /*                          */      +
   SR       SEARCH      /*                          */      +
             )          /*                          */
                        /*                          */
AUTHPGM NAMES(          /* AUTHORIZED PROGRAMS      */      +
   IEBCOPY              /*                          */      +
   ICHDSM00             /* RACF PROGRAMS            */      +
   ICHUT100             /*                          */      +
   ICHUT200             /*                          */      +
   ICHUT400             /*                          */      +
           )            /*                          */
                        /*                          */
NOTBKGND NAMES(         /* COMMANDS WHICH MAY NOT BE */  +
                        /* ISSUED IN THE BACKGROUND  */  +
   OPER     OPERATOR    /*                           */  +
   TERM     TERMINAL)   /*                           */
                        /*                           */
AUTHTSF NAMES(          /* PROGRAMS TO BE AUTHORIZED */  +
                        /* WHEN CALLED THROUGH THE   */  +
                        /* TSO SERVICE FACILITY.     */  +
   RFLIST               /* USER RACF COMMANDS        */  +
   RFLISTD              /* JCM 01/04/91              */  +
   RFLISTG              /* ...                       */  +
   RFLISTT              /* ...                       */  +
   CITEST               /* ...                       */  +
   IEBCOPY              /*                           */  +
   IKJEFF76)            /*                           */
                        /*                           */
SEND                    /* SEND COMMAND DEFAULTS     */  +
   OPERSEND(ON)         /*                           */  +
   USERSEND(ON)         /*                           */  +
   SAVE(ON)             /*                           */  +
   CHKBROD(OFF)         /*                           */  +
   USEBROD(ON)          /*                           */  +
   LOGNAME(SYS1.BRODCAST)  /*                        */
./ ADD NAME=XXJESPRM 0100-02365-02365-0941-00595-00595-00000-JMILLER
/*********************************************************************/
/* JES2 parms for SYS911 emergency system.                           */
/* 08/22/97 John Miller                                              */
/*********************************************************************/
LOGON(1) APPLID=CHICOVM
/*                                                                   */
APPL(CHICOVM) NODE=192
APPL(EJES2) NODE=191
APPL(AJES201)  NODE=101
/*                                                                   */
BUFDEF   BELOWBUF=(LIMIT=114,WARN=80),
         EXTBUF=(LIMIT=114,WARN=80)
/*                                                                   */
CKPTDEF  CKPT1=(DSNAME=SYS1.HASPCKPT,   /* NAME FOR CKPT &DSNPRFX  CS*/
         VOLSER=RESCUE,
         INUSE=YES),
         MODE=DUPLEX,        /* DUPLEXING                &CHKPT2   WS*/
         DUPLEX=ON,          /* DUPLEXING                &CHKPT2   WS*/
         LOGSIZE=2,
         APPLCOPY=COMMON
CONDEF   AUTOCMD=50,         /* Number of Auto Cmds             dhwnc*/
         BUFNUM=950,         /* Number of CMBs                  dhwnc*/
         BUFWARN=80,         /* Warning Threshold %            dohwnc*/
         CONCHAR=$,          /* Console Cmd Character            dwnc*/
         DISPLEN=65,         /* $SCAN Cmd/init Display Length  dohwnc*/
         DISPMAX=100,        /* $SCAN Cmd/init Max Lines       dohwnc*/
         MASMSG=200,         /* Number of Queued Msgs          dohwnc*/
         RDRCHAR=$           /* Reader Cmd Character           dohwnc*/
/*                                                                   */
DEBUG    =NO                 /* Don't Use Unless Nec.          dohwnc*/
/*                                                                   */
ESTBYTE  NUM=99999,          /* 99999000 Bytes for 1st Msg     dohwnc*/
         INT=99999,          /*  then 99999000 Byte Intervals  dohwnc*/
         OPT=0               /* Allow Jobs to Continue         dohwnc*/
/*                                                                   */
ESTIME   NUM=2,              /* 2 minutes for 1st Message      dohwnc*/
         INT=1,              /*  then at 1 minute Intervals    dohwnc*/
         OPT=NO              /* No HASP308 message             dohwnc*/
/*                                                                   */
ESTLNCT  NUM=2,              /* 2000 Lines for 1st Message     dohwnc*/
         INT=2000,           /*  then at 2000 Line Intervals   dohwnc*/
         OPT=0               /* Allow Jobs to Continue         dohwnc*/
/*                                                                   */
ESTPAGE  NUM=40,             /* 40 Pages for 1st Message       dohwnc*/
         INT=10,             /*  then at 10 Page Intervals     dohwnc*/
         OPT=0               /* Allow Jobs to Continue         dohwnc*/
/*                                                                   */
ESTPUN   NUM=100,            /* 100 Cards for 1st Message      dohwnc*/
         INT=2000,           /*  then at 2000 Card Intervals   dohwnc*/
         OPT=0               /* Allow Jobs to Continue         dohwnc*/
                           /*                                    */
                           /*                                    */
I(1)    NAME=1,           /* Initiator Name                   dwnc*/
         CLASS=A,           /* Initial Job Classes             downc*/
         START=YES          /* Start Automatically             downc*/
/*                                                                  */
I(2)    NAME=2,           /* Initiator Name                   dwnc*/
         CLASS=A,           /* Initial Job Classes             downc*/
         START=YES          /* Start Automatically             downc*/
/*                                                                  */
I(3)    NAME=3,           /* Initiator Name                   dwnc*/
         CLASS=BA,         /* Initial Job Classes             downc*/
         START=YES         /* Start Automatically             downc*/
/*                                                                   */
I(4)    NAME=4,           /* Initiator Name                   dwnc*/
         CLASS=BA,         /* Initial Job Classes             downc*/
         START=YES        /* Start automatically             downc*/
/*                                                                  */
I(5)    NAME=5,           /* Initiator Name                   dwnc*/
         CLASS=HBA,        /* Initial Job Classes             downc*/
         START=YES         /* Start automatically             downc*/
/*                                                                  */
I(6)    NAME=6,           /* Initiator Name                   dwnc*/
         CLASS=HBA,        /* Initial Job Classes             downc*/
         START=YES         /* Start Automatically             downc*/
/*                                                                   */
I(7)    NAME=7,           /* Initiator Name                   dwnc*/
         CLASS=HBA,        /* Initial Job Classes             downc*/
         START=YES        /* Start automatically             downc*/
/*                                                                  */
I(8)    NAME=8,           /* Initiator Name                   dwnc*/
         CLASS=HBA,        /* Initial Job Classes             downc*/
         START=YES         /* Start automatically             downc*/
/*                                                                   */
I(9)    NAME=9,           /* Initiator Name                   dwnc*/
         CLASS=F,          /* Initial Job Classes             downc*/
         START=NO         /* DRAIN                           downc*/
/*                                                                 */
I(10)   NAME=10,          /* Initiator Name                   dwnc*/
         CLASS=G,          /* Initial Job Classes             downc*/
         START=NO         /* DRAIN                           downc*/
/*                                                                  */
I(11)   NAME=11,          /* Initiator Name                   dwnc*/
         CLASS=H,          /* Initial Job Classes             downc*/
         START=NO          /* DRAIN                           downc*/
/*                                                                 */
I(12)   NAME=12,          /* Initiator Name                   dwnc*/
         CLASS=I,          /* Initial Job Classes             downc*/
         START=NO         /* DRAIN                           downc*/
/*                                                                  */
INITDEF  PARTNUM=12         /* Number of Initiators              wnc*/
/*                                                                  */
INTRDR   AUTH=(JOB=YES,DEVICE=YES,SYSTEM=YES),
         /* Allow System,Device - Job Cmds  downc*/
         CLASS=A,            /* Default Job Class               downc*/
         HOLD=NO,            /* Not TYPRUN=HOLD                 dhwnc*/
         PRTYINC=0,          /* Don't Prty Age Jobs               wnc*/
         PRTYLIM=15,         /* Limit Job Prty to 15              wnc*/
         RDINUM=20           /* Number of Internal RDRS          dwnc*/
/*                                                                   */
JOBCLASS(A) ACCT=NO,         /* Acct# not req   b................... */
         PGMRNAME=NO,        /* Pgmrnm not rq   b................... */
         TIME=(0030,00),     /* Job Step Time   ...mmmmss........... */
         REGION=512K,        /* Region Size     .........ccc........ */
         COMMAND=VERIFY,     /* Verify Cmds     ............r....... */
         BLP=YES,            /* Allows BLP      .............l...... */
         AUTH=ALL,           /* Allow all Cmd   ..............aaaa.. */
         MSGLEVEL=(1,1),     /* Job, All Msgs   ..................ef */
         COPY=NO,            /* Not TYPRUN=COPY                 dhwnc*/
         HOLD=NO,            /* Not TYPRUN=HOLD                 dhwnc*/
         IEFUJP=YES,         /* Take SMF Job Purge Exit         dhwnc*/
         IEFUSO=YES,         /* Take SYSOUT Excess Exit         dhwnc*/
         JOURNAL=NO,         /* Journal this Job Class          dhwnc*/
         LOG=YES,            /* Print JES2 JOB LOG              dhwnc*/
         OUTPUT=YES,         /* Produce Output for Job          dhwnc*/
         PERFORM=000,        /* SRM Performance Group 0         dhwnc*/
         PROCLIB=00,         /* Use //PROC00 DD                 dhwnc*/
         RESTART=NO,         /* No Requeue (XEQ) on IPL         dhwnc*/
         SCAN=NO,            /* Not TYPRUN=SCAN                 dhwnc*/
         SWA=BELOW,          /* SWA cbs below 16m line          dhwnc*/
         TYPE6=YES,          /* Produce SMF 6 Records           dhwnc*/
         TYPE26=YES          /* Produce SMF 26 Records          dhwnc*/
/*                                                                   */
JOBCLASS(H) ACCT=NO,         /* Acct# not req   b................... */
         PGMRNAME=NO,        /* Pgmrnm not rq   b................... */
         TIME=(0030,00),     /* Job Step Time   ...mmmmss........... */
         REGION=512K,        /* Region Size     .........ccc........ */
         COMMAND=VERIFY,     /* Verify Cmds     ............r....... */
         BLP=YES,            /* Allows BLP      .............l...... */
         AUTH=ALL,           /* Allow all Cmd   ..............aaaa.. */
         MSGLEVEL=(1,1),     /* Job, All Msgs   ..................ef */
         COPY=NO,            /* Not TYPRUN=COPY                 dhwnc*/
         HOLD=YES,           /* TYPRUN=HOLD                     dhwnc*/
         IEFUJP=YES,         /* Take SMF Job Purge Exit         dhwnc*/
         IEFUSO=YES,         /* Take SYSOUT Excess Exit         dhwnc*/
         JOURNAL=NO,         /* Journal this Job Class          dhwnc*/
         LOG=YES,            /* Print JES2 JOB LOG              dhwnc*/
         OUTPUT=YES,         /* Produce Output for Job          dhwnc*/
         PERFORM=000,        /* SRM Performance Group 0         dhwnc*/
         PROCLIB=00,         /* Use //PROC00 DD                 dhwnc*/
         RESTART=NO,         /* No Requeue (XEQ) on IPL         dhwnc*/
         SCAN=NO,            /* Not TYPRUN=SCAN                 dhwnc*/
         SWA=BELOW,          /* SWA cbs below 16m line          dhwnc*/
         TYPE6=YES,          /* Produce SMF 6 Records           dhwnc*/
         TYPE26=YES          /* Produce SMF 26 Records          dhwnc*/
/*                                                                   */
JOBDEF   ACCTFLD=OPTIONAL,   /* Accounting field optional      dohwnc*/
         JCLERR=NO,          /* No Term. Job w/JCL Error       dohwnc*/
         JOBNUM=1500,        /* Job Queue Size                     dc*/
         JOBWARN=80,         /* Warning Threshold % For JQEs   dohwnc*/
         NUMWARN=80,         /* Warn Threshold % for Job Numb. dohwnc*/
         PRTYHIGH=10,        /* Upper Limit for Aging          dohwnc*/
         PRTYJECL=YES,       /*PRIORITY JECL Supported         dohwnc*/
         PRTYJOB=NO,         /* PRTY= on JOB Not Sup'd         dohwnc*/
         PRTYLOW=5,          /* Lower Limit for Aging          dohwnc*/
         PRTYRATE=96,        /* Prty Aging Rate X/Day          dohwnc*/
         RANGE=(1-9999)      /* Local Job Number Range          downc*/
/*                                                                   */
JOBPRTY(1) PRIORITY=9,       /* Job Prty=9 if                  dohwnc*/
          TIME=2             /*  < 2 min. exec. time           dohwnc*/
                             /*                                      */
JOBPRTY(2) PRIORITY=8,       /* Job Prty=8 if                        */
          TIME=5             /*  < 5 min. exec. time                 */
/*                                                                   */
LINE(1)   UNIT=SNA           /* Remote 3287 in Kendall Hall          */
LINE(2)   UNIT=SNA           /* Remote Laser in Kendall Hall         */
LINE(3)   UNIT=SNA           /* Remote line printer in Kendall       */
LINE(4)   UNIT=SNA           /* Remote laser printer in AD&R         */
LINE(5)   UNIT=SNA           /* Remote line printer in Purchasing    */
LINE(101) UNIT=SNA           /* NJE Connection to IRT                */
LINE(191) UNIT=SNA           /* NJE Connection to Chico MVS          */
/*                            *--------------------------------------*
                              |    Identify JES2 APPLIDs to VTAM     |
                              *--------------------------------------*
                                                                     */
MASDEF   DORMANCY=(100,      /* Minimum Dormancy Time          dohwnc*/
                       500), /* Maximum Dormancy Time          dohwnc*/
         HOLD=99999999,      /* Minimum Hold Time              dohwnc*/
         LOCKOUT=1000,       /* Lock-out Warning Time          dohwnc*/
         OWNMEMB=E01M,       /* SMF ID of this System                */
         SHARED=NOCHECK,     /* Check for Shared DASD             doc*/
         SYNCTOL=120         /* Synch.Tolerance (Sec.)         dohwnc*/
/*                                                                   */
MEMBER(1) NAME=E01M          /* IDS of all MAS Members               */
/*                                                                   */
NJEDEF   DELAY=120,         /* Max. Msg Delay Time            dohwnc*/
         JRNUM=4,           /* Num. of job receivers           dhwnc*/
         JTNUM=4,           /* Num. of job xmitters            dhwnc*/
         LINENUM=4,         /* Num. of lines for NJE           dhwnc*/
         NODENUM=2000,      /* Max. Number of NJE nodes          dnc*/
         OWNNODE=192,       /* This Node's Number                 dc*/
         PATH=1,            /* Num. of Paths/Alt'nate          dhwnc*/
         RESTMAX=8000000,   /* Max. resistance tolerance       dhwnc*/
         RESTNODE=100,      /* This node's resistance          dhwnc*/
         RESTTOL=0,         /* Alt. resistance tolerance       dhwnc*/
         SRNUM=4,           /* Num. of sysout receivers        dhwnc*/
         STNUM=4            /* Num. of sysout transmitters     dhwnc*/
/*                          NJE NODES                            FRM*/
NODE(191)  NAME=CHIMVS,     /* NJE  NAME FOR CHICO MVS              */
         AUTH=(NET=NO,DEVICE=NO,JOB=NO,SYSTEM=NO), /* NO REMOTE AUTH*/
         COMPACT=0,         /* NO COMPACTION                        */
         HOLD=NONE,         /* RECEIVED JOBS WILL NOT BE HELD       */
         RECEIVE=BOTH,      /* ACCEPT JOBS AND SYSOUT               */
         REST=0,            /* PATH RESISTANCE                      */
         PATHMGR=NO,        /*                                      */
         TRANSMIT=BOTH      /* TRANSMIT JOBS AND SYSOUT             */
/*                                                                  */
NODE(192)  NAME=CHICOVM,    /* NJE  NAME FOR CHICO OS/390           */
         AUTH=(NET=YES,DEVICE=YES,JOB=YES,SYSTEM=YES),
         COMPACT=0,         /* NO COMPACTION                        */
         HOLD=NONE,         /* RECEIVED JOBS WILL NOT BE HELD       */
         RECEIVE=BOTH,      /* ACCEPT JOBS AND SYSOUT               */
         REST=0,            /* PATH RESISTANCE                      */
         TRANSMIT=BOTH      /* TRANSMIT JOBS AND SYSOUT             */
/*                                                                  */
NODE(101)  NAME=CSUCO,      /* NJE  NAME FOR IRT                    */
         AUTH=(NET=NO,DEVICE=NO,JOB=NO,SYSTEM=NO), /* NO REMOTE AUTH*/
         COMPACT=0,         /* NO COMPACTION                        */
         HOLD=NONE,         /* RECEIVED JOBS WILL NOT BE HELD       */
         RECEIVE=BOTH,      /* ACCEPT JOBS AND SYSOUT               */
         REST=0,            /* PATH RESISTANCE                      */
         TRANSMIT=BOTH      /* TRANSMIT JOBS AND SYSOUT             */
/*                                                                  */
CONNECT NODEA=192,NODEB=191
/*                                                                  */
OFF(1).JR CLass=,           /* Reload All Classes             dohwnc*/
         HOLD=,             /* Reload Held - Non-Held         dohwnc*/
         JOBNAME=,          /* Reload Any Job Name            dohwnc*/
                            /* Modify Jobs on Reload                */
         MOD=(CLASS=,       /* - Don't Change Class           dohwnc*/
              HOLD=,        /* - Don't Change Hold            dohwnc*/
              ROUTECDE=,    /* - Don't Change Dest'n          dohwnc*/
              SYSAFF=),     /* - Don't Change SysAff.         dohwnc*/
         NOTIFY=NO,         /* Don't Notify on Reload         dohwnc*/
         RANGE=J1-32767,    /* Reload All Job Numbers         dohwnc*/
         ROUTECDE=(),       /* Reload Jobs w/Any Dest         dohwnc*/
         START=YES,         /* Started with $S OFFLOAD         dhwnc*/
         SYSAFF=(),         /* Reload Jobs with Any Aff       dohwnc*/
         WS=(CLASS/)        /* Job Selection Criteria         dohwnc*/
/*                                                                  */
OFF(1).JT CLass=,           /* Select No Classes              dohwnc*/
         DISP=DELETE,       /* Purge after Offload            dohwnc*/
         HOLD=,             /* Select Held - Non-Held         dohwnc*/
         JOBNAME=,          /* Select Any Job Name            dohwnc*/
         NOTIFY=NO,         /* Don't Notify on Offld.         dohwnc*/
         RANGE=J1-32767,    /* Select All Job Numbers         dohwnc*/
         ROUTECDE=(),       /* Select Jobs w/Any Dest         dohwnc*/
         START=YES,         /* Started with $S OFFLOAD         dhwnc*/
         SYSAFF=(),         /* Select Jobs with Any Aff       dohwnc*/
         VOLUME=(),         /* Select Any Spool Volume        dohwnc*/
         WS=(CLASS/)        /* Job Selection Criteria         dohwnc*/
/*                                                                  */
OFF(1).SR BURST=,         /* Select Any Burst Setting       dohwnc*/
         OUTDISP=(K,H,W,L), /* Select Held - Non-Hld DS      dohwnc*/
         FCB=,              /* Select Any FCB                 dohwnc*/
         FLASH=,            /* Select Any/No Flash            dohwnc*/
         HOLD=,             /* Selct Held/Non-Hld Jobs        dohwnc*/
         JOBNAME=,          /* Select Any Job Name            dohwnc*/
                            /* Modify Following on Reload     dohwnc*/
         MOD=(BURST=,       /* - Don't Change Burst           dohwnc*/
              OUTDISP=,     /* - Don't Change OUTDISP         dohwnc*/
              FCB=,         /* - Don't Change FCB             dohwnc*/
              FLASH=,       /* - Don't Change Flash           dohwnc*/
              HOLD=,        /* - Don't Change Hold            dohwnc*/
              PRMODE=,      /* - Don't Change PRMODE          dohwnc*/
              QUEUE=,       /* - Don't Change Class           dohwnc*/
              ROUTECDE=,    /* - Don't Change Destn           dohwnc*/
              UCS=,         /* - Don't Change UCS             dohwnc*/
              WRITER=),     /* - Don't Change writer          dohwnc*/
         NOTIFY=NO,         /* Don't Notify on reload         dohwnc*/
         PRMODE=(),         /* Select Any PRMODE              dohwnc*/
         QUEUE=,            /* Select Any Sysout Class        dohwnc*/
         RANGE=J1-32767,    /* Select All Job Numbers         dohwnc*/
         ROUTECDE=(),       /* Select Jobs w/Any Dest         dohwnc*/
         START=YES,         /* Started with $S OFFLOAD         dhwnc*/
         UCS=,              /* Select any UCS                 dohwnc*/
         WRITER=,           /* Select any Writer              dohwnc*/
         WS=(Q/)            /* Job Selection Criteria         dohwnc*/
                            /* - Class Only                   dohwnc*/
/*                                                                  */
OFF(1).ST BURST=,           /* Select Any Burst Set'g         dohwnc*/
         DISP=DELETE,       /* Purge after Offload            dohwnc*/
         OUTDISP=(W,K),     /* Select Held - Non-Hld DS       dohwnc*/
         FCB=,              /* Select Any FCB                 dohwnc*/
         FLASH=,            /* Select Any/No Flash            dohwnc*/
         HOLD=,             /* Selct Held-Non-Hld Jobs        dohwnc*/
         JOBNAME=,          /* Select Any Job Name            dohwnc*/
         LIMIT=(0-*),       /* Select Any # Lines             dohwnc*/
         NOTIFY=NO,         /* Don't Notify on Offld.         dohwnc*/
         PLIM=(0-*),        /* Select Any # Pages             dohwnc*/
         PRMODE=(),         /* Select Any PRMODE              dohwnc*/
         QUEUE=,            /* Select Any Sysout Class        dohwnc*/
         RANGE=J1-32767,    /* Select All Job Numbers         dohwnc*/
         ROUTECDE=(),       /* Select Jobs w/Any Dest         dohwnc*/
         START=YES,         /* Started with $S OFFLOAD         dhwnc*/
         UCS=,              /* Select any UCS                 dohwnc*/
         VOLUME=(),         /* Select Any Spool Volume        dohwnc*/
         WRITER=,           /* Select any Writer              dohwnc*/
         WS=(Q/)            /* Job Selection Criteria         dohwnc*/
                            /* - Class Only                   dohwnc*/
/*                                                                   */
/*********************************************************************/
/*                            *--------------------------------------*
                              |    JES2 Options Definition           |
                              |    added in SP311                    |
                              *--------------------------------------*
                                                                     */
/* OPTSDEF  CKPTOPT=HIGHEST,   */
/*       CONSOLE=YES,         */
/*       HASPPARM=HASPPARM, */
/*       LIST=NO, */
/*       LISTOPT=NO, */
/*       LOG=YES, */
/*       LOGOPT=YES, */
/*       RECONFIG=NO, */
/*       REQMSG=YES, */
/*       STARTOPT=WARM, */
/*       STARTYPE=WARM */
/*                                                                  */
/*                                                                  */
OUTCLASS(A) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=(WRITE,WRITE), /* Not a Held Class               wc*/
         OUTPUT=PRINT,      /* Print Class                        wc*/
         TRKCELL=YES        /* Track-Cell this Class              wc*/
/*                                                                  */
OUTCLASS(B) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=(WRITE,WRITE), /* Not a Held Class               wc*/
         OUTPUT=PUNCH,      /* Print Class                        wc*/
         TRKCELL=NO         /* No Track-Cell                      wc*/
/*                                                                  */
OUTCLASS(D) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=HOLD,      /* A Held Class                       wc*/
         OUTPUT=PRINT,      /* Print Class                        wc*/
         TRKCELL=NO         /* No Track-Cell                      wc*/
/*                                                                  */
OUTCLASS(J) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=(WRITE,WRITE), /* Not a Held Class               wc*/
         OUTPUT=PRINT,      /* Special Print Class                wc*/
         TRKCELL=NO        /* No Track-Cell                      wc*/
/*                                                                 */
OUTCLASS(K) BLNKTRNC=YES,  /* Truncate trailing blanks           wc*/
         OUTDISP=(WRITE,WRITE), /* Not a Held Class               wc*/
         OUTPUT=PUNCH,      /* Special Punch Class                wc*/
         TRKCELL=NO         /* No Track-Cell                      wc*/
/*                                                                 */
OUTCLASS(L) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=HOLD,      /* A Held Class                       wc*/
         OUTPUT=PRINT,      /* Print Class for LWTR               wc*/
         TRKCELL=NO         /* No Track-Cell                      wc*/
/*                                                                  */
OUTCLASS(X) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=HOLD,      /* A Held Class                       wc*/
         OUTPUT=PRINT,      /* Print Class                        wc*/
         TRKCELL=YES        /* Track-Cell this class              wc*/
/*                                                                  */
OUTCLASS(Z) BLNKTRNC=YES,   /* Truncate trailing blanks           wc*/
         OUTDISP=(WRITE,WRITE), /* Not a Held Class               wc*/
         OUTPUT=DUMMY,      /* DUMMY PRINT Class                  wc*/
         TRKCELL=YES        /* Track-Cell this class              wc*/
/*                                                                  */
OUTDEF   BRODCAST=NO,       /* Whether shared broadcasting     downc*/
         COPIES=255,        /* Max. # of Copies Allowed       dohwnc*/
         DMNDSET=NO,        /* No Demand Setup                  dwnc*/
         JOENUM=2000,       /* Max. # of JOEs                     dc*/
/*       JOEFREE  */        /* Number of free JOEs                 d*/
         JOEWARN=80,        /* Warning Threshold %            dohwnc*/
         PRTYHIGH=255,      /* Ceiling for PRTY Aging         dohwnc*/
         PRTYLOW=0,         /* Floor for PRTY Aging           dohwnc*/
         PRTYOUT=NO,        /* No PRTY= on // OUTPUT          dohwnc*/
         STDFORM=STD,       /* Default Forms ID                 dwnc*/
         USERSET=NO         /* No User Demand-Setup             dwnc*/
/*                                                                  */
OUTPRTY(1) PRIORITY=144,    /* Output PRTY is 144 if          dohwnc*/
         RECORD=2000,       /*  < 2000 records (LINE)         dohwnc*/
         PAGE=50            /*  or < 50 pages (PAGE)          dohwnc*/
/*                                                                  */
OUTPRTY(2) PRIORITY=128,    /* Output PRTY is 128 if          dohwnc*/
         RECORD=5000,       /*  < 5000 records (LINE)         dohwnc*/
         PAGE=100           /*  or < 100 pages (PAGE)         dohwnc*/
/*                                                                  */
PCEDEF   CNVTNUM=2,         /* Number of Converter PCEs        dhwnc*/
         OUTNUM=2,          /* Number of Output PCEs           dhwnc*/
         PSONUM=2,          /* Number of PSO PCEs              dhwnc*/
         PURGENUM=2         /* Number of Purge PCEs            dhwnc*/
/*                                                                   */
PRINTDEF CCWNUM=200,        /* # CCWs / Print Buffer            dwnc*/
         DBLBUFR=YES,       /* Double Buffer Lcl Prts           dwnc*/
         FCB=6,             /* Initial FCB Loaded               dwnc*/
         LINECT=61,         /* 61 Lines/Page                  dohwnc*/
/*       NIFCB=8X8,    */   /* No 3800 FCB Loaded               dwnc*/
/*       NIFLASH=****, */    /* No 3800 Flash Loaded             dwnc*/
                             /* NOTE: the values for NIFCB= and      */
                             /*       NIFLASH=  CANNOT be null or    */
                             /*       asterisks (as shown here).     */
                             /*       If the statements are not      */
                             /*       coded at all, then the default */
                             /*       will be asterisks. The         */
                             /*       statements are shown this way  */
                             /*       only to include the default    */
                             /*       values here.                   */
         NIUCS=0,            /* Was GT15                         dwnc*/
         RDBLBUFR=NO,        /* Single Buffer Rmt Prts           dwnc*/
         SEPPAGE=(LOCAL=FULL,REMOTE=HALF),
         TRANS=NO,           /* PN-Xlate for 1403/Rm.Pr          dwnc*/
         UCS=0               /* Bypass UCS-Loading               dwnc*/
/*                                                                   */
/*                                                                   */
/*********************************************************************/
/*                            *--------------------------------------*
                              |    Local Printers                    |
                              *--------------------------------------*
                                                                     */
                             /* Alternate name for PRTn:             */
                             /*   PRINTERn                           */
PRT(1)  CLASS=AJ,       /* Job class that can be chosen   dohwnc*/
        CKPTLINE=0,      /*  Max lines in a logical page    dohwnc*/
/*      UNIT=00E,           set prt1 to printer 00e  */
        CKPTPAGE=100,    /*  Max pages before a CKPT        dohwnc*/
        START=NO,        /*  PRT1 comes up drained          dohwnc*/
       WS=(W,R,Q,PRM,LIM/F,UCS,FCB,P),
         TRKCELL=NO      /*  Records despooled 1 at a time    hwnc*/
/*                                                                  */
PRT(2)  CLASS=AJ,       /* Job class that can be chosen   dohwnc*/
        CKPTLINE=0,      /*  Max lines in a logical page    dohwnc*/
/*      UNIT=00F,            set prt2 to printer 00F  */
        CKPTPAGE=100,    /*  Max pages before a CKPT        dohwnc*/
        START=YES,       /*  PRT2 comes up started          dohwnc*/
       WS=(W,R,Q,PRM,LIM/F,UCS,FCB,P),
         TRKCELL=NO      /*  Records despooled 1 at a time    hwnc*/
/*                                                                   */
PUNCHDEF CCWNUM=200,         /* # CCWs / Punch Buffer            dwnc*/
         DBLBUFR=YES,        /* Single Buffer Lcl Puns           dwnc*/
         RDBLBUFR=NO         /* Single Buffer Rmt Puns           dwnc*/
/*                                                                   */
PUN(1)  CKPTLINE=100,    /* No. of cards to punch per page dohwnc*/
        CLASS=BK,    /*  Output class processed by PUN  dohwnc*/
       WS=(W,R,Q,PRM,LIM/F,P)  /* Work selection criterion    dohwnc*/
/*                                                                   */
PUN(2)  CKPTLINE=100,    /* No. of cards to punch per page dohwnc*/
        CLass=BK,    /*  Output class processed by PUN  dohwnc*/
       WS=(W,R,Q,PRM,LIM/F,P)  /* Work selection criterion    dohwnc*/
/*                                                                   */
RDR(1)  START=YES,       /* RDRnn comes up started (DRAIN) dohwnc*/
        CLASS=A,        /* Default job class              dohwnc*/
        HOLD=NO,        /* Jobs not held after conv.(HOLD)dohwnc*/
        MSGCLASS=A     /* Default message class          dohwnc*/
/*                                                                  */
/* RECVOPTS (ALL)  */       /* JES2 Main Task                 dohwnc*/
/*       COUNT=2,  */        /* Number of occurrences to count dohwnc*/
/*       INTERVAL=24  */     /* Interval (in hours) in which   dohwnc*/
                             /* errors are counted                   */
                             /*                                      */
/*                                                                   */
RMT(1)    DEVTYPE=LUTYPE1,BUFSIZE=256,LINE=1,NUMRDR=0,
          NUMPRT=1,NUMPUN=0,COMPACT=NO,COMPRESS=NO,CONS=NO
R(1).PR(1)   CLASS=A,PRWIDTH=132,CKPTPAGE=1,CKPTLINE=66
DESTID(KENDALL)  DEST=R1
/*                                                                   */
RMT(2)    DEVTYPE=LUTYPE1,BUFSIZE=256,LINE=2,NUMRDR=0,
          NUMPRT=1,NUMPUN=0,COMPACT=NO,COMPRESS=NO,CONS=NO
R(2).PR(1)   CLASS=A,PRWIDTH=132,CKPTPAGE=1,CKPTLINE=66
DESTID(LASER1)  DEST=R2
/*                                                                   */
RMT(3)    DEVTYPE=LUTYPE1,BUFSIZE=256,LINE=3,NUMRDR=0,
          NUMPRT=1,NUMPUN=0,COMPACT=NO,COMPRESS=NO,CONS=NO,
          SETUP=PDIR
R(3).PR(1)   CLASS=A,PRWIDTH=132,CKPTPAGE=1,CKPTLINE=66
DESTID(FABO)    DEST=R3
/*                                                                   */
RMT(4)    DEVTYPE=LUTYPE1,BUFSIZE=256,LINE=4,NUMRDR=0,
          NUMPRT=1,NUMPUN=0,COMPACT=NO,COMPRESS=NO,CONS=NO
R(4).PR(1)   CLASS=A,PRWIDTH=132,CKPTPAGE=1,CKPTLINE=66
DESTID(ARLASER) DEST=R4
/*                                                                   */
RMT(5)    DEVTYPE=LUTYPE1,BUFSIZE=256,LINE=5,NUMRDR=0,
          NUMPRT=1,NUMPUN=0,COMPACT=NO,COMPRESS=NO,CONS=NO,
          SETUP=PDIR
R(5).PR(1)   CLASS=A,PRWIDTH=132,CKPTPAGE=1,CKPTLINE=66
DESTID(PRCH)    DEST=R5
/*                                                                   */
                             /* BSC remote terminal                  */
                             /* Work selection criteria        dohwnc*/
SMFDEF   BUFNUM=20,          /* Number of SMF Buffers            dwnc*/
         BUFWARN=80          /* Warning Threshold %            dohwnc*/
/*                                                                   */
SPOOLDEF BUFSIZE=3992,       /* Maximum Buffer Size                dc*/
         DSNAME=SYS1.HASPACE,/* Spool Data Sets' Name              dc*/
         FENCE=NO,           /* Don't Force to Minimum volume   downc*/
         SPOOLNUM=32,        /* Max. Number of spool volumes      dwc*/
         TGBPERVL=5,         /* track groups per volume in blob  dowc*/
         TGSPACE=(MAX=16288, /* Fits TGMs into 4K Page               */
                  WARN=80),  /* Warning Threshold %                  */
         TGSIZE=30,          /* 30 Buffers/Track Group           dwnc*/
         TRKCELL=3,          /* 3 Buffers/Track-cell               dc*/
         VOLUME=RESCU        /* SPOOL VOLUME SERIAL #S               */
/*       VOLUME=CSUSP           SPOOL VOLUME SERIAL #S             CS*/
/*                                                                   */
/*********************************************************************/
/*                            *--------------------------------------*
                              |    SSI Definitions                   |
                              |    added in SP311                    |
                              *--------------------------------------*
                                                                     */
SSI(1)  TRACE=NO            /* Specify which subsystem funct  dohwnc*/
                            /* Whether or not tracing is      dohwnc*/
                            /*  active for this SSI function        */
/*                                                                   */
STCCLASS TIME=(1440,00),     /* Job Step Time   ...mmmmss........... */
         REGION=000K,        /* Region Size     .........ccc........ */
         COMMAND=EXECUTE,    /* Execute Commands............r....... */
         BLP=NO,             /* Ignore BLP parm .............l...... */
         AUTH=ALL,           /* Allow all Cmds  ..............aaaa.. */
         MSGLEVEL=(0,0),     /* Job, All Msgs   ..................ef */
         IEFUJP=YES,         /* Take SMF Job Purge Exit         dhwnc*/
         IEFUSO=YES,         /* Take SYSOUT Excess Exit         dhwnc*/
         LOG=YES,            /* Print JES2 JOB LOG              dhwnc*/
         MSGCLASS=A,         /* Default Message Class           dhwnc*/
         OUTPUT=YES,         /* Produce Output for Job          dhwnc*/
         PERFORM=000,        /* SRM Performance Group 0         dhwnc*/
         PROCLIB=00,         /* Use //PROC00 DD                 dhwnc*/
         SWA=BELOW,          /* SWA cbs below 16m line          dhwnc*/
                             /*     (added by APAR OY02574)          */
                             /*     (superseded by APAR OY03444)     */
         TYPE6=YES,          /* Produce SMF 6 Records           dhwnc*/
         TYPE26=YES          /* Produce SMF 26 Records          dhwnc*/
/*                                                                   */
/*                             TP (NJE/RJE) Characteristics          */
TPDEF    BELOWBUF=(LIMIT=200,SIZE=1152,WARN=80),
         EXTBUF=(LIMIT=200,SIZE=1152,WARN=80),
         MBUFSIZE=400,       /* Multi-leaving buffer size            */
         RMTMSG=100,         /* Max. # Msgs Queued to remote         */
         SESSION=20,         /* MAX. # SNA Sessions                  */
         AUTOINTV=120        /* AUTO LOGIN TIMER INTERVAL       dhwnc*/
/*                                                                   */
/*********************************************************************/
TRACE(1)  START=NO          /* Specify which trace id          downc*/
/*                                                                   */
/*********************************************************************/
/*                            *--------------------------------------*
                              |    $TRACE Facility                   |
                              *--------------------------------------*
                                                                     */
TRACEDEF TABLES=3,           /* Number of trace tables          downc*/
         PAGES=2,            /* Number of 4K pages per table     dwnc*/
         TABWARN=80,         /* Warning Threshold %             downc*/
         ACTIVE=NO,          /* Whether or not to start the      dwnc*/
                             /*  trace facility                      */
         LOG=(START=NO,      /* Whether or not to format and    downc*/
                             /*  add data to trace log dataset       */
              SIZE=500,      /* Max size of trace log dataset   downc*/
              CLASS=A)       /* Trace log dataset output class  downc*/
/*                                                                   */
/*********************************************************************/
/*                            *--------------------------------------*
                              |    TSU Defaults                      |
                              *--------------------------------------*
                                                                     */
TSUCLASS TIME=(1440,00),     /* Job Step Time   ...mmmmss..........  */
         REGION=000K,        /* Region Size     .........ccc.......  */
         COMMAND=EXECUTE,    /* Execute Commands............r......  */
         BLP=NO,             /* Ignore BLP parm .............l.....  */
         AUTH=ALL,           /* Allow all Cmds  ..............aaaa.  */
         MSGLEVEL=(0,0),     /* Job, All Msgs   ..................ef */
         IEFUJP=YES,         /* Take SMF Job Purge Exit         dhwnc*/
         IEFUSO=YES,         /* Take SYSOUT Excess Exit         dhwnc*/
         LOG=YES,            /* Print JES2 JOB LOG              dhwnc*/
         MSGCLASS=Z,         /* Default Message Class           dhwnc*/
         OUTPUT=YES,         /* Produce Output for Job          dhwnc*/
         PERFORM=000,        /* SRM Performance Group 0         dhwnc*/
         PROCLIB=00,         /* Use //PROC00 DD                 dhwnc*/
         SWA=BELOW,          /* SWA cbs below 16m line          dhwnc*/
                             /*     (added by APAR OY02574)          */
                             /*     (superseded by APAR OY03444)     */
         TYPE6=YES,          /* Produce SMF 6 Records           dhwnc*/
         TYPE26=YES          /* Produce SMF 26 Records          dhwnc*/
                             /*                                      */
/*********************************************************************/
$SLOGON1
$SLINE1
$SLINE2
$SLINE3
$SLINE4
$SLINE5
$SLINE101
$SLINE191
./ ADD NAME=XXLOAD00 0100-02365-02365-0941-00003-00003-00000-JMILLER
IODF     02 SYS1              01
NUCLEUS  1
SYSCAT   RESCUE113CCATALOG.RESCUE
./ ADD NAME=XXSMFPRM 0100-02365-02365-0941-00028-00028-00000-JMILLER
     ACTIVE                       /*ACTIVE SMF RECORDING*/
     DSNAME(SYS1.MAN1,SYS1.MAN2,SYS1.MAN3)  /* THREE DATA SETS */
     NOPROMPT                    /*DO NOT PROMPT OPERATOR FOR OPTIONS*/
     REC(PERM)                    /*TYPE 17 PERM RECORDS ONLY*/
     MAXDORM(3000)               /* WRITE AN IDLE BUFFER AFTER 30 MIN*/
     STATUS(010000)              /* WRITE SMF STATS AFTER 1 HOUR*/
     JWT(0030)                   /* 522 AFTER 30 MINUTES*/
     SID(CPAC)                   /* SYSTEM ID IS IPO1  .NU..RU. */
     LISTDSN                     /* LIST DATA SET STATUS AT IPL*/
     SYS(NOTYPE(16:19,62:69),EXITS(IEFU83,IEFU84,IEFACTRT,IEFUJV,
                    IEFUSI,IEFUJI,IEFUTL,IEFU29),NOINTERVAL,NODETAIL)

     /* COLLECT ALL RECORDS. TAKE ALL KNOWN
        EXITS, NOTE: JES EXITS CONTROLED BY JES , THERE IS NO
        DEFAULT INTERVAL RECORDS WRITTEN AND ONLY SUMMARY T32
        RECORDS AS A DEFAULT FOR TSO */

     SUBSYS(STC,EXITS(IEFU29,IEFU83,IEFU84,IEFUJP,IEFUSO))

     /* WRITE RECORDS ACCORDING TO SYS VALUE, TAKE ONLY FIVE
        EXITS, NOTE: IEFU29 EXECUTES IN THE MASTER ASID WHICH IS A
        STC ADDRESS SPACE SO IEFU29 MUST BE ON FOR STC. USE ALL OTHER
        SYS PARMETERS AS A DEFAULT  */
 /* LIB: SYS1.PARMLIB(SMFPRM00)                                   */
 /* GDE: CBIPO MVS CUSTOMIZATION
 /* DOC: THIS MEMBER OF 'SYS1.PARMLIB' CONTAINS PARAMETERS THAT
 /*      DEFINE HOW THE SMF FACILITY WILL BE USED.
 /*
./ ADD NAME=XXVATLST 0100-02365-02365-0941-00002-00002-00000-JMILLER
VATDEF  IPLUSE(PRIVATE) SYSUSE(PRIVATE)
RESCUE,0,0,3390     N - STORAGE VOLUME
