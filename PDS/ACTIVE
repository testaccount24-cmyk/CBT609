./ ADD NAME=$REXSAMP 0100-02365-02365-1212-00039-00039-00000-JMILLER
REXXSAMP - Sample Rexx function in assembler

What it does:
-----------------------------------------------
This assembler program (named ACTIVE) is invoked from the Rexx
interpretive environment, and is invoked the same way as a
built-in Rexx function.  This particular program is passed a 1-8
character string containing the name of an MVS job, and returns a
boolean value of true if the job is running, or false if the job
is not running.  ("Job" can be an STC, JOB or TSU.)

How to transfer file to the MVS host.
-----------------------------------------------

- Create a PDS on the MVS system, called userid.TEMP, or some
  such name.  CYL(1,1,15) is big enough.
  RECFM=FB,LRECL=80,BLKSIZE=6160 are suitable DCB parameters.

- Download the REXXSAMP.EXE self-extracting file to a PC.  Place
  REXXSAMP.EXE in a directory by itself, and run it.  This will
  result in all required members being extracted. (These won't be
  readable on a PC  See note below)

- FTP all the extracted files from the PC to the MVS PDS
  allocated in the first step.  Use the FTP subcommand: "BINARY"
  or equivalent to specify a binary transfer.  This is a must.
  (These FTP'd files become members of the target PDS.)

- Read the $$$$$DOC member in the PDS for further instructions.


NOTE: The files that are in this self-extracting zip file are in
EBCDIC format, so they will look like garbage on the PC, even
after being extracted.  They will however be normal, readable
EBCDIC PDS members after they are extracted and transferred to an
MVS host using Binary mode.


John C. Miller
./ ADD NAME=ACTIVE   0100-02365-02365-1212-00237-00237-00000-JMILLER
//EGTLJCMA JOB (0),JCMILLER,MSGCLASS=X,CLASS=A,NOTIFY=EGTLJCM,REGION=6M
//ASSEMBLE  EXEC ASMHCL,
//    REGION=2M,PARM.C='OBJECT,NODECK,RENT,REUS',
//    PARM.L='RENT,REUS'
//C.SYSLIB    DD DISP=SHR,DSN=SYS1.MACLIB
//            DD DISP=SHR,DSN=SYS1.MODGEN
//SYSIN       DD *
         TITLE 'ACTIVE - Look for an active STC, JOB or TSU'
*---------------------------------------------------------------------*
* ACTIVE                                                              *
*---------------------------------------------------------------------*
* Note: This module is an example of how to code a rexx function      *
* in assembler language.  Assemble and linkedit this source to a load *
* library that is in LNKLST, LPALST, or other location that makes the *
* module available to the TSO environment. (STEPLIB, etc.)            *
* Then, invoke the program as you would a built-in rexx function. The *
* 'active' program in this example would be invoked as follows:       *
* /* rexx */                                                          *
* IF active('SMTP') THEN SAY 'SMTP IS ACTIVE'                         *
*                                                                     *
* Your own rexx function can do anything that needs to be done from a *
* non-APF authorized environment, and needs only to set the necessary *
* EVDATA          - The actual data you want to return to your exec.  *
* EVALBLOCK_EVLEN - Length of the data returned.                      *
* R15 = 0 ===>    - Function processed normally.                      *
* R15 = 8 ===>    - Function had an error--rexx exec will terminate.  *
*---------------------------------------------------------------------*
* Author:       John C. Miller                                        *
* System:       General Rexx utility function.                        *
* Purpose:      Rexx function to see if a specified JOB, STC or TSU   *
*               is active on the system.                              *
* Notes:        This module is called from the Rexx interpretive      *
*               environment.                                          *
* Registers:    Entry:                                                *
*                  R0  - Points to Environment Control Block.         *
*                  R1  - Points to Evaluation Block.                  *
*               Exit:                                                 *
*                  R0  - Points to Environment Control Block.         *
*                  R1  - Points to External Routine Parameter List.   *
*                  R15 - 0 means function processed normally.         *
*                        8 means function had errors.  Rexx will give *
*                        an error message and flush the rest of the   *
*                        rexx exec.                                   *
* Return Value: C'1' means JOB/STC/TSU was found.                     *
*               C'0' means JOB/STC/TSU was not found.                 *
* Invocation:                                                         *
*     /* REXX */                                                      *
*     IF active('SMTP') THEN SAY 'SMTP IS ACTIVE'                     *
*---------------------------------------------------------------------*
* 11/26/93 John Miller                                                *
*----------------------------------------------------------------------
         LCLC  &RETN               Set symbolic for subr. return reg.
&RETN    SETC  'R14'
*
ACTIVE   CSECT
         SAVE  (14,12),,REXX-&SYSTIME-&SYSDATE-JCM
         LR    R10,R15             Load base register.
         USING ACTIVE,R10          Get addressability.
         LR    R2,R1               Save ERPL pointer.
         GETMAIN R,LV=WLENG        Get storage, and chain save areas.
         ST    R13,4(R1)             "
         ST    R1,8(R13)             "
         LR    R13,R1                "
         USING WORKAREA,R13        Addressability to work area.
         MVC   ARGPTR,16(R2)       Set up -> agrlist.
         XC    RCODE,RCODE         Start with RC=0.
*---------------------------------------------------------------------*
*   SET UP EVAL BLOCK                                                 *
*---------------------------------------------------------------------*
EBSETUP  DS    0H
         L     R9,20(R2)           Point to EVALB pointer.
         L     R9,0(R9)            Point to EVALB.
         USING EVALBLOCK,R9        Addressability to EVAL block.
*---------------------------------------------------------------------*
*   Main section.                                                     *
*   Get jobname from function call: CL8                               *
*---------------------------------------------------------------------*
MAIN     DS    0H
         MVC   JNAME,=CL8' '       Blank out parm storage.
         LA    R12,JNAME           Point to where parm will go.
         MVI   ARGLEN,8            Set max length of parm.
         BAL   &RETN,GETPARM       Parse parameter from function call.
         NC    RCODE,RCODE         If non-zero return code then -
         BNZ   BADRC                 return.
*---------------------------------------------------------------------*
*   Now chain through ASCBs to see if ours is there.                  *
*---------------------------------------------------------------------*
         L     R1,16               -> CVT.
         USING CVT,R1              Get addressability to CVT.
         L     R1,CVTASVT          -> ASVT
         USING ASVT,R1             Get addressability to ASVT.
         L     R2,ASVTMAXU         Max. number of ASCB's.
         LA    R3,ASVTENTY         -> First ASCB.
ASCBTOP  DS    0H
         L     R1,0(R3)            Get ptr to this ASCB.
         LTR   R1,R1               Live ASCB?
         BM    NEXTASCB            No, Try next.
         USING ASCB,R1             Addressability.
         LM    R4,R5,ASCBJBNI      Get job names.
         CLC   0(8,R4),JNAME       Jobname match initated jobname?
         BE    TRUE                Yes, set TRUE result.
         CLC   0(8,R5),JNAME       Johname match STC/Mount jobname?
         BE    TRUE                Yes, set TRUE result.
NEXTASCB DS    0H
         LA    R3,4(R3)            -> next ASCB pointer.
         BCT   R2,ASCBTOP          Look at next ASCB in chain.
*---------------------------------------------------------------------*
*   False - ASCB not found.                                           *
*---------------------------------------------------------------------*
FALSE    DS    0H
         MVI   EVDATA,C'0'                Move data to return area.
         MVC   EVALBLOCK_EVLEN,=F'1'      Set return value length.
         B     EXIT                       Go clean up and exit.
*---------------------------------------------------------------------*
*   Specified job was found - Return 1 (TRUE)                         *
*---------------------------------------------------------------------*
TRUE     DS    0H
         MVI   EVDATA,C'1'                Move data to return area.
         MVC   EVALBLOCK_EVLEN,=F'1'      Set return value length.
***********************************************************************
*   RETURN SECTION                                                    *
***********************************************************************
EXIT     DS    0H
         MVI   RCODE,0                    Set good return code.
EXIT0    DS    0H
         SR    R4,R4                      Clear register.
         IC    R4,RCODE                   Save return code in reg.
         LR    R1,R13                     Get work area address.
         L     R13,4(R13)                 Restore caller's R13.
         FREEMAIN R,A=(1),LV=WLENG        Free work area.
         LR    R15,R4                     Load saved return code.
         RETURN (14,12),RC=(15)           Return to caller with RC.
*---------------------------------------------------------------------*
*   Bad function call.                                                *
*---------------------------------------------------------------------*
BADRC    DS    0H
         MVC   EVALBLOCK_EVLEN,=F'0'      Set zero length.
         MVI   RCODE,8                    Set failure return code.
         B     EXIT0                      Go clean up and exit.
*---------------------------------------------------------------------*
*   GETPARM                                                           *
*---------------------------------------------------------------------*
*   - Subroutine to copy data from the parsed argument list to a      *
*     work variable.                                                  *
*---------------------------------------------------------------------*
*   R11 - Current ARGLIST pointer.                                    *
*   R12 - Variable in which to store data.                            *
*   ARGPTR - Current ARG pointer.                                     *
*   ARGLEN - Maximum length of parm.                                  *
*   ARGEVLEN - Actual length of parm.                                 *
*---------------------------------------------------------------------*
GETPARM  DS    0H
         STM   R1,R14,REGS1        Save registers.
         L     R11,ARGPTR          Point to current argument.
         CLC   0(4,R11),=X'FFFFFFFF'  End of list?
         BNE   ATOP                No, extract the argument.
*--------RC 4 MEANS "EOF" ON PARMS------------------------------------*
ARGDONE  DS    0H
         MVI   RCODE,4             Set return code.
         B     ARGRETN             RETURN TO MAINLINE
*--------RC 8 MEANS PARM EXCEEDED LENGTH SPECIFIED IN ARGLEN----------*
ARGBAD   DS    0H
         MVI   RCODE,8             SET RETURN CODE
         B     ARGRETN             RETURN TO MAINLINE
*--------RC 0 MEANS PARM RETRIEVED AS REQUESTED-----------------------*
ATOP     DS    0H
         MVI   RCODE,0             ZERO RETURN CODE
         L     R6,0(R11)           LOAD PTR TO ARGUMENT DATA
         L     R7,4(R11)           LOAD LENGTH
         ST    R7,ARGEVLEN         SAVE PARAMETER LENGTH
         XR    R8,R8               CLEAR REG
         IC    R8,ARGLEN           GET MAX LENG
         CR    R7,R8               IS LENGTH TO BIG?
         BH    ARGBAD              YES, BETTER EXIT
         BCTR  R7,0                -1 FOR EX
         EX    R7,PMOVE            MOVE PARM TO OUTPUT
         LA    R11,8(R11)          POINT TO NEXT PARAMTER ENTRY
         ST    R11,ARGPTR          SAVE FOR NEXT TIME
ARGRETN  DS    0H
         LM    R1,R14,REGS1        RESTORE REGS
         BR    &RETN               GET NEXT PARAMETER
PMOVE    MVC   0(0,R12),0(R6)      FOR EX
***********************************************************************
*   CONSTANTS                                                         *
***********************************************************************
         LTORG
*---------------------------------------------------------------------*
* Register equates                                                    *
*---------------------------------------------------------------------*
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
***********************************************************************
*   WORKING STORAGE                                                   *
***********************************************************************
WORKAREA DSECT                     BEGINNING OF WORKAREA
SAVEAREA DS    18F                 REGISTER SAVE AREA
REGS1    DS    18F                 Subroutine reg save area.
*-------------------VARIABLES USED BY GETVAR ROUTINE------------------*
ARGPTR   DS    F                   CURRENT ARGUMENT LIST POINTER
ARGEVLEN DS    F                   LENGTH RETURNED BY ARGUMENT PARSE
ARGLEN   DS    X                   CURRENT ARGUMENT MAXIMUM LENGTH
*---------------------WORK VARIABLES----------------------------------*
RCODE    DS    X                   RETURN CODE
*---------------------WORK VARIABLES----------------------------------*
JNAME    DS    CL8                 Julian Date
*---------------------END OF DYNAMIC AREA-----------------------------*
         DS    0D                  FILL OUT DSECT TO DOUBLEWORD
WLENG    EQU   *-WORKAREA          END OF WORKAREA
*---------------------------------------------------------------------*
*   Mapping Macros.                                                   *
*---------------------------------------------------------------------*
         IRXEVALB
         ORG   EVALBLOCK_EVDATA    REPOSITION TO REMAP EVDATA
EVDATA   DS    CL8                 LOCAL EVDATA
EBL      EQU   *-EVALBLOCK
         CVT   DSECT=YES,LIST=YES
         IHAASVT
         IHAASCB
***********************************************************************
*   End of Module.                                                    *
***********************************************************************
         END
//L.SYSLMOD DD  DISP=SHR,DSN=SYSOSG.CSULOAD(ACTIVE)
